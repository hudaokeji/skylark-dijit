{"version":3,"sources":["_BidiMixin.js"],"names":["define","bidi_const","textDir","getTextDir","text","this","_checkContextual","fdc","exec","dir","isLeftToRight","applyTextDir","element","tagName","toLowerCase","value","innerText","textContent","enforceTextDirWithUcc","option","originalText","restoreOriginalText","origObj","_setTextDirAttr","_created","_set","node","displayNode","align","textDirNode","focusNode","textbox"],"mappings":";;;;;;;AAAAA,UAAW,WAMV,IAAIC,EAEG,IAFHA,EAGG,IAHHA,EAKG,IAGP,OAsBCC,QAAS,GAETC,WAAY,SAAoBC,GAS/B,MAAuB,QAAhBC,KAAKH,QAAoBG,KAAKC,iBAAiBF,GAAQC,KAAKH,SAGpEI,iBAAkB,SAASF,GAQ1B,IAAIG,EAAM,4EAA4EC,KAAKJ,GAE3F,OAAOG,EAAQA,EAAI,IAAM,IAAM,MAAQ,MAAUF,KAAKI,IAAMJ,KAAKI,IAAMJ,KAAKK,gBAAkB,MAAQ,OAGvGC,aAAc,SAAqBC,EAAqBR,GAevD,GAAGC,KAAKH,QAAQ,CACf,IAAIA,EAAUG,KAAKH,QACnB,GAAc,QAAXA,EAAkB,CAEpB,QAAmB,IAATE,EAAqB,CAE9B,IAAIS,EAAUD,EAAQC,QAAQC,cAC9BV,EAAmB,SAAXS,GAAiC,YAAXA,EAAyBD,EAAQG,MAC9DH,EAAQI,WAAaJ,EAAQK,aAAe,GAE9Cf,EAAUG,KAAKC,iBAAiBF,GAG9BQ,EAAQH,KAAOP,IAEjBU,EAAQH,IAAMP,KAKjBgB,sBAAuB,SAASC,EAAQf,GAcvC,OAAGC,KAAKH,SACJiB,IACFA,EAAOC,aAAehB,IAGR,QADW,QAAhBC,KAAKH,QAAoBG,KAAKC,iBAAiBF,GAAQC,KAAKH,SAC/CD,EAAiBA,GAAmBG,EAAOH,GAE5DG,GAGRiB,oBAAqB,SAASC,GAY7B,OAJGA,EAAQF,eACVE,EAAQlB,KAAOkB,EAAQF,oBAChBE,EAAQF,cAETE,GAGRC,gBAAiB,SAAoBrB,GAMpC,IAAIG,KAAKmB,UAAYnB,KAAKH,SAAWA,EAAQ,CAC5CG,KAAKoB,KAAK,UAAWvB,GACrB,IAAIwB,EAAO,KACRrB,KAAKsB,aACPD,EAAOrB,KAAKsB,YACZtB,KAAKsB,YAAYC,MAAoB,OAAZvB,KAAKI,IAAe,QAAU,QAEvDiB,EAAOrB,KAAKwB,aAAexB,KAAKyB,WAAazB,KAAK0B,QAEhDL,GACFrB,KAAKM,aAAae","file":"../_BidiMixin.js","sourcesContent":["define([], function(){\r\n\r\n\t// module:\r\n\t//\t\tdijit/_BidiMixin\r\n\r\n\t// UCC - constants that will be used by bidi support.\r\n\tvar bidi_const = {\r\n\t\tLRM : '\\u200E',\r\n\t\tLRE : '\\u202A',\r\n\t\tPDF : '\\u202C',\r\n\t\tRLM : '\\u200f',\r\n\t\tRLE : '\\u202B'\r\n\t};\r\n\r\n\treturn {\r\n\t\t// summary:\r\n\t\t//\t\tWhen has(\"dojo-bidi\") is true, _WidgetBase will mixin this class.   It enables support for the textdir\r\n\t\t//\t\tproperty to control text direction independently from the GUI direction.\r\n\t\t// description:\r\n\t\t//\t\tThere's a special need for displaying BIDI text in rtl direction\r\n\t\t//\t\tin ltr GUI, sometimes needed auto support.\r\n\t\t//\t\tIn creation of widget, if it's want to activate this class,\r\n\t\t//\t\tthe widget should define the \"textDir\".\r\n\r\n\t\t// textDir: String\r\n\t\t//\t\tBi-directional support,\tthe main variable which is responsible for the direction of the text.\r\n\t\t//\t\tThe text direction can be different than the GUI direction by using this parameter in creation\r\n\t\t//\t\tof a widget.\r\n\t\t//\r\n\t\t//\t\tAllowed values:\r\n\t\t//\r\n\t\t//\t\t1. \"ltr\"\r\n\t\t//\t\t2. \"rtl\"\r\n\t\t//\t\t3. \"auto\" - contextual the direction of a text defined by first strong letter.\r\n\t\t//\r\n\t\t//\t\tBy default is as the page direction.\r\n\t\ttextDir: \"\",\r\n\r\n\t\tgetTextDir: function(/*String*/ text){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGets the right direction of text.\r\n\t\t\t// description:\r\n\t\t\t//\t\tIf textDir is ltr or rtl returns the value.\r\n\t\t\t//\t\tIf it's auto, calls to another function that responsible\r\n\t\t\t//\t\tfor checking the value, and defining the direction.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected.\r\n\t\t\treturn this.textDir == \"auto\" ? this._checkContextual(text) : this.textDir;\r\n\t\t},\r\n\r\n\t\t_checkContextual: function(text){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFinds the first strong (directional) character, return ltr if isLatin\r\n\t\t\t//\t\tor rtl if isBidiChar.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate.\r\n\r\n\t\t\t// look for strong (directional) characters\r\n\t\t\tvar fdc = /[A-Za-z\\u05d0-\\u065f\\u066a-\\u06ef\\u06fa-\\u07ff\\ufb1d-\\ufdff\\ufe70-\\ufefc]/.exec(text);\r\n\t\t\t// if found return the direction that defined by the character, else return widgets dir as defult.\r\n\t\t\treturn fdc ? ( fdc[0] <= 'z' ? \"ltr\" : \"rtl\" ) : this.dir ? this.dir : this.isLeftToRight() ? \"ltr\" : \"rtl\";\r\n\t\t},\r\n\r\n\t\tapplyTextDir: function(/*DOMNode*/ element, /*String?*/ text){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSet element.dir according to this.textDir, assuming this.textDir has a value.\r\n\t\t\t// element:\r\n\t\t\t//\t\tThe text element to be set. Should have dir property.\r\n\t\t\t// text:\r\n\t\t\t//\t\tIf specified, and this.textDir is \"auto\", for calculating the right transformation\r\n\t\t\t//\t\tOtherwise text read from element.\r\n\t\t\t// description:\r\n\t\t\t//\t\tIf textDir is ltr or rtl returns the value.\r\n\t\t\t//\t\tIf it's auto, calls to another function that responsible\r\n\t\t\t//\t\tfor checking the value, and defining the direction.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected.\r\n\r\n\t\t\tif(this.textDir){\r\n\t\t\t\tvar textDir = this.textDir;\r\n\t\t\t\tif(textDir == \"auto\"){\r\n\t\t\t\t\t// convert \"auto\" to either \"ltr\" or \"rtl\"\r\n\t\t\t\t\tif(typeof text === \"undefined\"){\r\n\t\t\t\t\t\t// text not specified, get text from element\r\n\t\t\t\t\t\tvar tagName = element.tagName.toLowerCase();\r\n\t\t\t\t\t\ttext = (tagName == \"input\" || tagName == \"textarea\") ? element.value :\r\n\t\t\t\t\t\t\telement.innerText || element.textContent || \"\";\r\n\t\t\t\t\t}\r\n\t\t\t\t\ttextDir = this._checkContextual(text);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(element.dir != textDir){\r\n\t\t\t\t\t// set element's dir to match textDir, but not when textDir is null and not when it already matches\r\n\t\t\t\t\telement.dir = textDir;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tenforceTextDirWithUcc: function(option, text){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tWraps by UCC (Unicode control characters) option's text according to this.textDir\r\n\t\t\t// option:\r\n\t\t\t//\t\tThe element (`<option>`) we wrapping the text for.\r\n\t\t\t// text:\r\n\t\t\t//\t\tThe text to be wrapped.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThere's a dir problem with some HTML elements. For some elements (e.g. `<option>`, `<select>`)\r\n\t\t\t//\t\tdefining the dir in different direction then the GUI orientation, won't display correctly.\r\n\t\t\t//\t\tFF 3.6 will change the alignment of the text in option - this doesn't follow the bidi standards (static text\r\n\t\t\t//\t\tshould be aligned following GUI direction). IE8 and Opera11.10 completely ignore dir setting for `<option>`.\r\n\t\t\t//\t\tTherefore the only solution is to use UCC (Unicode  control characters) to display the text in correct orientation.\r\n\t\t\t//\t\tThis function saves the original text value for later restoration if needed, for example if the textDir will change etc.\r\n\t\t\tif(this.textDir){\r\n\t\t\t\tif(option){\r\n\t\t\t\t\toption.originalText = text;\r\n\t\t\t\t}\r\n\t\t\t\tvar dir = this.textDir == \"auto\" ? this._checkContextual(text) : this.textDir;\r\n\t\t\t\treturn (dir == \"ltr\" ? bidi_const.LRE : bidi_const.RLE ) + text + bidi_const.PDF;\r\n\t\t\t}\r\n\t\t\treturn text;\r\n\t\t},\r\n\r\n\t\trestoreOriginalText: function(origObj){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRestores the text of origObj, if needed, after enforceTextDirWithUcc, e.g. set(\"textDir\", textDir).\r\n\t\t\t// origObj:\r\n\t\t\t//\t\tThe element (`<option>`) to restore.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSets the text of origObj to origObj.originalText, which is the original text, without the UCCs.\r\n\t\t\t//\t\tThe function than removes the originalText from origObj!\r\n\t\t\tif(origObj.originalText){\r\n\t\t\t\torigObj.text = origObj.originalText;\r\n\t\t\t\tdelete origObj.originalText;\r\n\t\t\t}\r\n\t\t\treturn origObj;\r\n\t\t},\r\n\r\n\t\t_setTextDirAttr: function(/*String*/ textDir){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSetter for textDir.\r\n\t\t\t// description:\r\n\t\t\t//\t\tUsers shouldn't call this function; they should be calling\r\n\t\t\t//\t\tset('textDir', value)\r\n\t\t\tif(!this._created || this.textDir != textDir){\r\n\t\t\t\tthis._set(\"textDir\", textDir);\r\n\t\t\t\tvar node = null;\r\n\t\t\t\tif(this.displayNode){\r\n\t\t\t\t\tnode = this.displayNode;\r\n\t\t\t\t\tthis.displayNode.align = this.dir == \"rtl\" ? \"right\" : \"left\";\r\n\t\t\t\t}else{\r\n\t\t\t\t\tnode = this.textDirNode || this.focusNode || this.textbox;\r\n\t\t\t\t}\r\n\t\t\t\tif(node){\r\n\t\t\t\t\tthis.applyTextDir(node);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t};\r\n});\r\n"]}