{"version":3,"sources":["focus.js"],"names":["define","aspect","declare","dom","domAttr","domClass","domConstruct","Evented","lang","on","domReady","has","Stateful","win","winUtils","a11y","registry","dijit","lastFocusin","lastTouchOrFocusin","singleton","curNode","activeStack","constructor","check","hitch","this","node","isDescendant","set","prevNode","before","registerIframe","iframe","registerWin","contentWindow","targetWindow","effectiveNode","_this","body","document","event","mdh","evt","target","parentNode","_onTouchNode","fih","tagName","tag","toLowerCase","isFocusable","_onFocusNode","foh","_onBlurNode","remove","now","Date","getTime","_clearFocusTimer","clearTimeout","setTimeout","_clearActiveWidgetsTimer","_setStack","by","contains","firstChild","newStack","popupParent","get","byId","domNode","ownerDocument","frameElement","id","getAttribute","widget","unshift","e","nodeType","oldStack","lastOldIdx","length","lastNewIdx","i","_hasBeenBlurred","_focusManager","_onBlur","emit","_onFocus","focus","attr","handle","window","test","watch","oldVal","newVal"],"mappings":"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","file":"../focus.js","sourcesContent":["define([\r\n\t\"dojo/aspect\",\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom\", // domAttr.get dom.isDescendant\r\n\t\"dojo/dom-attr\", // domAttr.get dom.isDescendant\r\n\t\"dojo/dom-class\",\r\n\t\"dojo/dom-construct\", // connect to domConstruct.empty, domConstruct.destroy\r\n\t\"dojo/Evented\",\r\n\t\"dojo/_base/lang\", // lang.hitch\r\n\t\"dojo/on\",\r\n\t\"dojo/domReady\",\r\n\t\"dojo/sniff\", // has(\"ie\")\r\n\t\"dojo/Stateful\",\r\n\t\"dojo/_base/window\", // win.body\r\n\t\"dojo/window\", // winUtils.get\r\n\t\"./a11y\",\t// a11y.isTabNavigable\r\n\t\"./registry\",\t// registry.byId\r\n\t\"./main\"\t\t// to set dijit.focus\r\n], function(aspect, declare, dom, domAttr, domClass, domConstruct, Evented, lang, on, domReady, has, Stateful, win, winUtils,\r\n\t\t\ta11y, registry, dijit){\r\n\r\n\t// module:\r\n\t//\t\tdijit/focus\r\n\r\n\t// Time of the last focusin event\r\n\tvar lastFocusin;\r\n\r\n\t// Time of the last touch/mousedown or focusin event\r\n\tvar lastTouchOrFocusin;\r\n\r\n\tvar FocusManager = declare([Stateful, Evented], {\r\n\t\t// summary:\r\n\t\t//\t\tTracks the currently focused node, and which widgets are currently \"active\".\r\n\t\t//\t\tAccess via require([\"dijit/focus\"], function(focus){ ... }).\r\n\t\t//\r\n\t\t//\t\tA widget is considered active if it or a descendant widget has focus,\r\n\t\t//\t\tor if a non-focusable node of this widget or a descendant was recently clicked.\r\n\t\t//\r\n\t\t//\t\tCall focus.watch(\"curNode\", callback) to track the current focused DOMNode,\r\n\t\t//\t\tor focus.watch(\"activeStack\", callback) to track the currently focused stack of widgets.\r\n\t\t//\r\n\t\t//\t\tCall focus.on(\"widget-blur\", func) or focus.on(\"widget-focus\", ...) to monitor when\r\n\t\t//\t\twhen widgets become active/inactive\r\n\t\t//\r\n\t\t//\t\tFinally, focus(node) will focus a node, suppressing errors if the node doesn't exist.\r\n\r\n\t\t// curNode: DomNode\r\n\t\t//\t\tCurrently focused item on screen\r\n\t\tcurNode: null,\r\n\r\n\t\t// activeStack: dijit/_WidgetBase[]\r\n\t\t//\t\tList of currently active widgets (focused widget and it's ancestors)\r\n\t\tactiveStack: [],\r\n\r\n\t\tconstructor: function(){\r\n\t\t\t// Don't leave curNode/prevNode pointing to bogus elements\r\n\t\t\tvar check = lang.hitch(this, function(node){\r\n\t\t\t\tif(dom.isDescendant(this.curNode, node)){\r\n\t\t\t\t\tthis.set(\"curNode\", null);\r\n\t\t\t\t}\r\n\t\t\t\tif(dom.isDescendant(this.prevNode, node)){\r\n\t\t\t\t\tthis.set(\"prevNode\", null);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\taspect.before(domConstruct, \"empty\", check);\r\n\t\t\taspect.before(domConstruct, \"destroy\", check);\r\n\t\t},\r\n\r\n\t\tregisterIframe: function(/*DomNode*/ iframe){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRegisters listeners on the specified iframe so that any click\r\n\t\t\t//\t\tor focus event on that iframe (or anything in it) is reported\r\n\t\t\t//\t\tas a focus/click event on the `<iframe>` itself.\r\n\t\t\t// description:\r\n\t\t\t//\t\tCurrently only used by editor.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tHandle with remove() method to deregister.\r\n\t\t\treturn this.registerWin(iframe.contentWindow, iframe);\r\n\t\t},\r\n\r\n\t\tregisterWin: function(/*Window?*/targetWindow, /*DomNode?*/ effectiveNode){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRegisters listeners on the specified window (either the main\r\n\t\t\t//\t\twindow or an iframe's window) to detect when the user has clicked somewhere\r\n\t\t\t//\t\tor focused somewhere.\r\n\t\t\t// description:\r\n\t\t\t//\t\tUsers should call registerIframe() instead of this method.\r\n\t\t\t// targetWindow:\r\n\t\t\t//\t\tIf specified this is the window associated with the iframe,\r\n\t\t\t//\t\ti.e. iframe.contentWindow.\r\n\t\t\t// effectiveNode:\r\n\t\t\t//\t\tIf specified, report any focus events inside targetWindow as\r\n\t\t\t//\t\tan event on effectiveNode, rather than on evt.target.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tHandle with remove() method to deregister.\r\n\r\n\t\t\t// TODO: make this function private in 2.0; Editor/users should call registerIframe(),\r\n\r\n\t\t\t// Listen for blur and focus events on targetWindow's document.\r\n\t\t\tvar _this = this,\r\n\t\t\t\tbody = targetWindow.document && targetWindow.document.body;\r\n\r\n\t\t\tif(body){\r\n\t\t\t\t// Listen for touches or mousedowns... could also use dojo/touch.press here.\r\n\t\t\t\tvar event = has(\"pointer-events\") ? \"pointerdown\" : has(\"MSPointer\") ? \"MSPointerDown\" :\r\n\t\t\t\t\thas(\"touch-events\") ? \"mousedown, touchstart\" : \"mousedown\";\r\n\t\t\t\tvar mdh = on(targetWindow.document, event, function(evt){\r\n\t\t\t\t\t// workaround weird IE bug where the click is on an orphaned node\r\n\t\t\t\t\t// (first time clicking a Select/DropDownButton inside a TooltipDialog).\r\n\t\t\t\t\t// actually, strangely this is happening on latest chrome too.\r\n\t\t\t\t\tif(evt && evt.target && evt.target.parentNode == null){\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t_this._onTouchNode(effectiveNode || evt.target, \"mouse\");\r\n\t\t\t\t});\r\n\r\n\t\t\t\tvar fih = on(body, 'focusin', function(evt){\r\n\t\t\t\t\t// When you refocus the browser window, IE gives an event with an empty srcElement\r\n\t\t\t\t\tif(!evt.target.tagName) { return; }\r\n\r\n\t\t\t\t\t// IE reports that nodes like <body> have gotten focus, even though they have tabIndex=-1,\r\n\t\t\t\t\t// ignore those events\r\n\t\t\t\t\tvar tag = evt.target.tagName.toLowerCase();\r\n\t\t\t\t\tif(tag == \"#document\" || tag == \"body\"){ return; }\r\n\r\n\t\t\t\t\tif(a11y.isFocusable(evt.target)){\r\n\t\t\t\t\t\t_this._onFocusNode(effectiveNode || evt.target);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t// Previous code called _onTouchNode() for any activate event on a non-focusable node.   Can\r\n\t\t\t\t\t\t// probably just ignore such an event as it will be handled by onmousedown handler above, but\r\n\t\t\t\t\t\t// leaving the code for now.\r\n\t\t\t\t\t\t_this._onTouchNode(effectiveNode || evt.target);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\r\n\t\t\t\tvar foh = on(body, 'focusout', function(evt){\r\n\t\t\t\t\t_this._onBlurNode(effectiveNode || evt.target);\r\n\t\t\t\t});\r\n\r\n\t\t\t\treturn {\r\n\t\t\t\t\tremove: function(){\r\n\t\t\t\t\t\tmdh.remove();\r\n\t\t\t\t\t\tfih.remove();\r\n\t\t\t\t\t\tfoh.remove();\r\n\t\t\t\t\t\tmdh = fih = foh = null;\r\n\t\t\t\t\t\tbody = null;\t// prevent memory leak (apparent circular reference via closure)\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_onBlurNode: function(/*DomNode*/ node){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when focus leaves a node.\r\n\t\t\t//\t\tUsually ignored, _unless_ it *isn't* followed by touching another node,\r\n\t\t\t//\t\twhich indicates that we tabbed off the last field on the page,\r\n\t\t\t//\t\tin which case every widget is marked inactive\r\n\r\n\t\t\tvar now = (new Date()).getTime();\r\n\r\n\t\t\t// IE9+ and chrome have a problem where focusout events come after the corresponding focusin event.\r\n\t\t\t// For chrome problem see https://bugs.dojotoolkit.org/ticket/17668.\r\n\t\t\t// IE problem happens when moving focus from the Editor's <iframe> to a normal DOMNode.\r\n\t\t\tif(now < lastFocusin + 100){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// If the blur event isn't followed by a focus event, it means the user clicked on something unfocusable,\r\n\t\t\t// so clear focus.\r\n\t\t\tif(this._clearFocusTimer){\r\n\t\t\t\tclearTimeout(this._clearFocusTimer);\r\n\t\t\t}\r\n\t\t\tthis._clearFocusTimer = setTimeout(lang.hitch(this, function(){\r\n\t\t\t\tthis.set(\"prevNode\", this.curNode);\r\n\t\t\t\tthis.set(\"curNode\", null);\r\n\t\t\t}), 0);\r\n\r\n\t\t\t// Unset timer to zero-out widget stack; we'll reset it below if appropriate.\r\n\t\t\tif(this._clearActiveWidgetsTimer){\r\n\t\t\t\tclearTimeout(this._clearActiveWidgetsTimer);\r\n\t\t\t}\r\n\r\n\t\t\tif(now < lastTouchOrFocusin + 100){\r\n\t\t\t\t// This blur event is coming late (after the call to _onTouchNode() rather than before.\r\n\t\t\t\t// So let _onTouchNode() handle setting the widget stack.\r\n\t\t\t\t// See https://bugs.dojotoolkit.org/ticket/17668\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// If the blur event isn't followed (or preceded) by a focus or touch event then mark all widgets as inactive.\r\n\t\t\tthis._clearActiveWidgetsTimer = setTimeout(lang.hitch(this, function(){\r\n\t\t\t\tdelete this._clearActiveWidgetsTimer;\r\n\t\t\t\tthis._setStack([]);\r\n\t\t\t}), 0);\r\n\t\t},\r\n\r\n\t\t_onTouchNode: function(/*DomNode*/ node, /*String*/ by){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCallback when node is focused or touched.\r\n\t\t\t//\t\tNote that _onFocusNode() calls _onTouchNode().\r\n\t\t\t// node:\r\n\t\t\t//\t\tThe node that was touched.\r\n\t\t\t// by:\r\n\t\t\t//\t\t\"mouse\" if the focus/touch was caused by a mouse down event\r\n\r\n\t\t\t// Keep track of time of last focusin or touch event.\r\n\t\t\tlastTouchOrFocusin = (new Date()).getTime();\r\n\r\n\t\t\tif(this._clearActiveWidgetsTimer){\r\n\t\t\t\t// forget the recent blur event\r\n\t\t\t\tclearTimeout(this._clearActiveWidgetsTimer);\r\n\t\t\t\tdelete this._clearActiveWidgetsTimer;\r\n\t\t\t}\r\n\r\n\t\t\t// if the click occurred on the scrollbar of a dropdown, treat it as a click on the dropdown,\r\n\t\t\t// even though the scrollbar is technically on the popup wrapper (see #10631)\r\n\t\t\tif(domClass.contains(node, \"dijitPopup\")){\r\n\t\t\t\tnode = node.firstChild;\r\n\t\t\t}\r\n\r\n\t\t\t// compute stack of active widgets (ex: ComboButton --> Menu --> MenuItem)\r\n\t\t\tvar newStack=[];\r\n\t\t\ttry{\r\n\t\t\t\twhile(node){\r\n\t\t\t\t\tvar popupParent = domAttr.get(node, \"dijitPopupParent\");\r\n\t\t\t\t\tif(popupParent){\r\n\t\t\t\t\t\tnode=registry.byId(popupParent).domNode;\r\n\t\t\t\t\t}else if(node.tagName && node.tagName.toLowerCase() == \"body\"){\r\n\t\t\t\t\t\t// is this the root of the document or just the root of an iframe?\r\n\t\t\t\t\t\tif(node === win.body()){\r\n\t\t\t\t\t\t\t// node is the root of the main document\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// otherwise, find the iframe this node refers to (can't access it via parentNode,\r\n\t\t\t\t\t\t// need to do this trick instead). window.frameElement is supported in IE/FF/Webkit\r\n\t\t\t\t\t\tnode=winUtils.get(node.ownerDocument).frameElement;\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t// if this node is the root node of a widget, then add widget id to stack,\r\n\t\t\t\t\t\t// except ignore clicks on disabled widgets (actually focusing a disabled widget still works,\r\n\t\t\t\t\t\t// to support MenuItem)\r\n\t\t\t\t\t\tvar id = node.getAttribute && node.getAttribute(\"widgetId\"),\r\n\t\t\t\t\t\t\twidget = id && registry.byId(id);\r\n\t\t\t\t\t\tif(widget && !(by == \"mouse\" && widget.get(\"disabled\"))){\r\n\t\t\t\t\t\t\tnewStack.unshift(id);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tnode=node.parentNode;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}catch(e){ /* squelch */ }\r\n\r\n\t\t\tthis._setStack(newStack, by);\r\n\t\t},\r\n\r\n\t\t_onFocusNode: function(/*DomNode*/ node){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCallback when node is focused\r\n\r\n\t\t\tif(!node){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif(node.nodeType == 9){\r\n\t\t\t\t// Ignore focus events on the document itself.  This is here so that\r\n\t\t\t\t// (for example) clicking the up/down arrows of a spinner\r\n\t\t\t\t// (which don't get focus) won't cause that widget to blur. (FF issue)\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Keep track of time of last focusin event.\r\n\t\t\tlastFocusin = (new Date()).getTime();\r\n\r\n\t\t\t// There was probably a blur event right before this event, but since we have a new focus,\r\n\t\t\t// forget about the blur\r\n\t\t\tif(this._clearFocusTimer){\r\n\t\t\t\tclearTimeout(this._clearFocusTimer);\r\n\t\t\t\tdelete this._clearFocusTimer;\r\n\t\t\t}\r\n\r\n\t\t\tthis._onTouchNode(node);\r\n\r\n\t\t\tif(node == this.curNode){ return; }\r\n\t\t\tthis.set(\"prevNode\", this.curNode);\r\n\t\t\tthis.set(\"curNode\", node);\r\n\t\t},\r\n\r\n\t\t_setStack: function(/*String[]*/ newStack, /*String*/ by){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tThe stack of active widgets has changed.  Send out appropriate events and records new stack.\r\n\t\t\t// newStack:\r\n\t\t\t//\t\tarray of widget id's, starting from the top (outermost) widget\r\n\t\t\t// by:\r\n\t\t\t//\t\t\"mouse\" if the focus/touch was caused by a mouse down event\r\n\r\n\t\t\tvar oldStack = this.activeStack, lastOldIdx = oldStack.length - 1, lastNewIdx = newStack.length - 1;\r\n\r\n\t\t\tif(newStack[lastNewIdx] == oldStack[lastOldIdx]){\r\n\t\t\t\t// no changes, return now to avoid spurious notifications about changes to activeStack\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.set(\"activeStack\", newStack);\r\n\r\n\t\t\tvar widget, i;\r\n\r\n\t\t\t// for all elements that have gone out of focus, set focused=false\r\n\t\t\tfor(i = lastOldIdx; i >= 0 && oldStack[i] != newStack[i]; i--){\r\n\t\t\t\twidget = registry.byId(oldStack[i]);\r\n\t\t\t\tif(widget){\r\n\t\t\t\t\twidget._hasBeenBlurred = true;\t\t// TODO: used by form widgets, should be moved there\r\n\t\t\t\t\twidget.set(\"focused\", false);\r\n\t\t\t\t\tif(widget._focusManager == this){\r\n\t\t\t\t\t\twidget._onBlur(by);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.emit(\"widget-blur\", widget, by);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// for all element that have come into focus, set focused=true\r\n\t\t\tfor(i++; i <= lastNewIdx; i++){\r\n\t\t\t\twidget = registry.byId(newStack[i]);\r\n\t\t\t\tif(widget){\r\n\t\t\t\t\twidget.set(\"focused\", true);\r\n\t\t\t\t\tif(widget._focusManager == this){\r\n\t\t\t\t\t\twidget._onFocus(by);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.emit(\"widget-focus\", widget, by);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tfocus: function(node){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFocus the specified node, suppressing errors if they occur\r\n\t\t\tif(node){\r\n\t\t\t\ttry{ node.focus(); }catch(e){/*quiet*/}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\tvar singleton = new FocusManager();\r\n\r\n\t// register top window and all the iframes it contains\r\n\tdomReady(function(){\r\n\t\tvar handle = singleton.registerWin(winUtils.get(document));\r\n\t\tif(has(\"ie\")){\r\n\t\t\ton(window, \"unload\", function(){\r\n\t\t\t\tif(handle){\t// because this gets called twice when doh.robot is running\r\n\t\t\t\t\thandle.remove();\r\n\t\t\t\t\thandle = null;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n\r\n\t// Setup dijit.focus as a pointer to the singleton but also (for backwards compatibility)\r\n\t// as a function to set focus.   Remove for 2.0.\r\n\tdijit.focus = function(node){\r\n\t\tsingleton.focus(node);\t// indirection here allows dijit/_base/focus.js to override behavior\r\n\t};\r\n\tfor(var attr in singleton){\r\n\t\tif(!/^_/.test(attr)){\r\n\t\t\tdijit.focus[attr] = typeof singleton[attr] == \"function\" ? lang.hitch(singleton, attr) : singleton[attr];\r\n\t\t}\r\n\t}\r\n\tsingleton.watch(function(attr, oldVal, newVal){\r\n\t\tdijit.focus[attr] = newVal;\r\n\t});\r\n\r\n\treturn singleton;\r\n});\r\n"]}