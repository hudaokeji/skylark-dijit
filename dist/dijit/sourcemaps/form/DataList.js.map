{"version":3,"sources":["form/DataList.js"],"names":["define","declare","dom","lang","query","MemoryStore","registry","toItem","option","id","value","name","trim","innerText","textContent","constructor","params","srcNodeRef","this","domNode","byId","mixin","add","style","display","inherited","arguments","data","map","destroy","remove","fetchSelectedItem"],"mappings":";;;;;;;AAAAA,QACC,qBACA,WACA,kBACA,aACA,oBACA,eACE,SAASC,EAASC,EAAKC,EAAMC,EAAOC,EAAaC,GAKnD,SAASC,EAAmBC,GAG3B,OACCC,GAAID,EAAOE,MACXA,MAAOF,EAAOE,MACdC,KAAMR,EAAKS,KAAKJ,EAAOK,WAAaL,EAAOM,aAAe,KAI5D,OAAOb,EAAQ,sBAAuBI,GAWrCU,YAAa,SAASC,EAAQC,GAW7BC,KAAKC,QAAUjB,EAAIkB,KAAKH,GAExBd,EAAKkB,MAAMH,KAAMF,GACdE,KAAKT,IACPH,EAASgB,IAAIJ,MAEdA,KAAKC,QAAQI,MAAMC,QAAU,OAE7BN,KAAKO,UAAUC,YACdC,KAAMvB,EAAM,SAAUc,KAAKC,SAASS,IAAIrB,OAI1CsB,QAAS,WACRvB,EAASwB,OAAOZ,KAAKT,KAGtBsB,kBAAmB,WAIlB,IAAIvB,EAASJ,EAAM,qBAAsBc,KAAKC,SAAS,IAAMf,EAAM,WAAYc,KAAKC,SAAS,GAC7F,OAAOX,GAAUD,EAAOC","file":"../../form/DataList.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom\", // dom.byId\r\n\t\"dojo/_base/lang\", // lang.trim\r\n\t\"dojo/query\", // query\r\n\t\"dojo/store/Memory\",\r\n\t\"../registry\"\t// registry.add registry.remove\r\n], function(declare, dom, lang, query, MemoryStore, registry){\r\n\r\n\t// module:\r\n\t//\t\tdijit/form/DataList\r\n\r\n\tfunction toItem(/*DOMNode*/ option){\r\n\t\t// summary:\r\n\t\t//\t\tConvert `<option>` node to hash\r\n\t\treturn {\r\n\t\t\tid: option.value,\r\n\t\t\tvalue: option.value,\r\n\t\t\tname: lang.trim(option.innerText || option.textContent || '')\r\n\t\t};\r\n\t}\r\n\r\n\treturn declare(\"dijit.form.DataList\", MemoryStore, {\r\n\t\t// summary:\r\n\t\t//\t\tInefficient but small data store specialized for inlined data via OPTION tags\r\n\t\t//\r\n\t\t// description:\r\n\t\t//\t\tProvides a store for inlined data like:\r\n\t\t//\r\n\t\t//\t|\t<datalist>\r\n\t\t//\t|\t\t<option value=\"AL\">Alabama</option>\r\n\t\t//\t|\t\t...\r\n\r\n\t\tconstructor: function(params, srcNodeRef){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate the widget.\r\n\t\t\t// params: Object|null\r\n\t\t\t//\t\tHash of initialization parameters for widget, including scalar values (like title, duration etc.)\r\n\t\t\t//\t\tand functions, typically callbacks like onClick.\r\n\t\t\t//\t\tThe hash can contain any of the widget's properties, excluding read-only properties.\r\n\t\t\t// srcNodeRef: DOMNode|String\r\n\t\t\t//\t\tAttach widget to this DOM node.\r\n\r\n\t\t\t// store pointer to original DOM tree\r\n\t\t\tthis.domNode = dom.byId(srcNodeRef);\r\n\r\n\t\t\tlang.mixin(this, params);\r\n\t\t\tif(this.id){\r\n\t\t\t\tregistry.add(this); // add to registry so it can be easily found by id\r\n\t\t\t}\r\n\t\t\tthis.domNode.style.display = \"none\";\r\n\r\n\t\t\tthis.inherited(arguments, [{\r\n\t\t\t\tdata: query(\"option\", this.domNode).map(toItem)\r\n\t\t\t}]);\r\n\t\t},\r\n\r\n\t\tdestroy: function(){\r\n\t\t\tregistry.remove(this.id);\r\n\t\t},\r\n\r\n\t\tfetchSelectedItem: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGet the option marked as selected, like `<option selected>`.\r\n\t\t\t//\t\tNot part of dojo.data API.\r\n\t\t\tvar option = query(\"> option[selected]\", this.domNode)[0] || query(\"> option\", this.domNode)[0];\r\n\t\t\treturn option && toItem(option);\r\n\t\t}\r\n\t});\r\n});\r\n"]}