{"version":3,"sources":["form/DropDownButton.js"],"names":["define","declare","lang","query","registry","popup","Button","_Container","_HasDropDown","template","baseClass","templateString","_fillContent","this","srcNodeRef","nodes","inherited","arguments","dropDownContainer","startup","_started","dropDown","dropDownNode","byNode","hide","isLoaded","href","loadDropDown","callback","handler","on","hitch","remove","refresh","isFocusable","_mouseDown"],"mappings":";;;;;;;AAAAA,QACC,qBACA,kBACA,aACA,cACA,WACA,WACA,gBACA,kBACA,4CACA,gBACE,SAASC,EAASC,EAAMC,EAAOC,EAAUC,EAAOC,EAAQC,EAAYC,EAAcC,GAKpF,OAAOR,EAAQ,6BAA8BK,EAAQC,EAAYC,IAehEE,UAAW,sBAEXC,eAAgBF,EAEhBG,aAAc,WAOb,GAAGC,KAAKC,WAAW,CAGlB,IAAIC,EAAQZ,EAAM,IAAKU,KAAKC,YAC5BD,KAAKG,UAAUC,WAAYF,EAAM,KAGjCF,KAAKK,kBAAoBL,KAAKC,aAIhCK,QAAS,WACR,IAAGN,KAAKO,SAAR,CAMA,IAAIP,KAAKQ,UAAYR,KAAKK,kBAAkB,CAC3C,IAAII,EAAenB,EAAM,aAAcU,KAAKK,mBAAmB,GAC5DI,IACFT,KAAKQ,SAAWjB,EAASmB,OAAOD,WAE1BT,KAAKK,kBAEVL,KAAKQ,UACPhB,EAAMmB,KAAKX,KAAKQ,UAGjBR,KAAKG,UAAUC,aAGhBQ,SAAU,WAGT,IAAIJ,EAAWR,KAAKQ,SACpB,QAAUA,KAAcA,EAASK,MAAQL,EAASI,WAGnDE,aAAc,SAAsBC,GAInC,IAAIP,EAAWR,KAAKQ,SAChBQ,EAAUR,EAASS,GAAG,OAAQ5B,EAAK6B,MAAMlB,KAAM,WAClDgB,EAAQG,SACRJ,OAEDP,EAASY,WAGVC,YAAa,WAGZ,OAAOrB,KAAKG,UAAUC,aAAeJ,KAAKsB","file":"../../form/DropDownButton.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/_base/lang\", // hitch\r\n\t\"dojo/query\", // query\r\n\t\"../registry\", // registry.byNode\r\n\t\"../popup\", // dijit.popup2.hide\r\n\t\"./Button\",\r\n\t\"../_Container\",\r\n\t\"../_HasDropDown\",\r\n\t\"dojo/text!./templates/DropDownButton.html\",\r\n\t\"../a11yclick\"\t// template uses ondijitclick\r\n], function(declare, lang, query, registry, popup, Button, _Container, _HasDropDown, template){\r\n\r\n\t// module:\r\n\t//\t\tdijit/form/DropDownButton\r\n\r\n\treturn declare(\"dijit.form.DropDownButton\", [Button, _Container, _HasDropDown], {\r\n\t\t// summary:\r\n\t\t//\t\tA button with a drop down\r\n\t\t//\r\n\t\t// example:\r\n\t\t// |\t<button data-dojo-type=\"dijit/form/DropDownButton\">\r\n\t\t// |\t\tHello world\r\n\t\t// |\t\t<div data-dojo-type=\"dijit/Menu\">...</div>\r\n\t\t// |\t</button>\r\n\t\t//\r\n\t\t// example:\r\n\t\t// |\tvar button1 = new DropDownButton({ label: \"hi\", dropDown: new dijit.Menu(...) });\r\n\t\t// |\twin.body().appendChild(button1);\r\n\t\t//\r\n\r\n\t\tbaseClass: \"dijitDropDownButton\",\r\n\r\n\t\ttemplateString: template,\r\n\r\n\t\t_fillContent: function(){\r\n\t\t\t// Overrides Button._fillContent().\r\n\t\t\t//\r\n\t\t\t// My inner HTML contains both the button contents and a drop down widget, like\r\n\t\t\t// <DropDownButton>  <span>push me</span>  <Menu> ... </Menu> </DropDownButton>\r\n\t\t\t// The first node is assumed to be the button content. The widget is the popup.\r\n\r\n\t\t\tif(this.srcNodeRef){ // programatically created buttons might not define srcNodeRef\r\n\t\t\t\t//FIXME: figure out how to filter out the widget and use all remaining nodes as button\r\n\t\t\t\t//\tcontent, not just nodes[0]\r\n\t\t\t\tvar nodes = query(\"*\", this.srcNodeRef);\r\n\t\t\t\tthis.inherited(arguments, [nodes[0]]);\r\n\r\n\t\t\t\t// save pointer to srcNode so we can grab the drop down widget after it's instantiated\r\n\t\t\t\tthis.dropDownContainer = this.srcNodeRef;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tstartup: function(){\r\n\t\t\tif(this._started){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// the child widget from srcNodeRef is the dropdown widget.  Insert it in the page DOM,\r\n\t\t\t// make it invisible, and store a reference to pass to the popup code.\r\n\t\t\tif(!this.dropDown && this.dropDownContainer){\r\n\t\t\t\tvar dropDownNode = query(\"[widgetId]\", this.dropDownContainer)[0];\r\n\t\t\t\tif(dropDownNode){\r\n\t\t\t\t\tthis.dropDown = registry.byNode(dropDownNode);\r\n\t\t\t\t}\r\n\t\t\t\tdelete this.dropDownContainer;\r\n\t\t\t}\r\n\t\t\tif(this.dropDown){\r\n\t\t\t\tpopup.hide(this.dropDown);\r\n\t\t\t}\r\n\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tisLoaded: function(){\r\n\t\t\t// Returns whether or not we are loaded - if our dropdown has an href,\r\n\t\t\t// then we want to check that.\r\n\t\t\tvar dropDown = this.dropDown;\r\n\t\t\treturn (!!dropDown && (!dropDown.href || dropDown.isLoaded));\r\n\t\t},\r\n\r\n\t\tloadDropDown: function(/*Function*/ callback){\r\n\t\t\t// Default implementation assumes that drop down already exists,\r\n\t\t\t// but hasn't loaded it's data (ex: ContentPane w/href).\r\n\t\t\t// App must override if the drop down is lazy-created.\r\n\t\t\tvar dropDown = this.dropDown;\r\n\t\t\tvar handler = dropDown.on(\"load\", lang.hitch(this, function(){\r\n\t\t\t\thandler.remove();\r\n\t\t\t\tcallback();\r\n\t\t\t}));\r\n\t\t\tdropDown.refresh();\t\t// tell it to load\r\n\t\t},\r\n\r\n\t\tisFocusable: function(){\r\n\t\t\t// Overridden so that focus is handled by the _HasDropDown mixin, not by\r\n\t\t\t// the _FormWidget mixin.\r\n\t\t\treturn this.inherited(arguments) && !this._mouseDown;\r\n\t\t}\r\n\t});\r\n});\r\n"]}