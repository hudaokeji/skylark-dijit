{"version":3,"sources":["form/MappedTextBox.js"],"names":["define","declare","has","domConstruct","ValidationTextBox","postMixInProperties","this","inherited","arguments","nameAttrSetting","_setNameAttr","serialize","val","toString","filter","get","constraints","validate","valueNode","value","buildRendering","place","name","replace","textbox","reset"],"mappings":";;;;;;;AAAAA,QACC,qBACA,aACA,qBACA,uBACE,SAASC,EAASC,EAAKC,EAAcC,GAKvC,OAAOH,EAAQ,2BAA4BG,GAc1CC,oBAAqB,WACpBC,KAAKC,UAAUC,WAIfF,KAAKG,gBAAkB,IAIxBC,aAAc,YAEdC,UAAW,SAASC,GASnB,OAAOA,EAAIC,SAAWD,EAAIC,WAAa,IAGxCA,SAAU,WAKT,IAAID,EAAMN,KAAKQ,OAAOR,KAAKS,IAAI,UAC/B,OAAc,MAAPH,EAA6B,iBAAPA,EAAkBA,EAAMN,KAAKK,UAAUC,EAAKN,KAAKU,aAAgB,IAG/FC,SAAU,WAGT,OADAX,KAAKY,UAAUC,MAAQb,KAAKO,WACrBP,KAAKC,UAAUC,YAGvBY,eAAgB,WAGfd,KAAKC,UAAUC,WAOfF,KAAKY,UAAYf,EAAakB,MAAM,wBACjCf,KAAKgB,OAASpB,EAAI,SAAY,UAAYI,KAAKgB,KAAKC,QAAQ,KAAM,UAAY,IAAM,IAAM,KAC5FjB,KAAKkB,QAAS,UAGhBC,MAAO,WAGNnB,KAAKY,UAAUC,MAAQ,GACvBb,KAAKC,UAAUC","file":"../../form/MappedTextBox.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/sniff\", // has(\"msapp\")\r\n\t\"dojo/dom-construct\", // domConstruct.place\r\n\t\"./ValidationTextBox\"\r\n], function(declare, has, domConstruct, ValidationTextBox){\r\n\r\n\t// module:\r\n\t//\t\tdijit/form/MappedTextBox\r\n\r\n\treturn declare(\"dijit.form.MappedTextBox\", ValidationTextBox, {\r\n\t\t// summary:\r\n\t\t//\t\tA dijit/form/ValidationTextBox subclass which provides a base class for widgets that have\r\n\t\t//\t\ta visible formatted display value, and a serializable\r\n\t\t//\t\tvalue in a hidden input field which is actually sent to the server.\r\n\t\t// description:\r\n\t\t//\t\tThe visible display may\r\n\t\t//\t\tbe locale-dependent and interactive.  The value sent to the server is stored in a hidden\r\n\t\t//\t\tinput field which uses the `name` attribute declared by the original widget.  That value sent\r\n\t\t//\t\tto the server is defined by the dijit/form/MappedTextBox.serialize() method and is typically\r\n\t\t//\t\tlocale-neutral.\r\n\t\t// tags:\r\n\t\t//\t\tprotected\r\n\r\n\t\tpostMixInProperties: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\t// We want the name attribute to go to the hidden <input>, not the displayed <input>,\r\n\t\t\t// so override _FormWidget.postMixInProperties() setting of nameAttrSetting for IE.\r\n\t\t\tthis.nameAttrSetting = \"\";\r\n\t\t},\r\n\r\n\t\t// Remap name attribute to be mapped to hidden node created in buildRendering(), rather than this.focusNode\r\n\t\t_setNameAttr: \"valueNode\",\r\n\r\n\t\tserialize: function(val /*=====, options =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverridable function used to convert the get('value') result to a canonical\r\n\t\t\t//\t\t(non-localized) string.  For example, will print dates in ISO format, and\r\n\t\t\t//\t\tnumbers the same way as they are represented in javascript.\r\n\t\t\t// val: anything\r\n\t\t\t// options: Object?\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected extension\r\n\t\t\treturn val.toString ? val.toString() : \"\"; // String\r\n\t\t},\r\n\r\n\t\ttoString: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns widget as a printable string using the widget's value\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t\tvar val = this.filter(this.get('value')); // call filter in case value is nonstring and filter has been customized\r\n\t\t\treturn val != null ? (typeof val == \"string\" ? val : this.serialize(val, this.constraints)) : \"\"; // String\r\n\t\t},\r\n\r\n\t\tvalidate: function(){\r\n\t\t\t// Overrides `dijit/form/TextBox.validate`\r\n\t\t\tthis.valueNode.value = this.toString();\r\n\t\t\treturn this.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tbuildRendering: function(){\r\n\t\t\t// Overrides `dijit/_TemplatedMixin/buildRendering`\r\n\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\t// Create a hidden <input> node with the serialized value used for submit\r\n\t\t\t// (as opposed to the displayed value).\r\n\t\t\t// Passing in name as markup rather than relying on _setNameAttr custom setter above\r\n\t\t\t// to make query(input[name=...]) work on IE. (see #8660).\r\n\t\t\t// But not doing that for Windows 8 Store apps because it causes a security exception (see #16452).\r\n\t\t\tthis.valueNode = domConstruct.place(\"<input type='hidden'\" +\r\n\t\t\t\t((this.name && !has(\"msapp\")) ? ' name=\"' + this.name.replace(/\"/g, \"&quot;\") + '\"' : \"\") + \"/>\",\r\n\t\t\t\tthis.textbox, \"after\");\r\n\t\t},\r\n\r\n\t\treset: function(){\r\n\t\t\t// Overrides `dijit/form/ValidationTextBox.reset` to\r\n\t\t\t// reset the hidden textbox value to ''\r\n\t\t\tthis.valueNode.value = '';\r\n\t\t\tthis.inherited(arguments);\r\n\t\t}\r\n\t});\r\n});\r\n"]}