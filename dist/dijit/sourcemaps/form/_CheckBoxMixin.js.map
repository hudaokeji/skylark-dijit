{"version":3,"sources":["form/_CheckBoxMixin.js"],"names":["define","declare","domAttr","type","value","readOnly","_aria_attr","_setReadOnlyAttr","this","_set","set","focusNode","_setLabelAttr","undefined","_getSubmitValue","_setValueAttr","newValue","reset","inherited","arguments","params","_onClick","e","stopPropagation","preventDefault"],"mappings":";;;;;;;AAAAA,QACC,qBACA,iBACE,SAASC,EAASC,GAKpB,OAAOD,EAAQ,4BAA6B,MAc3CE,KAAM,WAKNC,MAAO,KAMPC,UAAU,EAGVC,WAAY,eAEZC,iBAAkB,SAAqBH,GACtCI,KAAKC,KAAK,WAAYL,GACtBF,EAAQQ,IAAIF,KAAKG,UAAW,WAAYP,IAKzCQ,mBAAeC,EAEfC,gBAAiB,SAAoBV,GACpC,OAAiB,MAATA,GAA2B,KAAVA,EAAgB,KAAOA,GAGjDW,cAAe,SAASC,GACvBA,EAAWR,KAAKM,gBAAgBE,GAChCR,KAAKC,KAAK,QAASO,GACnBd,EAAQQ,IAAIF,KAAKG,UAAW,QAASK,IAGtCC,MAAO,WACNT,KAAKU,UAAUC,WAEfX,KAAKC,KAAK,QAASD,KAAKM,gBAAgBN,KAAKY,OAAOhB,QACpDF,EAAQQ,IAAIF,KAAKG,UAAW,QAASH,KAAKJ,QAG3CiB,SAAU,SAAmBC,GAI5B,OAAGd,KAAKH,UACPiB,EAAEC,kBACFD,EAAEE,kBACK,GAEDhB,KAAKU,UAAUC","file":"../../form/_CheckBoxMixin.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom-attr\" // domAttr.set\r\n], function(declare, domAttr){\r\n\r\n\t// module:\r\n\t//\t\tdijit/form/_CheckBoxMixin\r\n\r\n\treturn declare(\"dijit.form._CheckBoxMixin\", null, {\r\n\t\t// summary:\r\n\t\t//\t\tMixin to provide widget functionality corresponding to an HTML checkbox\r\n\t\t//\r\n\t\t// description:\r\n\t\t//\t\tUser interacts with real html inputs.\r\n\t\t//\t\tOn onclick (which occurs by mouse click, space-bar, or\r\n\t\t//\t\tusing the arrow keys to switch the selected radio button),\r\n\t\t//\t\twe update the state of the checkbox/radio.\r\n\t\t//\r\n\r\n\t\t// type: [private] String\r\n\t\t//\t\ttype attribute on `<input>` node.\r\n\t\t//\t\tOverrides `dijit/form/Button.type`.  Users should not change this value.\r\n\t\ttype: \"checkbox\",\r\n\r\n\t\t// value: String\r\n\t\t//\t\tAs an initialization parameter, equivalent to value field on normal checkbox\r\n\t\t//\t\t(if checked, the value is passed as the value when form is submitted).\r\n\t\tvalue: \"on\",\r\n\r\n\t\t// readOnly: Boolean\r\n\t\t//\t\tShould this widget respond to user input?\r\n\t\t//\t\tIn markup, this is specified as \"readOnly\".\r\n\t\t//\t\tSimilar to disabled except readOnly form values are submitted.\r\n\t\treadOnly: false,\r\n\r\n\t\t// aria-pressed for toggle buttons, and aria-checked for checkboxes\r\n\t\t_aria_attr: \"aria-checked\",\r\n\r\n\t\t_setReadOnlyAttr: function(/*Boolean*/ value){\r\n\t\t\tthis._set(\"readOnly\", value);\r\n\t\t\tdomAttr.set(this.focusNode, 'readOnly', value);\r\n\t\t},\r\n\r\n\t\t// Override dijit/form/Button._setLabelAttr() since we don't even have a containerNode.\r\n\t\t// Normally users won't try to set label, except when CheckBox or RadioButton is the child of a dojox/layout/TabContainer\r\n\t\t_setLabelAttr: undefined,\r\n\r\n\t\t_getSubmitValue: function(/*String*/ value){\r\n\t\t\treturn (value == null || value === \"\") ? \"on\" : value;\r\n\t\t},\r\n\r\n\t\t_setValueAttr: function(newValue){\r\n\t\t\tnewValue = this._getSubmitValue(newValue);\t// \"on\" to match browser native behavior when value unspecified\r\n\t\t\tthis._set(\"value\", newValue);\r\n\t\t\tdomAttr.set(this.focusNode, \"value\", newValue);\r\n\t\t},\r\n\r\n\t\treset: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\t// Handle unlikely event that the <input type=checkbox> value attribute has changed\r\n\t\t\tthis._set(\"value\", this._getSubmitValue(this.params.value));\r\n\t\t\tdomAttr.set(this.focusNode, 'value', this.value);\r\n\t\t},\r\n\r\n\t\t_onClick: function(/*Event*/ e){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInternal function to handle click actions - need to check\r\n\t\t\t//\t\treadOnly, since button no longer does that check.\r\n\t\t\tif(this.readOnly){\r\n\t\t\t\te.stopPropagation();\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn this.inherited(arguments);\r\n\t\t}\r\n\t});\r\n});\r\n"]}