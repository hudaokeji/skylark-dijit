{"version":3,"sources":["form/CheckBox.js"],"names":["define","require","declare","domAttr","has","query","ready","ToggleButton","_CheckBoxMixin","template","templateString","baseClass","_setValueAttr","newValue","priorityChange","this","inherited","arguments","_created","set","_getValueAttr","checked","_get","_setIconClassAttr","_setNameAttr","postMixInProperties","checkedAttrSetting","_fillContent","_onFocus","id","addClass","_onBlur","removeClass"],"mappings":";;;;;;;AAAAA,QACC,UACA,qBACA,gBACA,WACA,aACA,aACA,iBACA,mBACA,sCACA,oBACA,gBACE,SAASC,QAASC,EAASC,EAASC,EAAKC,EAAOC,EAAOC,EAAcC,EAAgBC,GAavF,OAPGL,EAAI,0BACNE,EAAM,EAAG,WAERL,SADgB,6BAKXC,EAAQ,uBAAwBK,EAAcC,IAmBpDE,eAAgBD,EAEhBE,UAAW,gBAEXC,cAAe,SAA4BC,EAAsBC,GAkB1C,iBAAZD,IACTE,KAAKC,UAAUC,WACfJ,GAAW,GAETE,KAAKG,UACPH,KAAKI,IAAI,UAAWN,EAAUC,IAGhCM,cAAe,WAMd,OAAOL,KAAKM,SAAWN,KAAKO,KAAK,UAIlCC,kBAAmB,KACnBC,aAAc,YAEdC,oBAAqB,WACpBV,KAAKC,UAAUC,WAMfF,KAAKW,mBAAqB,IAG1BC,aAAc,aAKfC,SAAU,WACNb,KAAKc,IACPxB,EAAM,cAAcU,KAAKc,GAAG,MAAMC,SAAS,qBAE5Cf,KAAKC,UAAUC,YAGhBc,QAAS,WACLhB,KAAKc,IACPxB,EAAM,cAAcU,KAAKc,GAAG,MAAMG,YAAY,qBAE/CjB,KAAKC,UAAUC","file":"../../form/CheckBox.js","sourcesContent":["define([\r\n\t\"require\",\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom-attr\", // domAttr.set\r\n\t\"dojo/has\",\t\t// has(\"dijit-legacy-requires\")\r\n\t\"dojo/query\", // query\r\n\t\"dojo/ready\",\r\n\t\"./ToggleButton\",\r\n\t\"./_CheckBoxMixin\",\r\n\t\"dojo/text!./templates/CheckBox.html\",\r\n\t\"dojo/NodeList-dom\", // NodeList.addClass/removeClass\r\n\t\"../a11yclick\"\t// template uses ondijitclick\r\n], function(require, declare, domAttr, has, query, ready, ToggleButton, _CheckBoxMixin, template){\r\n\r\n\t// module:\r\n\t//\t\tdijit/form/CheckBox\r\n\r\n\t// Back compat w/1.6, remove for 2.0\r\n\tif(has(\"dijit-legacy-requires\")){\r\n\t\tready(0, function(){\r\n\t\t\tvar requires = [\"dijit/form/RadioButton\"];\r\n\t\t\trequire(requires);\t// use indirection so modules not rolled into a build\r\n\t\t});\r\n\t}\r\n\r\n\treturn declare(\"dijit.form.CheckBox\", [ToggleButton, _CheckBoxMixin], {\r\n\t\t// summary:\r\n\t\t//\t\tSame as an HTML checkbox, but with fancy styling.\r\n\t\t//\r\n\t\t// description:\r\n\t\t//\t\tUser interacts with real html inputs.\r\n\t\t//\t\tOn onclick (which occurs by mouse click, space-bar, or\r\n\t\t//\t\tusing the arrow keys to switch the selected radio button),\r\n\t\t//\t\twe update the state of the checkbox/radio.\r\n\t\t//\r\n\t\t//\t\tThere are two modes:\r\n\t\t//\r\n\t\t//\t\t1. High contrast mode\r\n\t\t//\t\t2. Normal mode\r\n\t\t//\r\n\t\t//\t\tIn case 1, the regular html inputs are shown and used by the user.\r\n\t\t//\t\tIn case 2, the regular html inputs are invisible but still used by\r\n\t\t//\t\tthe user. They are turned quasi-invisible and overlay the background-image.\r\n\r\n\t\ttemplateString: template,\r\n\r\n\t\tbaseClass: \"dijitCheckBox\",\r\n\r\n\t\t_setValueAttr: function(/*String|Boolean*/ newValue, /*Boolean*/ priorityChange){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHandler for value= attribute to constructor, and also calls to\r\n\t\t\t//\t\tset('value', val).\r\n\t\t\t// description:\r\n\t\t\t//\t\tDuring initialization, just saves as attribute to the `<input type=checkbox>`.\r\n\t\t\t//\r\n\t\t\t//\t\tAfter initialization,\r\n\t\t\t//\t\twhen passed a boolean, controls whether or not the CheckBox is checked.\r\n\t\t\t//\t\tIf passed a string, changes the value attribute of the CheckBox (the one\r\n\t\t\t//\t\tspecified as \"value\" when the CheckBox was constructed\r\n\t\t\t//\t\t(ex: `<input data-dojo-type=\"dijit/CheckBox\" value=\"chicken\">`).\r\n\t\t\t//\r\n\t\t\t//\t\t`widget.set('value', string)` will check the checkbox and change the value to the\r\n\t\t\t//\t\tspecified string.\r\n\t\t\t//\r\n\t\t\t//\t\t`widget.set('value', boolean)` will change the checked state.\r\n\r\n\t\t\tif(typeof newValue == \"string\"){\r\n\t\t\t\tthis.inherited(arguments);\r\n\t\t\t\tnewValue = true;\r\n\t\t\t}\r\n\t\t\tif(this._created){\r\n\t\t\t\tthis.set('checked', newValue, priorityChange);\r\n\t\t\t}\r\n\t\t},\r\n\t\t_getValueAttr: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHook so get('value') works.\r\n\t\t\t// description:\r\n\t\t\t//\t\tIf the CheckBox is checked, returns the value attribute.\r\n\t\t\t//\t\tOtherwise returns false.\r\n\t\t\treturn this.checked && this._get(\"value\");\r\n\t\t},\r\n\r\n\t\t// Override behavior from Button, since we don't have an iconNode or valueNode\r\n\t\t_setIconClassAttr: null,\r\n\t\t_setNameAttr: \"focusNode\",\r\n\r\n\t\tpostMixInProperties: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\t// Need to set initial checked state via node.setAttribute so that form submit works\r\n\t\t\t// and IE8 radio button tab order is preserved.\r\n\t\t\t// domAttr.set(node, \"checked\", bool) doesn't work on IE until node has been attached\r\n\t\t\t// to <body>, see #8666\r\n\t\t\tthis.checkedAttrSetting = \"\";\r\n\t\t},\r\n\r\n\t\t _fillContent: function(){\r\n\t\t\t// Override Button::_fillContent() since it doesn't make sense for CheckBox,\r\n\t\t\t// since CheckBox doesn't even have a container\r\n\t\t},\r\n\r\n\t\t_onFocus: function(){\r\n\t\t\tif(this.id){\r\n\t\t\t\tquery(\"label[for='\"+this.id+\"']\").addClass(\"dijitFocusedLabel\");\r\n\t\t\t}\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\t_onBlur: function(){\r\n\t\t\tif(this.id){\r\n\t\t\t\tquery(\"label[for='\"+this.id+\"']\").removeClass(\"dijitFocusedLabel\");\r\n\t\t\t}\r\n\t\t\tthis.inherited(arguments);\r\n\t\t}\r\n\t});\r\n});\r\n"]}