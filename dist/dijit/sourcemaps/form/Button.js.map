{"version":3,"sources":["form/Button.js"],"names":["define","require","declare","domClass","has","kernel","lang","ready","_FormWidget","_ButtonMixin","template","Button","showLabel","iconClass","_setIconClassAttr","node","type","baseClass","templateString","_setValueAttr","_setNameAttr","name","this","valueNode","setAttribute","_fillContent","source","params","sourceLabel","trim","innerHTML","label","_setShowLabelAttr","val","containerNode","toggle","_set","setLabel","content","deprecated","set","_setLabelAttr","inherited","arguments","titleNode","title","innerText","textContent","applyTextDir","_setTextDirAttr","textDir","_created"],"mappings":";;;;;;;AAAAA,QACC,UACA,qBACA,iBACA,WACA,oBACA,kBACA,aACA,gBACA,iBACA,oCACA,gBACE,SAASC,QAASC,EAASC,EAAUC,EAAKC,EAAQC,EAAMC,EAAOC,EAAaC,EAAcC,GAMzFN,EAAI,0BACNG,EAAM,EAAG,WAERN,SADgB,4BAA6B,yBAA0B,8BAKzE,IAAIU,EAAST,EAAQ,qBAAuBE,EAAI,aAAe,UAAY,KAAMI,EAAaC,IAsB7FG,WAAW,EAIXC,UAAW,cACXC,mBAAqBC,KAAM,WAAYC,KAAM,SAE7CC,UAAW,cAEXC,eAAgBR,EAGhBS,cAAe,YACfC,aAAc,SAASC,GAEnBC,KAAKC,WACPD,KAAKC,UAAUC,aAAa,OAAQH,IAItCI,aAAc,SAAqBC,GAKlC,GAAGA,KAAYJ,KAAKK,UAAY,UAAWL,KAAKK,SAAS,CACxD,IAAIC,EAActB,EAAKuB,KAAKH,EAAOI,WAChCF,IACFN,KAAKS,MAAQH,KAKhBI,kBAAmB,SAASC,GACxBX,KAAKY,eACP/B,EAASgC,OAAOb,KAAKY,cAAe,oBAAqBD,GAE1DX,KAAKc,KAAK,YAAaH,IAGxBI,SAAU,SAAoBC,GAG7BjC,EAAOkC,WAAW,8EAA+E,GAAI,OACrGjB,KAAKkB,IAAI,QAASF,IAGnBG,cAAe,SAAoBH,GAOlChB,KAAKoB,UAAUC,WACXrB,KAAKV,WAAe,UAAWU,KAAKK,SACvCL,KAAKsB,UAAUC,MAAQvC,EAAKuB,KAAKP,KAAKY,cAAcY,WAAaxB,KAAKY,cAAca,aAAe,QAuBtG,OAlBG3C,EAAI,eACNO,EAAST,EAAQ,oBAAqBS,GACrC8B,cAAe,SAAoBH,GAClChB,KAAKoB,UAAUC,WACZrB,KAAKsB,UAAUC,OACjBvB,KAAK0B,aAAa1B,KAAKsB,UAAWtB,KAAKsB,UAAUC,QAInDI,gBAAiB,SAAoBC,GACjC5B,KAAK6B,UAAY7B,KAAK4B,SAAWA,IACnC5B,KAAKc,KAAK,UAAWc,GACrB5B,KAAKmB,cAAcnB,KAAKS,YAMrBpB","file":"../../form/Button.js","sourcesContent":["define([\r\n\t\"require\",\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom-class\", // domClass.toggle\r\n\t\"dojo/has\", // has(\"dijit-legacy-requires\")\r\n\t\"dojo/_base/kernel\", // kernel.deprecated\r\n\t\"dojo/_base/lang\", // lang.trim\r\n\t\"dojo/ready\",\r\n\t\"./_FormWidget\",\r\n\t\"./_ButtonMixin\",\r\n\t\"dojo/text!./templates/Button.html\",\r\n\t\"../a11yclick\"\t// template uses ondijitclick\r\n], function(require, declare, domClass, has, kernel, lang, ready, _FormWidget, _ButtonMixin, template){\r\n\r\n\t// module:\r\n\t//\t\tdijit/form/Button\r\n\r\n\t// Back compat w/1.6, remove for 2.0\r\n\tif(has(\"dijit-legacy-requires\")){\r\n\t\tready(0, function(){\r\n\t\t\tvar requires = [\"dijit/form/DropDownButton\", \"dijit/form/ComboButton\", \"dijit/form/ToggleButton\"];\r\n\t\t\trequire(requires);\t// use indirection so modules not rolled into a build\r\n\t\t});\r\n\t}\r\n\r\n\tvar Button = declare(\"dijit.form.Button\" + (has(\"dojo-bidi\") ? \"_NoBidi\" : \"\"), [_FormWidget, _ButtonMixin], {\r\n\t\t// summary:\r\n\t\t//\t\tBasically the same thing as a normal HTML button, but with special styling.\r\n\t\t// description:\r\n\t\t//\t\tButtons can display a label, an icon, or both.\r\n\t\t//\t\tA label should always be specified (through innerHTML) or the label\r\n\t\t//\t\tattribute.  It can be hidden via showLabel=false.\r\n\t\t// example:\r\n\t\t// |\t<button data-dojo-type=\"dijit/form/Button\" onClick=\"...\">Hello world</button>\r\n\t\t//\r\n\t\t// example:\r\n\t\t// |\tvar button1 = new Button({label: \"hello world\", onClick: foo});\r\n\t\t// |\tdojo.body().appendChild(button1.domNode);\r\n\r\n\t\t// showLabel: Boolean\r\n\t\t//\t\tSet this to true to hide the label text and display only the icon.\r\n\t\t//\t\t(If showLabel=false then iconClass must be specified.)\r\n\t\t//\t\tEspecially useful for toolbars.\r\n\t\t//\t\tIf showLabel=true, the label will become the title (a.k.a. tooltip/hint) of the icon.\r\n\t\t//\r\n\t\t//\t\tThe exception case is for computers in high-contrast mode, where the label\r\n\t\t//\t\twill still be displayed, since the icon doesn't appear.\r\n\t\tshowLabel: true,\r\n\r\n\t\t// iconClass: String\r\n\t\t//\t\tClass to apply to DOMNode in button to make it display an icon\r\n\t\ticonClass: \"dijitNoIcon\",\r\n\t\t_setIconClassAttr: { node: \"iconNode\", type: \"class\" },\r\n\r\n\t\tbaseClass: \"dijitButton\",\r\n\r\n\t\ttemplateString: template,\r\n\r\n\t\t// Map widget attributes to DOMNode attributes.\r\n\t\t_setValueAttr: \"valueNode\",\r\n\t\t_setNameAttr: function(name){\r\n\t\t\t// avoid breaking existing subclasses where valueNode undefined.  Perhaps in 2.0 require it to be defined?\r\n\t\t\tif(this.valueNode){\r\n\t\t\t\tthis.valueNode.setAttribute(\"name\", name);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_fillContent: function(/*DomNode*/ source){\r\n\t\t\t// Overrides _Templated._fillContent().\r\n\t\t\t// If button label is specified as srcNodeRef.innerHTML rather than\r\n\t\t\t// this.params.label, handle it here.\r\n\t\t\t// TODO: remove the method in 2.0, parser will do it all for me\r\n\t\t\tif(source && (!this.params || !(\"label\" in this.params))){\r\n\t\t\t\tvar sourceLabel = lang.trim(source.innerHTML);\r\n\t\t\t\tif(sourceLabel){\r\n\t\t\t\t\tthis.label = sourceLabel; // _applyAttributes will be called after buildRendering completes to update the DOM\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_setShowLabelAttr: function(val){\r\n\t\t\tif(this.containerNode){\r\n\t\t\t\tdomClass.toggle(this.containerNode, \"dijitDisplayNone\", !val);\r\n\t\t\t}\r\n\t\t\tthis._set(\"showLabel\", val);\r\n\t\t},\r\n\r\n\t\tsetLabel: function(/*String*/ content){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDeprecated.  Use set('label', ...) instead.\r\n\t\t\tkernel.deprecated(\"dijit.form.Button.setLabel() is deprecated.  Use set('label', ...) instead.\", \"\", \"2.0\");\r\n\t\t\tthis.set(\"label\", content);\r\n\t\t},\r\n\r\n\t\t_setLabelAttr: function(/*String*/ content){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHook for set('label', ...) to work.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSet the label (text) of the button; takes an HTML string.\r\n\t\t\t//\t\tIf the label is hidden (showLabel=false) then and no title has\r\n\t\t\t//\t\tbeen specified, then label is also set as title attribute of icon.\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tif(!this.showLabel && !(\"title\" in this.params)){\r\n\t\t\t\tthis.titleNode.title = lang.trim(this.containerNode.innerText || this.containerNode.textContent || '');\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\tif(has(\"dojo-bidi\")){\r\n\t\tButton = declare(\"dijit.form.Button\", Button, {\r\n\t\t\t_setLabelAttr: function(/*String*/ content){\r\n\t\t\t\tthis.inherited(arguments);\r\n\t\t\t\tif(this.titleNode.title){\r\n\t\t\t\t\tthis.applyTextDir(this.titleNode, this.titleNode.title);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t_setTextDirAttr: function(/*String*/ textDir){\r\n\t\t\t\tif(this._created && this.textDir != textDir){\r\n\t\t\t\t\tthis._set(\"textDir\", textDir);\r\n\t\t\t\t\tthis._setLabelAttr(this.label); // call applyTextDir on both focusNode and titleNode\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\treturn Button;\r\n});\r\n"]}