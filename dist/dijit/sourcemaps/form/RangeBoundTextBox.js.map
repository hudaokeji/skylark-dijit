{"version":3,"sources":["form/RangeBoundTextBox.js"],"names":["define","declare","i18n","MappedTextBox","rangeMessage","rangeCheck","primitive","constraints","this","compare","min","max","isInRange","get","_isDefinitelyOutOfRange","val","outOfRange","_isValidSubset","inherited","arguments","isValid","isFocused","_isEmpty","textbox","value","required","getErrorMessage","v","isNaN","postMixInProperties","messages","getLocalization","lang"],"mappings":";;;;;;;AAAAA,QACC,qBACA,YACA,kBACA,4BACE,SAASC,EAASC,EAAMC,GA6F1B,OAvFwBF,EAAQ,+BAAgCE,GAM/DC,aAAc,GAOdC,WAAY,SAAoBC,EAA0DC,GAKzF,QAAQ,QAASA,KAAcC,KAAKC,QAAQH,EAAUC,EAAYG,MAAQ,IACxE,QAASH,KAAcC,KAAKC,QAAQH,EAAUC,EAAYI,MAAQ,KAGrEC,UAAW,WAKV,OAAOJ,KAAKH,WAAWG,KAAKK,IAAI,SAAUL,KAAKD,cAGhDO,wBAAyB,WAIxB,IAAIC,EAAMP,KAAKK,IAAI,SACnB,GAAU,MAAPE,EAAc,OAAO,EACxB,IAAIC,GAAa,EACjB,GAAG,QAASR,KAAKD,YAAY,CAC5B,IAAIG,EAAMF,KAAKD,YAAYG,IAC3BM,EAAaR,KAAKC,QAAQM,EAAqB,iBAAPL,GAAoBA,GAAO,GAAY,GAAPK,EAAY,EAAIL,GAAO,EAEhG,IAAIM,GAAe,QAASR,KAAKD,YAAa,CAC7C,IAAII,EAAMH,KAAKD,YAAYI,IAC3BK,EAAaR,KAAKC,QAAQM,EAAqB,iBAAPJ,GAAoBA,EAAM,EAAKA,EAAM,GAAK,EAEnF,OAAOK,GAGRC,eAAgB,WAKf,OAAOT,KAAKU,UAAUC,aAAeX,KAAKM,2BAG3CM,QAAS,SAAqBC,GAE7B,OAAOb,KAAKU,UAAUC,aACnBX,KAAKc,SAASd,KAAKe,QAAQC,SAAWhB,KAAKiB,UAAajB,KAAKI,UAAUS,KAG3EK,gBAAiB,SAAqBL,GAErC,IAAIM,EAAInB,KAAKK,IAAI,SACjB,OAAQ,MAALc,GAAwC,KAANA,GAAyB,iBAALA,GAAkBC,MAAMD,IAAQnB,KAAKI,UAAUS,GAGjGb,KAAKU,UAAUC,WAFdX,KAAKJ,cAKdyB,oBAAqB,WACpBrB,KAAKU,UAAUC,WACXX,KAAKJ,eACRI,KAAKsB,SAAW5B,EAAK6B,gBAAgB,aAAc,WAAYvB,KAAKwB,MACpExB,KAAKJ,aAAeI,KAAKsB,SAAS1B","file":"../../form/RangeBoundTextBox.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/i18n\", // i18n.getLocalization\r\n\t\"./MappedTextBox\",\r\n\t\"dojo/i18n!./nls/validate\"\r\n], function(declare, i18n, MappedTextBox){\r\n\r\n\t// module:\r\n\t//\t\tdijit/form/RangeBoundTextBox\r\n\r\n\r\n\tvar RangeBoundTextBox = declare(\"dijit.form.RangeBoundTextBox\", MappedTextBox, {\r\n\t\t// summary:\r\n\t\t//\t\tBase class for textbox form widgets which defines a range of valid values.\r\n\r\n\t\t// rangeMessage: String\r\n\t\t//\t\tThe message to display if value is out-of-range\r\n\t\trangeMessage: \"\",\r\n\r\n\t\t/*=====\r\n\t\t// constraints: RangeBoundTextBox.__Constraints\r\n\t\tconstraints: {},\r\n\t\t======*/\r\n\r\n\t\trangeCheck: function(/*Number*/ primitive, /*dijit/form/RangeBoundTextBox.__Constraints*/ constraints){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverridable function used to validate the range of the numeric input value.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t\treturn\t(\"min\" in constraints? (this.compare(primitive,constraints.min) >= 0) : true) &&\r\n\t\t\t\t(\"max\" in constraints? (this.compare(primitive,constraints.max) <= 0) : true); // Boolean\r\n\t\t},\r\n\r\n\t\tisInRange: function(/*Boolean*/ /*===== isFocused =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTests if the value is in the min/max range specified in constraints\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t\treturn this.rangeCheck(this.get('value'), this.constraints);\r\n\t\t},\r\n\r\n\t\t_isDefinitelyOutOfRange: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns true if the value is out of range and will remain\r\n\t\t\t//\t\tout of range even if the user types more characters\r\n\t\t\tvar val = this.get('value');\r\n\t\t\tif(val == null){ return false; } // not yet valid enough to compare to\r\n\t\t\tvar outOfRange = false;\r\n\t\t\tif(\"min\" in this.constraints){\r\n\t\t\t\tvar min = this.constraints.min;\r\n\t\t\t\toutOfRange = this.compare(val, ((typeof min == \"number\") && min >= 0 && val != 0) ? 0 : min) < 0;\r\n\t\t\t}\r\n\t\t\tif(!outOfRange && (\"max\" in this.constraints)){\r\n\t\t\t\tvar max = this.constraints.max;\r\n\t\t\t\toutOfRange = this.compare(val, ((typeof max != \"number\") || max > 0) ? max : 0) > 0;\r\n\t\t\t}\r\n\t\t\treturn outOfRange;\r\n\t\t},\r\n\r\n\t\t_isValidSubset: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverrides `dijit/form/ValidationTextBox._isValidSubset()`.\r\n\t\t\t//\t\tReturns true if the input is syntactically valid, and either within\r\n\t\t\t//\t\trange or could be made in range by more typing.\r\n\t\t\treturn this.inherited(arguments) && !this._isDefinitelyOutOfRange();\r\n\t\t},\r\n\r\n\t\tisValid: function(/*Boolean*/ isFocused){\r\n\t\t\t// Overrides dijit/form/ValidationTextBox.isValid() to check that the value is also in range.\r\n\t\t\treturn this.inherited(arguments) &&\r\n\t\t\t\t((this._isEmpty(this.textbox.value) && !this.required) || this.isInRange(isFocused)); // Boolean\r\n\t\t},\r\n\r\n\t\tgetErrorMessage: function(/*Boolean*/ isFocused){\r\n\t\t\t// Overrides dijit/form/ValidationTextBox.getErrorMessage() to print \"out of range\" message if appropriate\r\n\t\t\tvar v = this.get('value');\r\n\t\t\tif(v != null /* and !undefined */ && v !== '' && (typeof v != \"number\" || !isNaN(v)) && !this.isInRange(isFocused)){ // don't check isInRange w/o a real value\r\n\t\t\t\treturn this.rangeMessage; // String\r\n\t\t\t}\r\n\t\t\treturn this.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tpostMixInProperties: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tif(!this.rangeMessage){\r\n\t\t\t\tthis.messages = i18n.getLocalization(\"dijit.form\", \"validate\", this.lang);\r\n\t\t\t\tthis.rangeMessage = this.messages.rangeMessage;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\t/*=====\r\n\tRangeBoundTextBox.__Constraints = declare(null, {\r\n\t\t// min: Number\r\n\t\t//\t\tMinimum signed value.  Default is -Infinity\r\n\t\t// max: Number\r\n\t\t//\t\tMaximum signed value.  Default is +Infinity\r\n\t});\r\n\t=====*/\r\n\treturn RangeBoundTextBox;\r\n});\r\n"]}