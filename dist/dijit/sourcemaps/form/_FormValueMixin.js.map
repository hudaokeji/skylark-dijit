{"version":3,"sources":["form/_FormValueMixin.js"],"names":["define","declare","domAttr","keys","lang","on","_FormWidgetMixin","readOnly","_setReadOnlyAttr","value","set","this","focusNode","_set","postCreate","inherited","arguments","undefined","_resetValue","_lastValueReported","_setValueAttr","newValue","priorityChange","_handleOnChange","undo","reset","_hasBeenBlurred"],"mappings":";;;;;;;AAAAA,QACC,qBACA,gBACA,YACA,kBACA,UACA,sBACE,SAASC,EAASC,EAASC,EAAMC,EAAMC,EAAIC,GAK7C,OAAOL,EAAQ,6BAA8BK,GAa5CC,UAAU,EAEVC,iBAAkB,SAAqBC,GACtCP,EAAQQ,IAAIC,KAAKC,UAAW,WAAYH,GACxCE,KAAKE,KAAK,WAAYJ,IAGvBK,WAAY,WACXH,KAAKI,UAAUC,gBAISC,IAArBN,KAAKO,cACPP,KAAKQ,mBAAqBR,KAAKO,YAAcP,KAAKF,QAIpDW,cAAe,SAAsBC,EAAuBC,GAO3DX,KAAKY,gBAAgBF,EAAUC,IAGhCC,gBAAiB,SAAsBF,EAAuBC,GAI7DX,KAAKE,KAAK,QAASQ,GACnBV,KAAKI,UAAUC,YAGhBQ,KAAM,WAGLb,KAAKS,cAAcT,KAAKQ,oBAAoB,IAG7CM,MAAO,WAGNd,KAAKe,iBAAkB,EACvBf,KAAKS,cAAcT,KAAKO,aAAa","file":"../../form/_FormValueMixin.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom-attr\", // domAttr.set\r\n\t\"dojo/keys\", // keys.ESCAPE\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/on\",\r\n\t\"./_FormWidgetMixin\"\r\n], function(declare, domAttr, keys, lang, on, _FormWidgetMixin){\r\n\r\n\t// module:\r\n\t//\t\tdijit/form/_FormValueMixin\r\n\r\n\treturn declare(\"dijit.form._FormValueMixin\", _FormWidgetMixin, {\r\n\t\t// summary:\r\n\t\t//\t\tMixin for widgets corresponding to native HTML elements such as `<input>` or `<select>`\r\n\t\t//\t\tthat have user changeable values.\r\n\t\t// description:\r\n\t\t//\t\tEach _FormValueMixin represents a single input value, and has a (possibly hidden) `<input>` element,\r\n\t\t//\t\tto which it serializes it's input value, so that form submission (either normal submission or via FormBind?)\r\n\t\t//\t\tworks as expected.\r\n\r\n\t\t// readOnly: Boolean\r\n\t\t//\t\tShould this widget respond to user input?\r\n\t\t//\t\tIn markup, this is specified as \"readOnly\".\r\n\t\t//\t\tSimilar to disabled except readOnly form values are submitted.\r\n\t\treadOnly: false,\r\n\r\n\t\t_setReadOnlyAttr: function(/*Boolean*/ value){\r\n\t\t\tdomAttr.set(this.focusNode, 'readOnly', value);\r\n\t\t\tthis._set(\"readOnly\", value);\r\n\t\t},\r\n\r\n\t\tpostCreate: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\t// Update our reset value if it hasn't yet been set (because this.set()\r\n\t\t\t// is only called when there *is* a value)\r\n\t\t\tif(this._resetValue === undefined){\r\n\t\t\t\tthis._lastValueReported = this._resetValue = this.value;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_setValueAttr: function(/*anything*/ newValue, /*Boolean?*/ priorityChange){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHook so set('value', value) works.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSets the value of the widget.\r\n\t\t\t//\t\tIf the value has changed, then fire onChange event, unless priorityChange\r\n\t\t\t//\t\tis specified as null (or false?)\r\n\t\t\tthis._handleOnChange(newValue, priorityChange);\r\n\t\t},\r\n\r\n\t\t_handleOnChange: function(/*anything*/ newValue, /*Boolean?*/ priorityChange){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when the value of the widget has changed.  Saves the new value in this.value,\r\n\t\t\t//\t\tand calls onChange() if appropriate.   See _FormWidget._handleOnChange() for details.\r\n\t\t\tthis._set(\"value\", newValue);\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tundo: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRestore the value to the last value passed to onChange\r\n\t\t\tthis._setValueAttr(this._lastValueReported, false);\r\n\t\t},\r\n\r\n\t\treset: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReset the widget's value to what it was at initialization time\r\n\t\t\tthis._hasBeenBlurred = false;\r\n\t\t\tthis._setValueAttr(this._resetValue, true);\r\n\t\t}\r\n\t});\r\n});\r\n"]}