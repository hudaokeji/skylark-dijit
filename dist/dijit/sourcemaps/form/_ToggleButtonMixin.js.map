{"version":3,"sources":["form/_ToggleButtonMixin.js"],"names":["define","declare","domAttr","checked","_aria_attr","_onClick","evt","original","this","_set","ret","inherited","arguments","set","_setCheckedAttr","value","priorityChange","node","focusNode","domNode","_created","get","setAttribute","String","_handleOnChange","postCreate","undefined","_resetValue","_lastValueReported","reset","_hasBeenBlurred","params"],"mappings":";;;;;;;AAAAA,QACC,qBACA,iBACE,SAASC,EAASC,GAKpB,OAAOD,EAAQ,gCAAiC,MAS/CE,SAAS,EAGTC,WAAY,eAEZC,SAAU,SAAmBC,GAC5B,IAAIC,EAAWC,KAAKL,QACpBK,KAAKC,KAAK,WAAYF,GACtB,IAAIG,EAAMF,KAAKG,UAAUC,WAEzB,OADAJ,KAAKK,IAAI,UAAWH,EAAMF,KAAKL,QAAUI,GAClCG,GAGRI,gBAAiB,SAAqBC,EAAoBC,GACzDR,KAAKC,KAAK,UAAWM,GACrB,IAAIE,EAAOT,KAAKU,WAAaV,KAAKW,QAC/BX,KAAKY,UAEJlB,EAAQmB,IAAIJ,EAAM,cAAgBF,GACpCb,EAAQW,IAAII,EAAM,YAAaF,GAGjCE,EAAKK,aAAad,KAAKJ,WAAYmB,OAAOR,IAC1CP,KAAKgB,gBAAgBT,EAAOC,IAG7BS,WAAY,WACXjB,KAAKG,UAAUC,WACf,IAAIK,EAAOT,KAAKU,WAAaV,KAAKW,QAC/BX,KAAKL,SAEPc,EAAKK,aAAa,UAAW,gBAKNI,IAArBlB,KAAKmB,cACPnB,KAAKoB,mBAAqBpB,KAAKmB,YAAcnB,KAAKL,UAIpD0B,MAAO,WAINrB,KAAKsB,iBAAkB,EAGvBtB,KAAKK,IAAI,UAAWL,KAAKuB,OAAO5B,UAAW","file":"../../form/_ToggleButtonMixin.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom-attr\" // domAttr.set\r\n], function(declare, domAttr){\r\n\r\n\t// module:\r\n\t//\t\tdijit/form/_ToggleButtonMixin\r\n\r\n\treturn declare(\"dijit.form._ToggleButtonMixin\", null, {\r\n\t\t// summary:\r\n\t\t//\t\tA mixin to provide functionality to allow a button that can be in two states (checked or not).\r\n\r\n\t\t// checked: Boolean\r\n\t\t//\t\tCorresponds to the native HTML `<input>` element's attribute.\r\n\t\t//\t\tIn markup, specified as \"checked='checked'\" or just \"checked\".\r\n\t\t//\t\tTrue if the button is depressed, or the checkbox is checked,\r\n\t\t//\t\tor the radio button is selected, etc.\r\n\t\tchecked: false,\r\n\r\n\t\t// aria-pressed for toggle buttons, and aria-checked for checkboxes\r\n\t\t_aria_attr: \"aria-pressed\",\r\n\r\n\t\t_onClick: function(/*Event*/ evt){\r\n\t\t\tvar original = this.checked;\r\n\t\t\tthis._set('checked', !original); // partially set the toggled value, assuming the toggle will work, so it can be overridden in the onclick handler\r\n\t\t\tvar ret = this.inherited(arguments); // the user could reset the value here\r\n\t\t\tthis.set('checked', ret ? this.checked : original); // officially set the toggled or user value, or reset it back\r\n\t\t\treturn ret;\r\n\t\t},\r\n\r\n\t\t_setCheckedAttr: function(/*Boolean*/ value, /*Boolean?*/ priorityChange){\r\n\t\t\tthis._set(\"checked\", value);\r\n\t\t\tvar node = this.focusNode || this.domNode;\r\n\t\t\tif(this._created){ // IE is not ready to handle checked attribute (affects tab order)\r\n\t\t\t\t// needlessly setting \"checked\" upsets IE's tab order\r\n\t\t\t\tif(domAttr.get(node, \"checked\") != !!value){\r\n\t\t\t\t\tdomAttr.set(node, \"checked\", !!value); // \"mixed\" -> true\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tnode.setAttribute(this._aria_attr, String(value)); // aria values should be strings\r\n\t\t\tthis._handleOnChange(value, priorityChange);\r\n\t\t},\r\n\r\n\t\tpostCreate: function(){ // use postCreate instead of startup so users forgetting to call startup are OK\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tvar node = this.focusNode || this.domNode;\r\n\t\t\tif(this.checked){\r\n\t\t\t\t// need this here instead of on the template so IE8 tab order works\r\n\t\t\t\tnode.setAttribute('checked', 'checked');\r\n\t\t\t}\r\n\r\n\t\t\t// Update our reset value if it hasn't yet been set (because this.set()\r\n\t\t\t// is only called when there *is* a value)\r\n\t\t\tif(this._resetValue === undefined){\r\n\t\t\t\tthis._lastValueReported = this._resetValue = this.checked;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\treset: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReset the widget's value to what it was at initialization time\r\n\r\n\t\t\tthis._hasBeenBlurred = false;\r\n\r\n\t\t\t// set checked state to original setting\r\n\t\t\tthis.set('checked', this.params.checked || false);\r\n\t\t}\r\n\t});\r\n});\r\n"]}