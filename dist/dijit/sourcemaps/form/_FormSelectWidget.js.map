{"version":3,"sources":["form/_FormSelectWidget.js"],"names":["define","array","Deferred","aspect","sorter","declare","dom","domClass","kernel","lang","query","when","QueryResults","_FormValueWidget","multiple","options","store","_setStoreAttr","val","this","_created","_deprecatedSetStore","_setQueryAttr","selectedValue","queryOptions","_setQueryOptionsAttr","labelAttr","onFetch","sortByLabel","loadChildrenOnOpen","onLoadDeferred","getOptions","valueOrIdx","opts","isArray","map","isString","value","isObject","some","option","idx","a","length","addOption","forEach","i","push","_loadChildren","removeOption","oldOpts","filter","node","label","_removeOptionItem","updateOption","newOption","k","oldOpt","setStore","fetchArgs","deprecated","declaredClass","oStore","h","_notifyConnections","pop","remove","get","mixin","_oldAPI","id","deferred","fetchItemByIdentity","identity","onItem","object","resolve","onError","error","reject","promise","fetchHandle","abort","total","fetch","onBegin","count","onComplete","results","getFeatures","after","hitch","_set","_queryRes","close","_observeHandle","_loadingStore","items","sort","getValue","createSortFunction","attribute","getLabelAttributes","b","call","_addOptionForItem","observe","deletedFrom","insertedInto","_onSetItem","_onDeleteItem","_onNewItem","set","_pendingValue","_pseudoLoadChildren","onSetStore","err","console","toString","_setValueAttr","newValue","priorityChange","_onChangeActive","opt","selected","v","disp","_setDisplay","inherited","arguments","_updateSelection","_getDisplayedValueAttr","ret","concat","_setDisplayedValueAttr","_getChildren","child","destroyRecursive","_addOptionItem","focusedChild","_getValueFromOpts","self","isSelected","toggle","domNode","baseClass","replace","setAttribute","item","parentInfo","parent","getIdentity","_getOptionObjForItem","getLabel","isItemLoaded","newOpt","loadItem","scope","constructor","params","_oValue","buildRendering","setSelectable","focusNode","_fillContent","srcNodeRef","getAttribute","disabled","_scopeName","String","innerHTML","split","postCreate","_storeInitialized","startup","destroy","_getSelectedOptionsAttr"],"mappings":"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","file":"../../form/_FormSelectWidget.js","sourcesContent":["define([\r\n\t\"dojo/_base/array\", // array.filter array.forEach array.map array.some\r\n\t\"dojo/_base/Deferred\",\r\n\t\"dojo/aspect\", // aspect.after\r\n\t\"dojo/data/util/sorter\", // util.sorter.createSortFunction\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom\", // dom.setSelectable\r\n\t\"dojo/dom-class\", // domClass.toggle\r\n\t\"dojo/_base/kernel\",\t// _scopeName\r\n\t\"dojo/_base/lang\", // lang.delegate lang.isArray lang.isObject lang.hitch\r\n\t\"dojo/query\", // query\r\n\t\"dojo/when\",\r\n\t\"dojo/store/util/QueryResults\",\r\n\t\"./_FormValueWidget\"\r\n], function(array, Deferred, aspect, sorter, declare, dom, domClass, kernel, lang, query, when,\r\n\t\t\tQueryResults, _FormValueWidget){\r\n\r\n\t// module:\r\n\t//\t\tdijit/form/_FormSelectWidget\r\n\r\n\t/*=====\r\n\tvar __SelectOption = {\r\n\t\t// value: String\r\n\t\t//\t\tThe value of the option.  Setting to empty (or missing) will\r\n\t\t//\t\tplace a separator at that location\r\n\t\t// label: String\r\n\t\t//\t\tThe label for our option.  It can contain html tags.\r\n\t\t// selected: Boolean\r\n\t\t//\t\tWhether or not we are a selected option\r\n\t\t// disabled: Boolean\r\n\t\t//\t\tWhether or not this specific option is disabled\r\n\t};\r\n\t=====*/\r\n\r\n\tvar _FormSelectWidget = declare(\"dijit.form._FormSelectWidget\", _FormValueWidget, {\r\n\t\t// summary:\r\n\t\t//\t\tExtends _FormValueWidget in order to provide \"select-specific\"\r\n\t\t//\t\tvalues - i.e., those values that are unique to `<select>` elements.\r\n\t\t//\t\tThis also provides the mechanism for reading the elements from\r\n\t\t//\t\ta store, if desired.\r\n\r\n\t\t// multiple: [const] Boolean\r\n\t\t//\t\tWhether or not we are multi-valued\r\n\t\tmultiple: false,\r\n\r\n\t\t// options: __SelectOption[]\r\n\t\t//\t\tThe set of options for our select item.  Roughly corresponds to\r\n\t\t//\t\tthe html `<option>` tag.\r\n\t\toptions: null,\r\n\r\n\t\t// store: dojo/store/api/Store\r\n\t\t//\t\tA store to use for getting our list of options - rather than reading them\r\n\t\t//\t\tfrom the `<option>` html tags.   Should support getIdentity().\r\n\t\t//\t\tFor back-compat store can also be a dojo/data/api/Identity.\r\n\t\tstore: null,\r\n\t\t_setStoreAttr: function(val){\r\n\t\t\tif(this._created){\t\t// don't repeat work that will happen in postCreate()\r\n\t\t\t\tthis._deprecatedSetStore(val);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// query: object\r\n\t\t//\t\tA query to use when fetching items from our store\r\n\t\tquery: null,\r\n\t\t_setQueryAttr: function(query){\r\n\t\t\tif(this._created){\t\t// don't repeat work that will happen in postCreate()\r\n\t\t\t\tthis._deprecatedSetStore(this.store, this.selectedValue, {query: query});\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// queryOptions: object\r\n\t\t//\t\tQuery options to use when fetching from the store\r\n\t\tqueryOptions: null,\r\n\t\t_setQueryOptionsAttr: function(queryOptions){\r\n\t\t\tif(this._created){\t\t// don't repeat work that will happen in postCreate()\r\n\t\t\t\tthis._deprecatedSetStore(this.store, this.selectedValue, {queryOptions: queryOptions});\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// labelAttr: String?\r\n\t\t//\t\tThe entries in the drop down list come from this attribute in the dojo.store items.\r\n\t\t//\t\tIf ``store`` is set, labelAttr must be set too, unless store is an old-style\r\n\t\t//\t\tdojo.data store rather than a new dojo/store.\r\n\t\tlabelAttr: \"\",\r\n\r\n\t\t// onFetch: Function\r\n\t\t//\t\tA callback to do with an onFetch - but before any items are actually\r\n\t\t//\t\titerated over (i.e. to filter even further what you want to add)\r\n\t\tonFetch: null,\r\n\r\n\t\t// sortByLabel: Boolean\r\n\t\t//\t\tFlag to sort the options returned from a store by the label of\r\n\t\t//\t\tthe store.\r\n\t\tsortByLabel: true,\r\n\r\n\r\n\t\t// loadChildrenOnOpen: Boolean\r\n\t\t//\t\tBy default loadChildren is called when the items are fetched from the\r\n\t\t//\t\tstore.  This property allows delaying loadChildren (and the creation\r\n\t\t//\t\tof the options/menuitems) until the user clicks the button to open the\r\n\t\t//\t\tdropdown.\r\n\t\tloadChildrenOnOpen: false,\r\n\r\n\t\t// onLoadDeferred: [readonly] dojo.Deferred\r\n\t\t//\t\tThis is the `dojo.Deferred` returned by setStore().\r\n\t\t//\t\tCalling onLoadDeferred.then() registers your\r\n\t\t//\t\tcallback to be called only once, when the prior setStore completes.\r\n\t\tonLoadDeferred: null,\r\n\r\n\t\tgetOptions: function(/*anything*/ valueOrIdx){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns a given option (or options).\r\n\t\t\t// valueOrIdx:\r\n\t\t\t//\t\tIf passed in as a string, that string is used to look up the option\r\n\t\t\t//\t\tin the array of options - based on the value property.\r\n\t\t\t//\t\t(See dijit/form/_FormSelectWidget.__SelectOption).\r\n\t\t\t//\r\n\t\t\t//\t\tIf passed in a number, then the option with the given index (0-based)\r\n\t\t\t//\t\twithin this select will be returned.\r\n\t\t\t//\r\n\t\t\t//\t\tIf passed in a dijit/form/_FormSelectWidget.__SelectOption, the same option will be\r\n\t\t\t//\t\treturned if and only if it exists within this select.\r\n\t\t\t//\r\n\t\t\t//\t\tIf passed an array, then an array will be returned with each element\r\n\t\t\t//\t\tin the array being looked up.\r\n\t\t\t//\r\n\t\t\t//\t\tIf not passed a value, then all options will be returned\r\n\t\t\t//\r\n\t\t\t// returns:\r\n\t\t\t//\t\tThe option corresponding with the given value or index.\r\n\t\t\t//\t\tnull is returned if any of the following are true:\r\n\t\t\t//\r\n\t\t\t//\t\t- A string value is passed in which doesn't exist\r\n\t\t\t//\t\t- An index is passed in which is outside the bounds of the array of options\r\n\t\t\t//\t\t- A dijit/form/_FormSelectWidget.__SelectOption is passed in which is not a part of the select\r\n\r\n\t\t\t// NOTE: the compare for passing in a dijit/form/_FormSelectWidget.__SelectOption checks\r\n\t\t\t//\t\tif the value property matches - NOT if the exact option exists\r\n\t\t\t// NOTE: if passing in an array, null elements will be placed in the returned\r\n\t\t\t//\t\tarray when a value is not found.\r\n\t\t\tvar opts = this.options || [];\r\n\r\n\t\t\tif(valueOrIdx == null){\r\n\t\t\t\treturn opts; // __SelectOption[]\r\n\t\t\t}\r\n\t\t\tif(lang.isArray(valueOrIdx)){\r\n\t\t\t\treturn array.map(valueOrIdx, \"return this.getOptions(item);\", this); // __SelectOption[]\r\n\t\t\t}\r\n\t\t\tif(lang.isString(valueOrIdx)){\r\n\t\t\t\tvalueOrIdx = { value: valueOrIdx };\r\n\t\t\t}\r\n\t\t\tif(lang.isObject(valueOrIdx)){\r\n\t\t\t\t// We were passed an option - so see if it's in our array (directly),\r\n\t\t\t\t// and if it's not, try and find it by value.\r\n\r\n\t\t\t\tif(!array.some(opts, function(option, idx){\r\n\t\t\t\t\tfor(var a in valueOrIdx){\r\n\t\t\t\t\t\tif(!(a in option) || option[a] != valueOrIdx[a]){ // == and not === so that 100 matches '100'\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvalueOrIdx = idx;\r\n\t\t\t\t\treturn true; // stops iteration through opts\r\n\t\t\t\t})){\r\n\t\t\t\t\tvalueOrIdx = -1;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(valueOrIdx >= 0 && valueOrIdx < opts.length){\r\n\t\t\t\treturn opts[valueOrIdx]; // __SelectOption\r\n\t\t\t}\r\n\t\t\treturn null; // null\r\n\t\t},\r\n\r\n\t\taddOption: function(/*__SelectOption|__SelectOption[]*/ option){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdds an option or options to the end of the select.  If value\r\n\t\t\t//\t\tof the option is empty or missing, a separator is created instead.\r\n\t\t\t//\t\tPassing in an array of options will yield slightly better performance\r\n\t\t\t//\t\tsince the children are only loaded once.\r\n\t\t\tarray.forEach(lang.isArray(option) ? option : [option], function(i){\r\n\t\t\t\tif(i && lang.isObject(i)){\r\n\t\t\t\t\tthis.options.push(i);\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\tthis._loadChildren();\r\n\t\t},\r\n\r\n\t\tremoveOption: function(/*String|__SelectOption|Number|Array*/ valueOrIdx){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRemoves the given option or options.  You can remove by string\r\n\t\t\t//\t\t(in which case the value is removed), number (in which case the\r\n\t\t\t//\t\tindex in the options array is removed), or select option (in\r\n\t\t\t//\t\twhich case, the select option with a matching value is removed).\r\n\t\t\t//\t\tYou can also pass in an array of those values for a slightly\r\n\t\t\t//\t\tbetter performance since the children are only loaded once.\r\n\t\t\t//\t\tFor numeric option values, specify {value: number} as the argument.\r\n\t\t\tvar oldOpts = this.getOptions(lang.isArray(valueOrIdx) ? valueOrIdx : [valueOrIdx]);\r\n\t\t\tarray.forEach(oldOpts, function(option){\r\n\t\t\t\t// We can get null back in our array - if our option was not found.  In\r\n\t\t\t\t// that case, we don't want to blow up...\r\n\t\t\t\tif(option){\r\n\t\t\t\t\tthis.options = array.filter(this.options, function(node){\r\n\t\t\t\t\t\treturn (node.value !== option.value || node.label !== option.label);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tthis._removeOptionItem(option);\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\tthis._loadChildren();\r\n\t\t},\r\n\r\n\t\tupdateOption: function(/*__SelectOption|__SelectOption[]*/ newOption){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUpdates the values of the given option.  The option to update\r\n\t\t\t//\t\tis matched based on the value of the entered option.  Passing\r\n\t\t\t//\t\tin an array of new options will yield better performance since\r\n\t\t\t//\t\tthe children will only be loaded once.\r\n\t\t\tarray.forEach(lang.isArray(newOption) ? newOption : [newOption], function(i){\r\n\t\t\t\tvar oldOpt = this.getOptions({ value: i.value }), k;\r\n\t\t\t\tif(oldOpt){\r\n\t\t\t\t\tfor(k in i){\r\n\t\t\t\t\t\toldOpt[k] = i[k];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\tthis._loadChildren();\r\n\t\t},\r\n\r\n\t\tsetStore: function(store, selectedValue, fetchArgs){\r\n\t\t\tkernel.deprecated(this.declaredClass+\"::setStore(store, selectedValue, fetchArgs) is deprecated. Use set('query', fetchArgs.query), set('queryOptions', fetchArgs.queryOptions), set('store', store), or set('value', selectedValue) instead.\", \"\", \"2.0\");\r\n\t\t\tthis._deprecatedSetStore(store, selectedValue, fetchArgs);\r\n\t\t},\r\n\r\n\t\t_deprecatedSetStore: function(store, selectedValue, fetchArgs){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSets the store you would like to use with this select widget.\r\n\t\t\t//\t\tThe selected value is the value of the new store to set.  This\r\n\t\t\t//\t\tfunction returns the original store, in case you want to reuse\r\n\t\t\t//\t\tit or something.\r\n\t\t\t// store: dojo/store/api/Store\r\n\t\t\t//\t\tThe dojo.store you would like to use - it MUST implement getIdentity()\r\n\t\t\t//\t\tand MAY implement observe().\r\n\t\t\t//\t\tFor backwards-compatibility this can also be a data.data store, in which case\r\n\t\t\t//\t\tit MUST implement dojo/data/api/Identity,\r\n\t\t\t//\t\tand MAY implement dojo/data/api/Notification.\r\n\t\t\t// selectedValue: anything?\r\n\t\t\t//\t\tThe value that this widget should set itself to *after* the store\r\n\t\t\t//\t\thas been loaded\r\n\t\t\t// fetchArgs: Object?\r\n\t\t\t//\t\tHash of parameters to set filter on store, etc.\r\n\t\t\t//\r\n\t\t\t//\t\t- query: new value for Select.query,\r\n\t\t\t//\t\t- queryOptions: new value for Select.queryOptions,\r\n\t\t\t//\t\t- onFetch: callback function for each item in data (Deprecated)\r\n\t\t\tvar oStore = this.store;\r\n\t\t\tfetchArgs = fetchArgs || {};\r\n\r\n\t\t\tif(oStore !== store){\r\n\t\t\t\t// Our store has changed, so cancel any listeners on old store (remove for 2.0)\r\n\t\t\t\tvar h;\r\n\t\t\t\twhile((h = this._notifyConnections.pop())){\r\n\t\t\t\t\th.remove();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// For backwards-compatibility, accept dojo.data store in addition to dojo.store.store.  Remove in 2.0.\r\n\t\t\t\tif(!store.get){\r\n\t\t\t\t\tlang.mixin(store, {\r\n\t\t\t\t\t\t_oldAPI: true,\r\n\t\t\t\t\t\tget: function(id){\r\n\t\t\t\t\t\t\t// summary:\r\n\t\t\t\t\t\t\t//\t\tRetrieves an object by it's identity. This will trigger a fetchItemByIdentity.\r\n\t\t\t\t\t\t\t//\t\tLike dojo.store.DataStore.get() except returns native item.\r\n\t\t\t\t\t\t\tvar deferred = new Deferred();\r\n\t\t\t\t\t\t\tthis.fetchItemByIdentity({\r\n\t\t\t\t\t\t\t\tidentity: id,\r\n\t\t\t\t\t\t\t\tonItem: function(object){\r\n\t\t\t\t\t\t\t\t\tdeferred.resolve(object);\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tonError: function(error){\r\n\t\t\t\t\t\t\t\t\tdeferred.reject(error);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\treturn deferred.promise;\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tquery: function(query, options){\r\n\t\t\t\t\t\t\t// summary:\r\n\t\t\t\t\t\t\t//\t\tQueries the store for objects.   Like dojo/store/DataStore.query()\r\n\t\t\t\t\t\t\t//\t\texcept returned Deferred contains array of native items.\r\n\t\t\t\t\t\t\tvar deferred = new Deferred(function(){\r\n\t\t\t\t\t\t\t\tif(fetchHandle.abort){\r\n\t\t\t\t\t\t\t\t\tfetchHandle.abort();\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t\tdeferred.total = new Deferred();\r\n\t\t\t\t\t\t\tvar fetchHandle = this.fetch(lang.mixin({\r\n\t\t\t\t\t\t\t\tquery: query,\r\n\t\t\t\t\t\t\t\tonBegin: function(count){\r\n\t\t\t\t\t\t\t\t\tdeferred.total.resolve(count);\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tonComplete: function(results){\r\n\t\t\t\t\t\t\t\t\tdeferred.resolve(results);\r\n\t\t\t\t\t\t\t\t},\r\n\t\t\t\t\t\t\t\tonError: function(error){\r\n\t\t\t\t\t\t\t\t\tdeferred.reject(error);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}, options));\r\n\t\t\t\t\t\t\treturn new QueryResults(deferred);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\r\n\t\t\t\t\tif(store.getFeatures()[\"dojo.data.api.Notification\"]){\r\n\t\t\t\t\t\tthis._notifyConnections = [\r\n\t\t\t\t\t\t\taspect.after(store, \"onNew\", lang.hitch(this, \"_onNewItem\"), true),\r\n\t\t\t\t\t\t\taspect.after(store, \"onDelete\", lang.hitch(this, \"_onDeleteItem\"), true),\r\n\t\t\t\t\t\t\taspect.after(store, \"onSet\", lang.hitch(this, \"_onSetItem\"), true)\r\n\t\t\t\t\t\t];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tthis._set(\"store\", store);\t\t\t// Our store has changed, so update our notifications\r\n\t\t\t}\r\n\r\n\t\t\t// Remove existing options (if there are any)\r\n\t\t\tif(this.options && this.options.length){\r\n\t\t\t\tthis.removeOption(this.options);\r\n\t\t\t}\r\n\r\n\t\t\t// Cancel listener for updates to old (dojo.data) store\r\n\t\t\tif(this._queryRes && this._queryRes.close){\r\n\t\t\t\tthis._queryRes.close();\r\n\t\t\t}\r\n\r\n\t\t\t// Cancel listener for updates to new (dojo.store) store\r\n\t\t\tif(this._observeHandle && this._observeHandle.remove){\r\n\t\t\t\tthis._observeHandle.remove();\r\n\t\t\t\tthis._observeHandle = null;\r\n\t\t\t}\r\n\r\n\t\t\t// If user has specified new query and query options along with this new store, then use them.\r\n\t\t\tif(fetchArgs.query){\r\n\t\t\t\tthis._set(\"query\", fetchArgs.query);\r\n\t\t\t}\r\n\t\t\tif(fetchArgs.queryOptions){\r\n\t\t\t\tthis._set(\"queryOptions\", fetchArgs.queryOptions);\r\n\t\t\t}\r\n\r\n\t\t\t// Add our new options\r\n\t\t\tif(store && store.query){\r\n\t\t\t\tthis._loadingStore = true;\r\n\t\t\t\tthis.onLoadDeferred = new Deferred();\r\n\r\n\t\t\t\t// Run query\r\n\t\t\t\t// Save result in this._queryRes so we can cancel the listeners we register below\r\n\t\t\t\tthis._queryRes = store.query(this.query, this.queryOptions);\r\n\t\t\t\twhen(this._queryRes, lang.hitch(this, function(items){\r\n\r\n\t\t\t\t\tif(this.sortByLabel && !fetchArgs.sort && items.length){\r\n\t\t\t\t\t\tif(store.getValue){\r\n\t\t\t\t\t\t\t// Old dojo.data API to access items, remove for 2.0\r\n\t\t\t\t\t\t\titems.sort(sorter.createSortFunction([\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tattribute: store.getLabelAttributes(items[0])[0]\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t], store));\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t// TODO: remove sortByLabel completely for 2.0?  It can be handled by queryOptions: {sort: ... }.\r\n\t\t\t\t\t\t\tvar labelAttr = this.labelAttr;\r\n\t\t\t\t\t\t\titems.sort(function(a, b){\r\n\t\t\t\t\t\t\t\treturn a[labelAttr] > b[labelAttr] ? 1 : b[labelAttr] > a[labelAttr] ? -1 : 0;\r\n\t\t\t\t\t\t\t});\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tif(fetchArgs.onFetch){\r\n\t\t\t\t\t\titems = fetchArgs.onFetch.call(this, items, fetchArgs);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// TODO: Add these guys as a batch, instead of separately\r\n\t\t\t\t\tarray.forEach(items, function(i){\r\n\t\t\t\t\t\tthis._addOptionForItem(i);\r\n\t\t\t\t\t}, this);\r\n\r\n\t\t\t\t\t// Register listener for store updates\r\n\t\t\t\t\tif(this._queryRes.observe){\r\n\t\t\t\t\t\t// observe returns yet another handle that needs its own explicit gc\r\n\t\t\t\t\t\tthis._observeHandle = this._queryRes.observe(lang.hitch(this, function(object, deletedFrom, insertedInto){\r\n\t\t\t\t\t\t\tif(deletedFrom == insertedInto){\r\n\t\t\t\t\t\t\t\tthis._onSetItem(object);\r\n\t\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t\tif(deletedFrom != -1){\r\n\t\t\t\t\t\t\t\t\tthis._onDeleteItem(object);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tif(insertedInto != -1){\r\n\t\t\t\t\t\t\t\t\tthis._onNewItem(object);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}), true);\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// Set our value (which might be undefined), and then tweak\r\n\t\t\t\t\t// it to send a change event with the real value\r\n\t\t\t\t\tthis._loadingStore = false;\r\n\t\t\t\t\tthis.set(\"value\", \"_pendingValue\" in this ? this._pendingValue : selectedValue);\r\n\t\t\t\t\tdelete this._pendingValue;\r\n\r\n\t\t\t\t\tif(!this.loadChildrenOnOpen){\r\n\t\t\t\t\t\tthis._loadChildren();\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tthis._pseudoLoadChildren(items);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.onLoadDeferred.resolve(true);\r\n\t\t\t\t\tthis.onSetStore();\r\n\t\t\t\t}), function(err){\r\n\t\t\t\t\tconsole.error('dijit.form.Select: ' + err.toString());\r\n\t\t\t\t\tthis.onLoadDeferred.reject(err);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn oStore;\t// dojo/data/api/Identity\r\n\t\t},\r\n\r\n\t\t_setValueAttr: function(/*anything*/ newValue, /*Boolean?*/ priorityChange){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tset the value of the widget.\r\n\t\t\t//\t\tIf a string is passed, then we set our value from looking it up.\r\n\t\t\tif(!this._onChangeActive){\r\n\t\t\t\tpriorityChange = null;\r\n\t\t\t}\r\n\t\t\tif(this._loadingStore){\r\n\t\t\t\t// Our store is loading - so save our value, and we'll set it when\r\n\t\t\t\t// we're done\r\n\t\t\t\tthis._pendingValue = newValue;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(newValue == null){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(lang.isArray(newValue)){\r\n\t\t\t\tnewValue = array.map(newValue, function(value){\r\n\t\t\t\t\treturn lang.isObject(value) ? value : { value: value };\r\n\t\t\t\t}); // __SelectOption[]\r\n\t\t\t}else if(lang.isObject(newValue)){\r\n\t\t\t\tnewValue = [newValue];\r\n\t\t\t}else{\r\n\t\t\t\tnewValue = [\r\n\t\t\t\t\t{ value: newValue }\r\n\t\t\t\t];\r\n\t\t\t}\r\n\t\t\tnewValue = array.filter(this.getOptions(newValue), function(i){\r\n\t\t\t\treturn i && i.value;\r\n\t\t\t});\r\n\t\t\tvar opts = this.getOptions() || [];\r\n\t\t\tif(!this.multiple && (!newValue[0] || !newValue[0].value) && !!opts.length){\r\n\t\t\t\tnewValue[0] = opts[0];\r\n\t\t\t}\r\n\t\t\tarray.forEach(opts, function(opt){\r\n\t\t\t\topt.selected = array.some(newValue, function(v){\r\n\t\t\t\t\treturn v.value === opt.value;\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t\tvar val = array.map(newValue, function(opt){\r\n\t\t\t\treturn opt.value;\r\n\t\t\t});\r\n\r\n\t\t\tif(typeof val == \"undefined\" || typeof val[0] == \"undefined\"){\r\n\t\t\t\treturn;\r\n\t\t\t} // not fully initialized yet or a failed value lookup\r\n\t\t\tvar disp = array.map(newValue, function(opt){\r\n\t\t\t\treturn opt.label;\r\n\t\t\t});\r\n\t\t\tthis._setDisplay(this.multiple ? disp : disp[0]);\r\n\t\t\tthis.inherited(arguments, [ this.multiple ? val : val[0], priorityChange ]);\r\n\t\t\tthis._updateSelection();\r\n\t\t},\r\n\r\n\t\t_getDisplayedValueAttr: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\treturns the displayed value of the widget\r\n\t\t\tvar ret = array.map([].concat(this.get('selectedOptions')), function(v){\r\n\t\t\t\tif(v && \"label\" in v){\r\n\t\t\t\t\treturn v.label;\r\n\t\t\t\t}else if(v){\r\n\t\t\t\t\treturn v.value;\r\n\t\t\t\t}\r\n\t\t\t\treturn null;\r\n\t\t\t}, this);\r\n\t\t\treturn this.multiple ? ret : ret[0];\r\n\t\t},\r\n\r\n\t\t_setDisplayedValueAttr: function(label){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSets the displayed value of the widget\r\n\t\t\tthis.set('value', this.getOptions(typeof label == \"string\" ? { label: label } : label));\r\n\t\t},\r\n\r\n\t\t_loadChildren: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tLoads the children represented by this widget's options.\r\n\t\t\t//\t\treset the menu to make it populatable on the next click\r\n\t\t\tif(this._loadingStore){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tarray.forEach(this._getChildren(), function(child){\r\n\t\t\t\tchild.destroyRecursive();\r\n\t\t\t});\r\n\t\t\t// Add each menu item\r\n\t\t\tarray.forEach(this.options, this._addOptionItem, this);\r\n\r\n\t\t\t// Update states\r\n\t\t\tthis._updateSelection();\r\n\t\t},\r\n\r\n\t\t_updateSelection: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSets the \"selected\" class on the item for styling purposes\r\n\t\t\tthis.focusedChild = null;\r\n\t\t\tthis._set(\"value\", this._getValueFromOpts());\r\n\t\t\tvar val = [].concat(this.value);\r\n\t\t\tif(val && val[0]){\r\n\t\t\t\tvar self = this;\r\n\t\t\t\tarray.forEach(this._getChildren(), function(child){\r\n\t\t\t\t\tvar isSelected = array.some(val, function(v){\r\n\t\t\t\t\t\treturn child.option && (v === child.option.value);\r\n\t\t\t\t\t});\r\n\t\t\t\t\tif(isSelected && !self.multiple){\r\n\t\t\t\t\t\tself.focusedChild = child;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tdomClass.toggle(child.domNode, this.baseClass.replace(/\\s+|$/g, \"SelectedOption \"), isSelected);\r\n\t\t\t\t\tchild.domNode.setAttribute(\"aria-selected\", isSelected ? \"true\" : \"false\");\r\n\t\t\t\t}, this);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_getValueFromOpts: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the value of the widget by reading the options for\r\n\t\t\t//\t\tthe selected flag\r\n\t\t\tvar opts = this.getOptions() || [];\r\n\t\t\tif(!this.multiple && opts.length){\r\n\t\t\t\t// Mirror what a select does - choose the first one\r\n\t\t\t\tvar opt = array.filter(opts, function(i){\r\n\t\t\t\t\treturn i.selected;\r\n\t\t\t\t})[0];\r\n\t\t\t\tif(opt && opt.value){\r\n\t\t\t\t\treturn opt.value;\r\n\t\t\t\t}else{\r\n\t\t\t\t\topts[0].selected = true;\r\n\t\t\t\t\treturn opts[0].value;\r\n\t\t\t\t}\r\n\t\t\t}else if(this.multiple){\r\n\t\t\t\t// Set value to be the sum of all selected\r\n\t\t\t\treturn array.map(array.filter(opts, function(i){\r\n\t\t\t\t\treturn i.selected;\r\n\t\t\t\t}), function(i){\r\n\t\t\t\t\treturn i.value;\r\n\t\t\t\t}) || [];\r\n\t\t\t}\r\n\t\t\treturn \"\";\r\n\t\t},\r\n\r\n\t\t// Internal functions to call when we have store notifications come in\r\n\t\t_onNewItem: function(/*item*/ item, /*Object?*/ parentInfo){\r\n\t\t\tif(!parentInfo || !parentInfo.parent){\r\n\t\t\t\t// Only add it if we are top-level\r\n\t\t\t\tthis._addOptionForItem(item);\r\n\t\t\t}\r\n\t\t},\r\n\t\t_onDeleteItem: function(/*item*/ item){\r\n\t\t\tvar store = this.store;\r\n\t\t\tthis.removeOption({value: store.getIdentity(item) });\r\n\t\t},\r\n\t\t_onSetItem: function(/*item*/ item){\r\n\t\t\tthis.updateOption(this._getOptionObjForItem(item));\r\n\t\t},\r\n\r\n\t\t_getOptionObjForItem: function(item){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns an option object based off the given item.  The \"value\"\r\n\t\t\t//\t\tof the option item will be the identity of the item, the \"label\"\r\n\t\t\t//\t\tof the option will be the label of the item.\r\n\r\n\t\t\t// remove getLabel() call for 2.0 (it's to support the old dojo.data API)\r\n\t\t\tvar store = this.store,\r\n\t\t\t\tlabel = (this.labelAttr && this.labelAttr in item) ? item[this.labelAttr] : store.getLabel(item),\r\n\t\t\t\tvalue = (label ? store.getIdentity(item) : null);\r\n\t\t\treturn {value: value, label: label, item: item}; // __SelectOption\r\n\t\t},\r\n\r\n\t\t_addOptionForItem: function(/*item*/ item){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreates (and adds) the option for the given item\r\n\t\t\tvar store = this.store;\r\n\t\t\tif(store.isItemLoaded && !store.isItemLoaded(item)){\r\n\t\t\t\t// We are not loaded - so let's load it and add later.\r\n\t\t\t\t// Remove for 2.0 (it's the old dojo.data API)\r\n\t\t\t\tstore.loadItem({item: item, onItem: function(i){\r\n\t\t\t\t\tthis._addOptionForItem(i);\r\n\t\t\t\t},\r\n\t\t\t\t\tscope: this});\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar newOpt = this._getOptionObjForItem(item);\r\n\t\t\tthis.addOption(newOpt);\r\n\t\t},\r\n\r\n\t\tconstructor: function(params /*===== , srcNodeRef =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate the widget.\r\n\t\t\t// params: Object|null\r\n\t\t\t//\t\tHash of initialization parameters for widget, including scalar values (like title, duration etc.)\r\n\t\t\t//\t\tand functions, typically callbacks like onClick.\r\n\t\t\t//\t\tThe hash can contain any of the widget's properties, excluding read-only properties.\r\n\t\t\t// srcNodeRef: DOMNode|String?\r\n\t\t\t//\t\tIf a srcNodeRef (DOM node) is specified, replace srcNodeRef with my generated DOM tree\r\n\r\n\t\t\t//\t\tSaves off our value, if we have an initial one set so we\r\n\t\t\t//\t\tcan use it if we have a store as well (see startup())\r\n\t\t\tthis._oValue = (params || {}).value || null;\r\n\t\t\tthis._notifyConnections = [];\t// remove for 2.0\r\n\t\t},\r\n\r\n\t\tbuildRendering: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tdom.setSelectable(this.focusNode, false);\r\n\t\t},\r\n\r\n\t\t_fillContent: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tLoads our options and sets up our dropdown correctly.  We\r\n\t\t\t//\t\tdon't want any content, so we don't call any inherit chain\r\n\t\t\t//\t\tfunction.\r\n\t\t\tif(!this.options){\r\n\t\t\t\tthis.options =\r\n\t\t\t\t\tthis.srcNodeRef\r\n\t\t\t\t\t\t? query(\"> *\", this.srcNodeRef).map(\r\n\t\t\t\t\t\tfunction(node){\r\n\t\t\t\t\t\t\tif(node.getAttribute(\"type\") === \"separator\"){\r\n\t\t\t\t\t\t\t\treturn { value: \"\", label: \"\", selected: false, disabled: false };\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\t\tvalue: (node.getAttribute(\"data-\" + kernel._scopeName + \"-value\") || node.getAttribute(\"value\")),\r\n\t\t\t\t\t\t\t\tlabel: String(node.innerHTML),\r\n\t\t\t\t\t\t\t\t// FIXME: disabled and selected are not valid on complex markup children (which is why we're\r\n\t\t\t\t\t\t\t\t// looking for data-dojo-value above.  perhaps we should data-dojo-props=\"\" this whole thing?)\r\n\t\t\t\t\t\t\t\t// decide before 1.6\r\n\t\t\t\t\t\t\t\tselected: node.getAttribute(\"selected\") || false,\r\n\t\t\t\t\t\t\t\tdisabled: node.getAttribute(\"disabled\") || false\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t},\r\n\t\t\t\t\t\tthis)\r\n\t\t\t\t\t\t: [];\r\n\t\t\t}\r\n\t\t\tif(!this.value){\r\n\t\t\t\tthis._set(\"value\", this._getValueFromOpts());\r\n\t\t\t}else if(this.multiple && typeof this.value == \"string\"){\r\n\t\t\t\tthis._set(\"value\", this.value.split(\",\"));\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tpostCreate: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tsets up our event handling that we need for functioning\r\n\t\t\t//\t\tas a select\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\t// Make our event connections for updating state\r\n\t\t\taspect.after(this, \"onChange\", lang.hitch(this, \"_updateSelection\"));\r\n\r\n\t\t\t//\t\tConnects in our store, if we have one defined\r\n\t\t\tvar store = this.store;\r\n\t\t\tif(store && (store.getIdentity || store.getFeatures()[\"dojo.data.api.Identity\"])){\r\n\t\t\t\t// Temporarily set our store to null so that it will get set\r\n\t\t\t\t// and connected appropriately\r\n\t\t\t\tthis.store = null;\r\n\t\t\t\tthis._deprecatedSetStore(store, this._oValue, {query: this.query, queryOptions: this.queryOptions});\r\n\t\t\t}\r\n\r\n\t\t\tthis._storeInitialized = true;\r\n\t\t},\r\n\r\n\t\tstartup: function(){\r\n\t\t\t// summary:\r\n\t\t\tthis._loadChildren();\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tdestroy: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tClean up our connections\r\n\r\n\t\t\tvar h;\r\n\t\t\twhile((h = this._notifyConnections.pop())){\r\n\t\t\t\th.remove();\r\n\t\t\t}\r\n\r\n\t\t\t// Cancel listener for store updates\r\n\t\t\tif(this._queryRes && this._queryRes.close){\r\n\t\t\t\tthis._queryRes.close();\r\n\t\t\t}\r\n\r\n\t\t\t// Cancel listener for updates to new (dojo.store) store\r\n\t\t\tif(this._observeHandle && this._observeHandle.remove){\r\n\t\t\t\tthis._observeHandle.remove();\r\n\t\t\t\tthis._observeHandle = null;\r\n\t\t\t}\r\n\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\t_addOptionItem: function(/*__SelectOption*/ /*===== option =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUser-overridable function which, for the given option, adds an\r\n\t\t\t//\t\titem to the select.  If the option doesn't have a value, then a\r\n\t\t\t//\t\tseparator is added in that place.  Make sure to store the option\r\n\t\t\t//\t\tin the created option widget.\r\n\t\t},\r\n\r\n\t\t_removeOptionItem: function(/*__SelectOption*/ /*===== option =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUser-overridable function which, for the given option, removes\r\n\t\t\t//\t\tits item from the select.\r\n\t\t},\r\n\r\n\t\t_setDisplay: function(/*String or String[]*/ /*===== newDisplay =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverridable function which will set the display for the\r\n\t\t\t//\t\twidget.  newDisplay is either a string (in the case of\r\n\t\t\t//\t\tsingle selects) or array of strings (in the case of multi-selects)\r\n\t\t},\r\n\r\n\t\t_getChildren: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverridable function to return the children that this widget contains.\r\n\t\t\treturn [];\r\n\t\t},\r\n\r\n\t\t_getSelectedOptionsAttr: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\thooks into this.attr to provide a mechanism for getting the\r\n\t\t\t//\t\toption items for the current value of the widget.\r\n\t\t\treturn this.getOptions({ selected: true });\r\n\t\t},\r\n\r\n\t\t_pseudoLoadChildren: function(/*item[]*/ /*===== items =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\ta function that will \"fake\" loading children, if needed, and\r\n\t\t\t//\t\tif we have set to not load children until the widget opens.\r\n\t\t\t// items:\r\n\t\t\t//\t\tAn array of items that will be loaded, when needed\r\n\t\t},\r\n\r\n\t\tonSetStore: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\ta function that can be connected to in order to receive a\r\n\t\t\t//\t\tnotification that the store has finished loading and all options\r\n\t\t\t//\t\tfrom that store are available\r\n\t\t}\r\n\t});\r\n\r\n\t/*=====\r\n\t_FormSelectWidget.__SelectOption = __SelectOption;\r\n\t=====*/\r\n\r\n\treturn _FormSelectWidget;\r\n});\r\n"]}