{"version":3,"sources":["form/NumberSpinner.js"],"names":["define","declare","keys","_Spinner","NumberTextBox","Mixin","baseClass","adjust","val","delta","tc","this","constraints","v","isNaN","gotMax","max","gotMin","min","newval","_onKeyDown","e","disabled","readOnly","keyCode","HOME","END","ctrlKey","altKey","metaKey","get","value","_setValueAttr","stopPropagation","preventDefault"],"mappings":";;;;;;;AAAAA,QACC,qBACA,YACA,aACA,mBACE,SAASC,EAASC,EAAMC,EAAUC,GAKpC,OAAOH,EAAQ,4BAA6BE,EAAUC,EAAcC,QAanEC,UAAW,+CAEXC,OAAQ,SAAoBC,EAAgBC,GAM3C,IAAIC,EAAKC,KAAKC,YACbC,EAAIC,MAAMN,GACVO,GAAUD,MAAMJ,EAAGM,KACnBC,GAAUH,MAAMJ,EAAGQ,KAEjBL,GAAc,GAATJ,IACPD,EAAOC,EAAQ,EACdQ,EAASP,EAAGQ,IAAMH,EAASL,EAAGM,IAAM,EACpCD,EAASJ,KAAKC,YAAYI,IAAMC,EAASP,EAAGQ,IAAM,GAGpD,IAAIC,EAASX,EAAMC,EACnB,OAAGI,GAAKC,MAAMK,GACNX,GAELO,GAAWI,EAAST,EAAGM,MACzBG,EAAST,EAAGM,KAEVC,GAAWE,EAAST,EAAGQ,MACzBC,EAAST,EAAGQ,KAENC,IAGRC,WAAY,SAASC,GACpB,KAAGV,KAAKW,UAAYX,KAAKY,UAGrBF,EAAEG,SAAWtB,EAAKuB,MAAQJ,EAAEG,SAAWtB,EAAKwB,KAAUL,EAAEM,SAAWN,EAAEO,QAAUP,EAAEQ,cACrD,IAArBlB,KAAKmB,IAAI,UAAiF,CACpG,IAAIC,EAAQpB,KAAKC,YAAaS,EAAEG,SAAWtB,EAAKuB,KAAO,MAAQ,OAC5C,iBAATM,GACTpB,KAAKqB,cAAcD,GAAO,GAG3BV,EAAEY,kBACFZ,EAAEa","file":"../../form/NumberSpinner.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/keys\", // keys.END keys.HOME\r\n\t\"./_Spinner\",\r\n\t\"./NumberTextBox\"\r\n], function(declare, keys, _Spinner, NumberTextBox){\r\n\r\n\t// module:\r\n\t//\t\tdijit/form/NumberSpinner\r\n\r\n\treturn declare(\"dijit.form.NumberSpinner\", [_Spinner, NumberTextBox.Mixin], {\r\n\t\t// summary:\r\n\t\t//\t\tExtends NumberTextBox to add up/down arrows and pageup/pagedown for incremental change to the value\r\n\t\t//\r\n\t\t// description:\r\n\t\t//\t\tA `dijit/form/NumberTextBox` extension to provide keyboard accessible value selection\r\n\t\t//\t\tas well as icons for spinning direction. When using the keyboard, the typematic rules\r\n\t\t//\t\tapply, meaning holding the key will gradually increase or decrease the value and\r\n\t\t//\t\taccelerate.\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t| new NumberSpinner({ constraints:{ max:300, min:100 }}, \"someInput\");\r\n\r\n\t\tbaseClass: \"dijitTextBox dijitSpinner dijitNumberTextBox\",\r\n\r\n\t\tadjust: function(/*Object*/ val, /*Number*/ delta){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tChange Number val by the given amount\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\r\n\t\t\tvar tc = this.constraints,\r\n\t\t\t\tv = isNaN(val),\r\n\t\t\t\tgotMax = !isNaN(tc.max),\r\n\t\t\t\tgotMin = !isNaN(tc.min)\r\n\t\t\t\t;\r\n\t\t\tif(v && delta != 0){ // blank or invalid value and they want to spin, so create defaults\r\n\t\t\t\tval = (delta > 0) ?\r\n\t\t\t\t\tgotMin ? tc.min : gotMax ? tc.max : 0 :\r\n\t\t\t\t\tgotMax ? this.constraints.max : gotMin ? tc.min : 0\r\n\t\t\t\t;\r\n\t\t\t}\r\n\t\t\tvar newval = val + delta;\r\n\t\t\tif(v || isNaN(newval)){\r\n\t\t\t\treturn val;\r\n\t\t\t}\r\n\t\t\tif(gotMax && (newval > tc.max)){\r\n\t\t\t\tnewval = tc.max;\r\n\t\t\t}\r\n\t\t\tif(gotMin && (newval < tc.min)){\r\n\t\t\t\tnewval = tc.min;\r\n\t\t\t}\r\n\t\t\treturn newval;\r\n\t\t},\r\n\r\n\t\t_onKeyDown: function(e){\r\n\t\t\tif(this.disabled || this.readOnly){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif((e.keyCode == keys.HOME || e.keyCode == keys.END) && !(e.ctrlKey || e.altKey || e.metaKey)\r\n\t\t\t\t&& typeof this.get('value') != 'undefined' /* gibberish, so HOME and END are default editing keys*/){\r\n\t\t\t\tvar value = this.constraints[(e.keyCode == keys.HOME ? \"min\" : \"max\")];\r\n\t\t\t\tif(typeof value == \"number\"){\r\n\t\t\t\t\tthis._setValueAttr(value, false);\r\n\t\t\t\t}\r\n\t\t\t\t// eat home or end key whether we change the value or not\r\n\t\t\t\te.stopPropagation();\r\n\t\t\t\te.preventDefault();\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n});\r\n"]}