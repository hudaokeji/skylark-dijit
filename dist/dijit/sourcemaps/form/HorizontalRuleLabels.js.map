{"version":3,"sources":["form/HorizontalRuleLabels.js"],"names":["define","declare","has","number","query","lang","HorizontalRule","HorizontalRuleLabels","templateString","labelStyle","labels","numericMargin","minimum","maximum","constraints","pattern","_positionPrefix","_labelPrefix","_suffix","_calcPosition","pos","_genHTML","ndx","label","this","_positionSuffix","_genDirectionHTML","getLabels","length","srcNodeRef","map","node","String","innerHTML","count","start","inc","i","push","format","postMixInProperties","inherited","arguments","extend","_setTextDirAttr","textDir","_set","domNode","forEach","hitch","labelNode","style","direction","getTextDir","innerText","textContent"],"mappings":";;;;;;;AAAAA,QACC,qBACA,WACA,cACA,aACA,kBACA,oBACE,SAASC,EAASC,EAAKC,EAAQC,EAAOC,EAAMC,GAK9C,IAAIC,EAAuBN,EAAQ,kCAAmCK,GAIrEE,eAAgB,gHAIhBC,WAAY,GAKZC,UAIAC,cAAe,EAIfC,QAAS,EAITC,QAAS,EAITC,aAAcC,QAAS,MAEvBC,gBAAiB,6EACjBC,aAAc,iDACdC,QAAS,eAETC,cAAe,SAASC,GAKvB,OAAOA,GAGRC,SAAU,SAASD,EAAKE,GACvB,IAAIC,EAAQC,KAAKd,OAAOY,GACxB,OAAOE,KAAKR,gBAAkBQ,KAAKL,cAAcC,GAAOI,KAAKC,gBAAkBD,KAAKf,WACnFe,KAAKE,kBAAkBH,GACvBC,KAAKP,aAAeM,EAAQC,KAAKN,SAGnCQ,kBAAmB,SAASH,GAE3B,MAAO,IAGRI,UAAW,WAQV,IAAIjB,EAASc,KAAKd,OAQlB,IAPIA,EAAOkB,QAAUJ,KAAKK,aAEzBnB,EAASN,EAAM,OAAQoB,KAAKK,YAAYC,IAAI,SAASC,GACpD,OAAOC,OAAOD,EAAKE,eAIjBvB,EAAOkB,QAAUJ,KAAKU,MAAQ,EAGjC,IAFA,IAAIC,EAAQX,KAAKZ,QACbwB,GAAOZ,KAAKX,QAAUsB,IAAUX,KAAKU,MAAQ,GACzCG,EAAI,EAAGA,EAAIb,KAAKU,MAAOG,IAC9B3B,EAAO4B,KAAMD,EAAIb,KAAKb,eAAiB0B,GAAMb,KAAKU,MAAQV,KAAKb,cAAkB,GAAKR,EAAOoC,OAAOJ,EAAOX,KAAKV,cAChHqB,GAASC,EAGX,OAAO1B,GAGR8B,oBAAqB,WACpBhB,KAAKiB,UAAUC,WACflB,KAAKd,OAASc,KAAKG,YACnBH,KAAKU,MAAQV,KAAKd,OAAOkB,UAuB3B,OAnBG1B,EAAI,cACNK,EAAqBoC,QACpBC,gBAAiB,SAASC,GACtBrB,KAAKqB,SAAWA,IAClBrB,KAAKsB,KAAK,UAAWD,GACrBzC,EAAM,2BAA4BoB,KAAKuB,SAASC,QAC/C3C,EAAK4C,MAAMzB,KAAM,SAAS0B,GACzBA,EAAUC,MAAMC,UAAY5B,KAAK6B,WAAWH,EAAUI,WAAaJ,EAAUK,aAAe,SAMhG7B,kBAAmB,SAASH,GAC3B,OAAQC,KAAKqB,QAAW,aAAerB,KAAK6B,WAAW9B,GAAS,IAAO,MAKnEhB","file":"../../form/HorizontalRuleLabels.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/has\",\r\n\t\"dojo/number\", // number.format\r\n\t\"dojo/query\", // query\r\n\t\"dojo/_base/lang\", // lang\r\n\t\"./HorizontalRule\"\r\n], function(declare, has, number, query, lang, HorizontalRule){\r\n\r\n\t// module:\r\n\t//\t\tdijit/form/HorizontalRuleLabels\r\n\r\n\tvar HorizontalRuleLabels = declare(\"dijit.form.HorizontalRuleLabels\", HorizontalRule, {\r\n\t\t// summary:\r\n\t\t//\t\tLabels for `dijit/form/HorizontalSlider`\r\n\r\n\t\ttemplateString: '<div class=\"dijitRuleContainer dijitRuleContainerH dijitRuleLabelsContainer dijitRuleLabelsContainerH\"></div>',\r\n\r\n\t\t// labelStyle: String\r\n\t\t//\t\tCSS style to apply to individual text labels\r\n\t\tlabelStyle: \"\",\r\n\r\n\t\t// labels: String[]?\r\n\t\t//\t\tArray of text labels to render - evenly spaced from left-to-right or bottom-to-top.\r\n\t\t//\t\tAlternately, minimum and maximum can be specified, to get numeric labels.\r\n\t\tlabels: [],\r\n\r\n\t\t// numericMargin: Integer\r\n\t\t//\t\tNumber of generated numeric labels that should be rendered as '' on the ends when labels[] are not specified\r\n\t\tnumericMargin: 0,\r\n\r\n\t\t// numericMinimum: Integer\r\n\t\t//\t\tLeftmost label value for generated numeric labels when labels[] are not specified\r\n\t\tminimum: 0,\r\n\r\n\t\t// numericMaximum: Integer\r\n\t\t//\t\tRightmost label value for generated numeric labels when labels[] are not specified\r\n\t\tmaximum: 1,\r\n\r\n\t\t// constraints: Object\r\n\t\t//\t\tpattern, places, lang, et al (see dojo.number) for generated numeric labels when labels[] are not specified\r\n\t\tconstraints: {pattern: \"#%\"},\r\n\r\n\t\t_positionPrefix: '<div class=\"dijitRuleLabelContainer dijitRuleLabelContainerH\" style=\"left:',\r\n\t\t_labelPrefix: '\"><div class=\"dijitRuleLabel dijitRuleLabelH\">',\r\n\t\t_suffix: '</div></div>',\r\n\r\n\t\t_calcPosition: function(pos){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the value to be used in HTML for the label as part of the left: attribute\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected extension\r\n\t\t\treturn pos;\r\n\t\t},\r\n\r\n\t\t_genHTML: function(pos, ndx){\r\n\t\t\tvar label = this.labels[ndx];\r\n\t\t\treturn this._positionPrefix + this._calcPosition(pos) + this._positionSuffix + this.labelStyle +\r\n\t\t\t\tthis._genDirectionHTML(label) +\r\n\t\t\t\tthis._labelPrefix + label + this._suffix;\r\n\t\t},\r\n\r\n\t\t_genDirectionHTML: function(label){\r\n\t\t\t// extension point for bidi code\r\n\t\t\treturn \"\";\r\n\t\t},\r\n\r\n\t\tgetLabels: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverridable function to return array of labels to use for this slider.\r\n\t\t\t//\t\tCan specify a getLabels() method instead of a labels[] array, or min/max attributes.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected extension\r\n\r\n\t\t\t// if the labels array was not specified directly, then see if <li> children were\r\n\t\t\tvar labels = this.labels;\r\n\t\t\tif(!labels.length && this.srcNodeRef){\r\n\t\t\t\t// for markup creation, labels are specified as child elements\r\n\t\t\t\tlabels = query(\"> li\", this.srcNodeRef).map(function(node){\r\n\t\t\t\t\treturn String(node.innerHTML);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\t// if the labels were not specified directly and not as <li> children, then calculate numeric labels\r\n\t\t\tif(!labels.length && this.count > 1){\r\n\t\t\t\tvar start = this.minimum;\r\n\t\t\t\tvar inc = (this.maximum - start) / (this.count - 1);\r\n\t\t\t\tfor(var i = 0; i < this.count; i++){\r\n\t\t\t\t\tlabels.push((i < this.numericMargin || i >= (this.count - this.numericMargin)) ? '' : number.format(start, this.constraints));\r\n\t\t\t\t\tstart += inc;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn labels;\r\n\t\t},\r\n\r\n\t\tpostMixInProperties: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis.labels = this.getLabels();\r\n\t\t\tthis.count = this.labels.length;\r\n\t\t}\r\n\t});\r\n\r\n\tif(has(\"dojo-bidi\")){\r\n\t\tHorizontalRuleLabels.extend({\r\n\t\t\t_setTextDirAttr: function(textDir){\r\n\t\t\t\tif(this.textDir != textDir){\r\n\t\t\t\t\tthis._set(\"textDir\", textDir);\r\n\t\t\t\t\tquery(\".dijitRuleLabelContainer\", this.domNode).forEach(\r\n\t\t\t\t\t\tlang.hitch(this, function(labelNode){\r\n\t\t\t\t\t\t\tlabelNode.style.direction = this.getTextDir(labelNode.innerText || labelNode.textContent || \"\");\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t);\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t_genDirectionHTML: function(label){\r\n\t\t\t\treturn (this.textDir ? (\"direction:\" + this.getTextDir(label) + \";\") : \"\")\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\treturn HorizontalRuleLabels;\r\n});\r\n"]}