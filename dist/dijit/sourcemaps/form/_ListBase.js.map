{"version":3,"sources":["form/_ListBase.js"],"names":["define","declare","on","winUtils","selected","_listConnect","eventType","callbackFuncName","self","this","own","containerNode","selector","eventTarget","target","parentNode","evt","selectFirstNode","first","firstChild","style","display","nextSibling","_setSelectedAttr","selectLastNode","last","lastChild","previousSibling","selectNextNode","selectedNode","next","selectPreviousNode","prev","node","scroll","onDeselect","scrollIntoView","onSelect","_set"],"mappings":";;;;;;;AAAAA,QACC,qBACA,UACA,eACE,SAASC,EAASC,EAAIC,GAKxB,OAAOF,EAAQ,uBAAwB,MAYtCG,SAAU,KAEVC,aAAc,SAA6BC,EAAsBC,GAehE,IAAIC,EAAOC,KACX,OAAOD,EAAKE,IAAIR,EAAGM,EAAKG,cACvBT,EAAGU,SACF,SAASC,EAAaD,EAAUE,GAC/B,OAAOD,EAAYE,YAAcD,GAElCR,GAED,SAASU,GACRR,EAAKD,GAAkBS,EAAKP,UAK/BQ,gBAAiB,WAIhB,IADA,IAAIC,EAAQT,KAAKE,cAAcQ,WACzBD,GAAgC,QAAvBA,EAAME,MAAMC,SAC1BH,EAAQA,EAAMI,YAEfb,KAAKc,iBAAiBL,GAAO,IAG9BM,eAAgB,WAIf,IADA,IAAIC,EAAOhB,KAAKE,cAAce,UACxBD,GAA8B,QAAtBA,EAAKL,MAAMC,SACxBI,EAAOA,EAAKE,gBAEblB,KAAKc,iBAAiBE,GAAM,IAG7BG,eAAgB,WAIf,IAAIC,EAAepB,KAAKL,SACxB,GAAIyB,EAEC,CAEJ,IADA,IAAIC,EAAOD,EAAaP,YAClBQ,GAA8B,QAAtBA,EAAKV,MAAMC,SACxBS,EAAOA,EAAKR,YAETQ,EAGHrB,KAAKc,iBAAiBO,GAAM,GAF5BrB,KAAKQ,uBAPNR,KAAKQ,mBAcPc,mBAAoB,WAKnB,IAAIF,EAAepB,KAAKL,SACxB,GAAIyB,EAEC,CAEJ,IADA,IAAIG,EAAOH,EAAaF,gBAClBK,GAA8B,QAAtBA,EAAKZ,MAAMC,SACxBW,EAAOA,EAAKL,gBAETK,EAGHvB,KAAKc,iBAAiBS,GAAM,GAF5BvB,KAAKe,sBAPNf,KAAKe,kBAcPD,iBAAkB,SAAqBU,EAAkBC,GAQxD,GAAGzB,KAAKL,UAAY6B,EAAK,CACxB,IAAIJ,EAAepB,KAAKL,SACrByB,GACFpB,KAAK0B,WAAWN,GAEdI,IACCC,GACF/B,EAASiC,eAAeH,GAEzBxB,KAAK4B,SAASJ,IAEfxB,KAAK6B,KAAK,WAAYL,QACdA,GACRxB,KAAK4B,SAASJ","file":"../../form/_ListBase.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/on\",\r\n\t\"dojo/window\" // winUtils.scrollIntoView\r\n], function(declare, on, winUtils){\r\n\r\n\t// module:\r\n\t//\t\tdijit/form/_ListBase\r\n\r\n\treturn declare(\"dijit.form._ListBase\", null, {\r\n\t\t// summary:\r\n\t\t//\t\tFocus-less menu to handle UI events consistently.\r\n\t\t//\t\tAbstract methods that must be defined externally:\r\n\t\t//\r\n\t\t//\t\t- onSelect: item is active (mousedown but not yet mouseup, or keyboard arrow selected but no Enter)\r\n\t\t//\t\t- onDeselect:  cancels onSelect\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\r\n\t\t// selected: DOMNode\r\n\t\t//\t\tcurrently selected node\r\n\t\tselected: null,\r\n\r\n\t\t_listConnect: function(/*String|Function*/ eventType, /*String*/ callbackFuncName){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConnects 'containerNode' to specified method of this object\r\n\t\t\t//\t\tand automatically registers for 'disconnect' on widget destroy.\r\n\t\t\t// description:\r\n\t\t\t//\t\tProvide widget-specific analog to 'connect'.\r\n\t\t\t//\t\tThe callback function is called with the normal event object,\r\n\t\t\t//\t\tbut also a second parameter is passed that indicates which list item\r\n\t\t\t//\t\tactually received the event.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tA handle that can be passed to `disconnect` in order to disconnect\r\n\t\t\t//\t\tbefore the widget is destroyed.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\r\n\t\t\tvar self = this;\r\n\t\t\treturn self.own(on(self.containerNode,\r\n\t\t\t\ton.selector(\r\n\t\t\t\t\tfunction(eventTarget, selector, target){\r\n\t\t\t\t\t\treturn eventTarget.parentNode == target;\r\n\t\t\t\t\t},\r\n\t\t\t\t\teventType\r\n\t\t\t\t),\r\n\t\t\t\tfunction(evt){\r\n\t\t\t\t\tself[callbackFuncName](evt, this);\r\n\t\t\t\t}\r\n\t\t\t));\r\n\t\t},\r\n\r\n\t\tselectFirstNode: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSelect the first displayed item in the list.\r\n\t\t\tvar first = this.containerNode.firstChild;\r\n\t\t\twhile(first && first.style.display == \"none\"){\r\n\t\t\t\tfirst = first.nextSibling;\r\n\t\t\t}\r\n\t\t\tthis._setSelectedAttr(first, true);\r\n\t\t},\r\n\r\n\t\tselectLastNode: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSelect the last displayed item in the list\r\n\t\t\tvar last = this.containerNode.lastChild;\r\n\t\t\twhile(last && last.style.display == \"none\"){\r\n\t\t\t\tlast = last.previousSibling;\r\n\t\t\t}\r\n\t\t\tthis._setSelectedAttr(last, true);\r\n\t\t},\r\n\r\n\t\tselectNextNode: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSelect the item just below the current selection.\r\n\t\t\t//\t\tIf nothing selected, select first node.\r\n\t\t\tvar selectedNode = this.selected;\r\n\t\t\tif(!selectedNode){\r\n\t\t\t\tthis.selectFirstNode();\r\n\t\t\t}else{\r\n\t\t\t\tvar next = selectedNode.nextSibling;\r\n\t\t\t\twhile(next && next.style.display == \"none\"){\r\n\t\t\t\t\tnext = next.nextSibling;\r\n\t\t\t\t}\r\n\t\t\t\tif(!next){\r\n\t\t\t\t\tthis.selectFirstNode();\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis._setSelectedAttr(next, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tselectPreviousNode: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSelect the item just above the current selection.\r\n\t\t\t//\t\tIf nothing selected, select last node (if\r\n\t\t\t//\t\tyou select Previous and try to keep scrolling up the list).\r\n\t\t\tvar selectedNode = this.selected;\r\n\t\t\tif(!selectedNode){\r\n\t\t\t\tthis.selectLastNode();\r\n\t\t\t}else{\r\n\t\t\t\tvar prev = selectedNode.previousSibling;\r\n\t\t\t\twhile(prev && prev.style.display == \"none\"){\r\n\t\t\t\t\tprev = prev.previousSibling;\r\n\t\t\t\t}\r\n\t\t\t\tif(!prev){\r\n\t\t\t\t\tthis.selectLastNode();\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis._setSelectedAttr(prev, true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_setSelectedAttr: function(/*DomNode*/ node, /*Boolean*/ scroll){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDoes the actual select.\r\n\t\t\t// node:\r\n\t\t\t//\t\tThe option to select\r\n\t\t\t// scroll:\r\n\t\t\t//\t\tIf necessary, scroll node into view.  Set to false for mouse/touch to\r\n\t\t\t//\t\tavoid jumping problems on mobile/RTL, see https://bugs.dojotoolkit.org/ticket/17739.\r\n\t\t\tif(this.selected != node){\r\n\t\t\t\tvar selectedNode = this.selected;\r\n\t\t\t\tif(selectedNode){\r\n\t\t\t\t\tthis.onDeselect(selectedNode);\r\n\t\t\t\t}\r\n\t\t\t\tif(node){\r\n\t\t\t\t\tif(scroll){\r\n\t\t\t\t\t\twinUtils.scrollIntoView(node);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.onSelect(node);\r\n\t\t\t\t}\r\n\t\t\t\tthis._set(\"selected\", node);\r\n\t\t\t}else if(node){\r\n\t\t\t\tthis.onSelect(node);\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n});\r\n"]}