{"version":3,"sources":["form/CurrencyTextBox.js"],"names":["define","currency","declare","lang","NumberTextBox","baseClass","_formatter","format","_parser","parse","_regExpGenerator","regexp","value","constraints","v","this","inherited","arguments","isNaN","test","hitch","delegate","prototype","_setConstraintsAttr","_mixInDefaults","mixin","exponent"],"mappings":";;;;;;;AAAAA,QACC,gBACA,qBACA,kBACA,mBACE,SAASC,EAAUC,EAASC,EAAMC,GAqBpC,OAAOF,EAAQ,6BAA8BE,GAc5CH,SAAU,GAUVI,UAAW,oCAGXC,WAAYL,EAASM,OAErBC,QAASP,EAASQ,MAElBC,iBAAkBT,EAASU,OAE3BF,MAAO,SAAoBG,EAAkBC,GAK5C,IAAIC,EAAIC,KAAKC,UAAUC,WAIvB,OAHGC,MAAMJ,IAAM,MAAMK,KAAKP,KACzBE,EAAIX,EAAKiB,MAAMjB,EAAKkB,SAASN,MAAQP,QAASJ,EAAckB,UAAUd,UAAY,YAA9EL,CAA2Fc,YAEzFH,GAGRS,oBAAqB,SAAoBV,IACpCA,EAAYZ,UAAYc,KAAKd,WAChCY,EAAYZ,SAAWc,KAAKd,UAE7Bc,KAAKC,UAAUC,WAAahB,EAASuB,eAAerB,EAAKsB,MAAMZ,GAAea,UAAU","file":"../../form/CurrencyTextBox.js","sourcesContent":["define([\r\n\t\"dojo/currency\", // currency._mixInDefaults currency.format currency.parse currency.regexp\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/_base/lang\", // lang.hitch\r\n\t\"./NumberTextBox\"\r\n], function(currency, declare, lang, NumberTextBox){\r\n\r\n\t// module:\r\n\t//\t\tdijit/form/CurrencyTextBox\r\n\r\n\t/*=====\r\n\tvar __Constraints = declare([NumberTextBox.__Constraints, currency.__FormatOptions, currency.__ParseOptions], {\r\n\t\t// summary:\r\n\t\t//\t\tSpecifies both the rules on valid/invalid values (minimum, maximum,\r\n\t\t//\t\tnumber of required decimal places), and also formatting options for\r\n\t\t//\t\tdisplaying the value when the field is not focused (currency symbol,\r\n\t\t//\t\tetc.)\r\n\t\t// description:\r\n\t\t//\t\tFollows the pattern of `dijit/form/NumberTextBox.__Constraints`.\r\n\t\t//\t\tIn general developers won't need to set this parameter\r\n\t\t// example:\r\n\t\t//\t\tTo ensure that the user types in the cents (for example, 1.00 instead of just 1):\r\n\t\t//\t|\t\t{fractional:true}\r\n\t});\r\n\t=====*/\r\n\r\n\treturn declare(\"dijit.form.CurrencyTextBox\", NumberTextBox, {\r\n\t\t// summary:\r\n\t\t//\t\tA validating currency textbox\r\n\t\t// description:\r\n\t\t//\t\tCurrencyTextBox is similar to `dijit/form/NumberTextBox` but has a few\r\n\t\t//\t\textra features related to currency:\r\n\t\t//\r\n\t\t//\t\t1. After specifying the currency type (american dollars, euros, etc.) it automatically\r\n\t\t//\t\t\tsets parse/format options such as how many decimal places to show.\r\n\t\t//\t\t2. The currency mark (dollar sign, euro mark, etc.) is displayed when the field is blurred\r\n\t\t//\t\t\tbut erased during editing, so that the user can just enter a plain number.\r\n\r\n\t\t// currency: [const] String\r\n\t\t//\t\tthe [ISO4217](http://en.wikipedia.org/wiki/ISO_4217) currency code, a three letter sequence like \"USD\"\r\n\t\tcurrency: \"\",\r\n\r\n\t\t/*=====\r\n\t\t// constraints: __Constraints\r\n\t\t//\t\tDespite the name, this parameter specifies both constraints on the input\r\n\t\t//\t\t(including minimum/maximum allowed values) as well as\r\n\t\t//\t\tformatting options.\r\n\t\tconstraints: {},\r\n\t\t======*/\r\n\r\n\t\tbaseClass: \"dijitTextBox dijitCurrencyTextBox\",\r\n\r\n\t\t// Override NumberTextBox._formatter to deal with currencies, ex: converts \"123.45\" to \"$123.45\"\r\n\t\t_formatter: currency.format,\r\n\r\n\t\t_parser: currency.parse,\r\n\r\n\t\t_regExpGenerator: currency.regexp,\r\n\r\n\t\tparse: function(/*String*/ value, /*Object*/ constraints){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tParses string value as a Currency, according to the constraints object\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected extension\r\n\t\t\tvar v = this.inherited(arguments);\r\n\t\t\tif(isNaN(v) && /\\d+/.test(value)){ // currency parse failed, but it could be because they are using NumberTextBox format so try its parse\r\n\t\t\t\tv = lang.hitch(lang.delegate(this, { _parser: NumberTextBox.prototype._parser }), \"inherited\")(arguments);\r\n\t\t\t}\r\n\t\t\treturn v;\r\n\t\t},\r\n\r\n\t\t_setConstraintsAttr: function(/*Object*/ constraints){\r\n\t\t\tif(!constraints.currency && this.currency){\r\n\t\t\t\tconstraints.currency = this.currency;\r\n\t\t\t}\r\n\t\t\tthis.inherited(arguments, [ currency._mixInDefaults(lang.mixin(constraints, { exponent: false })) ]); // get places\r\n\t\t}\r\n\t});\r\n});\r\n"]}