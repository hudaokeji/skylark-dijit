{"version":3,"sources":["form/MultiSelect.js"],"names":["define","array","declare","domGeometry","has","query","_FormValueWidget","MultiSelect","size","baseClass","templateString","addSelected","select","getSelected","forEach","n","this","containerNode","appendChild","domNode","scrollTop","offsetHeight","oldscroll","_set","get","filter","selected","_getValueAttr","map","value","multiple","_setMultipleAttr","val","_setValueAttr","values","orphan","option","ownerDocument","createElement","indexOf","text","originalText","inherited","arguments","invertSelection","onChange","push","_onChange","_handleOnChange","resize","setMarginBox","postCreate","enforceTextDirWithUcc","restoreOriginalText","_setTextDirAttr","textDir","_created"],"mappings":";;;;;;;AAAAA,QACC,mBACA,qBACA,oBACA,aACA,aACA,qBACA,qBACE,SAASC,EAAOC,EAASC,EAAaC,EAAKC,EAAOC,GAKpD,IAAIC,EAAcL,EAAQ,0BAA4BE,EAAI,aAAe,UAAY,IAAKE,GASzFE,KAAM,EAENC,UAAW,mBAEXC,eAAgB,0JAEhBC,YAAa,SAAoCC,GAShDA,EAAOC,cAAcC,QAAQ,SAASC,GACrCC,KAAKC,cAAcC,YAAYH,GAI/BC,KAAKG,QAAQC,UAAYJ,KAAKG,QAAQE,aAEtC,IAAIC,EAAYV,EAAOO,QAAQC,UAC/BR,EAAOO,QAAQC,UAAY,EAC3BR,EAAOO,QAAQC,UAAYE,GACzBN,MACHA,KAAKO,KAAK,QAASP,KAAKQ,IAAI,WAG7BX,YAAa,WAGZ,OAAOR,EAAM,SAAUW,KAAKC,eAAeQ,OAAO,SAASV,GAC1D,OAAOA,EAAEW,YAIXC,cAAe,WAQd,OAAO1B,EAAM2B,IAAIZ,KAAKH,cAAe,SAASE,GAC7C,OAAOA,EAAEc,SAOXC,UAAU,EACVC,iBAAkB,SAASC,KAG3BC,cAAe,SAAsBC,GAMjC9B,EAAI,WAINC,EAAM,SAAUW,KAAKC,eAAekB,SAASrB,QAAQ,SAASC,GAC7D,IAAIqB,EAASrB,EAAEsB,cAAcC,cAAc,UAC3CF,EAAOP,MAAQd,EAAEc,MACjBO,EAAOV,UAA+C,GAAnCzB,EAAMsC,QAAQL,EAAQnB,EAAEc,OAC3CO,EAAOI,KAAOzB,EAAEyB,KAChBJ,EAAOK,aAAe1B,EAAE0B,aACxBzB,KAAKC,cAAcC,YAAYkB,IAC7BpB,MAEHX,EAAM,SAAUW,KAAKC,eAAeH,QAAQ,SAASC,GACpDA,EAAEW,UAA+C,GAAnCzB,EAAMsC,QAAQL,EAAQnB,EAAEc,SAIxCb,KAAK0B,UAAUC,YAGhBC,gBAAiB,SAAsBC,GAKtC,IAAIb,KACJ3B,EAAM,SAAUW,KAAKC,eAAeH,QAAQ,SAASC,GAChDA,EAAEW,UACLM,EAAIc,KAAK/B,EAAEc,SAGbb,KAAKiB,cAAcD,KAAoB,IAAba,GAAkC,MAAZA,KAGjDE,UAAW,WACV/B,KAAKgC,gBAAgBhC,KAAKQ,IAAI,UAAU,IAIzCyB,OAAQ,SAAoBzC,GACxBA,GACFL,EAAY+C,aAAalC,KAAKG,QAASX,IAIzC2C,WAAY,WACXnC,KAAKO,KAAK,QAASP,KAAKQ,IAAI,UAC5BR,KAAK0B,UAAUC,cAkCjB,OA9BGvC,EAAI,eACNG,EAAcL,EAAQ,yBAA0BK,GAC/CI,YAAa,SAAoCC,GAChDA,EAAOC,cAAcC,QAAQ,SAASC,GACrCA,EAAEyB,KAAOxB,KAAKoC,sBAAsBpC,KAAKqC,oBAAoBtC,GAAIA,EAAEyB,OACjExB,MACHA,KAAK0B,UAAUC,YAGhBW,gBAAiB,SAASC,GAGrBvC,KAAKuC,SAAWA,GAAYvC,KAAKwC,WAAaxC,KAAKoC,wBACtDpC,KAAKO,KAAK,UAAWgC,GAErBlD,EAAM,SAAUW,KAAKC,eAAeH,QAAQ,SAASsB,GAIhDpB,KAAKwC,UAAYpB,EAAOP,QAAUO,EAAOI,OAC5CJ,EAAOP,MAAQO,EAAOI,MAGvBJ,EAAOI,KAAOxB,KAAKoC,sBAAsBhB,EAAQA,EAAOK,cAAgBL,EAAOI,OAC7ExB,WAMAT","file":"../../form/MultiSelect.js","sourcesContent":["define([\r\n\t\"dojo/_base/array\", // indexOf, map, forEach\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom-geometry\", // domGeometry.setMarginBox\r\n\t\"dojo/sniff\",\t// has(\"android\")\r\n\t\"dojo/query\", // query\r\n\t\"./_FormValueWidget\",\r\n\t\"dojo/NodeList-dom\"\t// orphan()\r\n], function(array, declare, domGeometry, has, query, _FormValueWidget){\r\n\r\n\t// module:\r\n\t//\t\tdijit/form/MultiSelect\r\n\r\n\tvar MultiSelect = declare(\"dijit.form.MultiSelect\" + (has(\"dojo-bidi\") ? \"_NoBidi\" : \"\"), _FormValueWidget, {\r\n\t\t// summary:\r\n\t\t//\t\tWidget version of a `<select multiple=multiple>` element,\r\n\t\t//\t\tfor selecting multiple options.\r\n\r\n\t\t// size: Number\r\n\t\t//\t\tNumber of elements to display on a page\r\n\t\t//\t\tNOTE: may be removed in version 2.0, since elements may have variable height;\r\n\t\t//\t\tset the size via style=\"...\" or CSS class names instead.\r\n\t\tsize: 7,\r\n\r\n\t\tbaseClass: \"dijitMultiSelect\",\r\n\r\n\t\ttemplateString: \"<select multiple='multiple' ${!nameAttrSetting} data-dojo-attach-point='containerNode,focusNode' data-dojo-attach-event='onchange: _onChange'></select>\",\r\n\r\n\t\taddSelected: function(/*dijit/form/MultiSelect*/ select){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tMove the selected nodes of a passed Select widget\r\n\t\t\t//\t\tinstance to this Select widget.\r\n\t\t\t//\r\n\t\t\t// example:\r\n\t\t\t// |\t// move all the selected values from \"bar\" to \"foo\"\r\n\t\t\t// |\tdijit.byId(\"foo\").addSelected(dijit.byId(\"bar\"));\r\n\r\n\t\t\tselect.getSelected().forEach(function(n){\r\n\t\t\t\tthis.containerNode.appendChild(n);\r\n\t\t\t\t// scroll to bottom to see item\r\n\t\t\t\t// cannot use scrollIntoView since <option> tags don't support all attributes\r\n\t\t\t\t// does not work on IE due to a bug where <select> always shows scrollTop = 0\r\n\t\t\t\tthis.domNode.scrollTop = this.domNode.offsetHeight; // overshoot will be ignored\r\n\t\t\t\t// scrolling the source select is trickier esp. on safari who forgets to change the scrollbar size\r\n\t\t\t\tvar oldscroll = select.domNode.scrollTop;\r\n\t\t\t\tselect.domNode.scrollTop = 0;\r\n\t\t\t\tselect.domNode.scrollTop = oldscroll;\r\n\t\t\t}, this);\r\n\t\t\tthis._set('value', this.get('value'));\r\n\t\t},\r\n\r\n\t\tgetSelected: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAccess the NodeList of the selected options directly\r\n\t\t\treturn query(\"option\", this.containerNode).filter(function(n){\r\n\t\t\t\treturn n.selected; // Boolean\r\n\t\t\t}); // dojo/NodeList\r\n\t\t},\r\n\r\n\t\t_getValueAttr: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHook so get('value') works.\r\n\t\t\t// description:\r\n\t\t\t//\t\tReturns an array of the selected options' values.\r\n\r\n\t\t\t// Don't call getSelect.map() because it doesn't return a real array,\r\n\t\t\t// and that messes up dojo.toJson() calls like in the Form.html test\r\n\t\t\treturn array.map(this.getSelected(), function(n){\r\n\t\t\t\treturn n.value;\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t// Set multiple so parent form widget knows that I return multiple values.\r\n\t\t// Also adding a no-op custom setter; otherwise the multiple property is applied to the <select> node\r\n\t\t// which causes problem on Android < 4.4 with all but the first selected item being deselected.\r\n\t\tmultiple: true,\r\n\t\t_setMultipleAttr: function(val){\r\n\t\t},\r\n\r\n\t\t_setValueAttr: function(/*String[]*/ values){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHook so set('value', values) works.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSet the value(s) of this Select based on passed values\r\n\r\n\t\t\tif(has(\"android\")){\r\n\t\t\t\t// Workaround bizarre Android bug where deselecting one option selects another one.\r\n\t\t\t\t// See https://code.google.com/p/android/issues/detail?id=68285.\r\n\t\t\t\t// Could use this code path for all browsers but I worry about IE memory leaks.\r\n\t\t\t\tquery(\"option\", this.containerNode).orphan().forEach(function(n){\r\n\t\t\t\t\tvar option = n.ownerDocument.createElement(\"option\");\r\n\t\t\t\t\toption.value = n.value;\r\n\t\t\t\t\toption.selected = (array.indexOf(values, n.value) != -1);\r\n\t\t\t\t\toption.text = n.text;\r\n\t\t\t\t\toption.originalText = n.originalText;\t// for bidi support, see has(\"dojo-bidi\") block below\r\n\t\t\t\t\tthis.containerNode.appendChild(option);\r\n\t\t\t\t}, this);\r\n\t\t\t}else {\r\n\t\t\t\tquery(\"option\", this.containerNode).forEach(function(n){\r\n\t\t\t\t\tn.selected = (array.indexOf(values, n.value) != -1);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tinvertSelection: function(/*Boolean?*/ onChange){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInvert the selection\r\n\t\t\t// onChange: Boolean\r\n\t\t\t//\t\tIf false, onChange is not fired.\r\n\t\t\tvar val = [];\r\n\t\t\tquery(\"option\", this.containerNode).forEach(function(n){\r\n\t\t\t\tif(!n.selected){\r\n\t\t\t\t\tval.push(n.value);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis._setValueAttr(val, !(onChange === false || onChange == null));\r\n\t\t},\r\n\r\n\t\t_onChange: function(/*Event*/){\r\n\t\t\tthis._handleOnChange(this.get('value'), true);\r\n\t\t},\r\n\r\n\t\t// for layout widgets:\r\n\t\tresize: function(/*Object*/ size){\r\n\t\t\tif(size){\r\n\t\t\t\tdomGeometry.setMarginBox(this.domNode, size);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tpostCreate: function(){\r\n\t\t\tthis._set('value', this.get('value'));\r\n\t\t\tthis.inherited(arguments);\r\n\t\t}\r\n\t});\r\n\r\n\tif(has(\"dojo-bidi\")){\r\n\t\tMultiSelect = declare(\"dijit.form.MultiSelect\", MultiSelect, {\r\n\t\t\taddSelected: function(/*dijit/form/MultiSelect*/ select){\r\n\t\t\t\tselect.getSelected().forEach(function(n){\r\n\t\t\t\t\tn.text = this.enforceTextDirWithUcc(this.restoreOriginalText(n), n.text);\r\n\t\t\t\t}, this);\r\n\t\t\t\tthis.inherited(arguments);\r\n\t\t\t},\r\n\r\n\t\t\t_setTextDirAttr: function(textDir){\r\n\t\t\t\t// to insure the code executed only when _BidiSupport loaded, and only\r\n\t\t\t\t// when there was a change in textDir\r\n\t\t\t\tif((this.textDir != textDir || !this._created) && this.enforceTextDirWithUcc){\r\n\t\t\t\t\tthis._set(\"textDir\", textDir);\r\n\r\n\t\t\t\t\tquery(\"option\", this.containerNode).forEach(function(option){\r\n\t\t\t\t\t\t// If the value wasn't defined explicitly, it the same object as\r\n\t\t\t\t\t\t// option.text. Since the option.text will be modified (by wrapping of UCC)\r\n\t\t\t\t\t\t// we want to save the original option.value for form submission.\r\n\t\t\t\t\t\tif(!this._created && option.value === option.text){\r\n\t\t\t\t\t\t\toption.value = option.text;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// apply the bidi support\r\n\t\t\t\t\t\toption.text = this.enforceTextDirWithUcc(option, option.originalText || option.text);\r\n\t\t\t\t\t}, this);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\treturn MultiSelect;\r\n});\r\n"]}