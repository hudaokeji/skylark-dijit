{"version":3,"sources":["form/_AutoCompleterMixin.js"],"names":["define","aspect","declare","domAttr","keys","lang","query","regexp","has","DataList","_TextBoxMixin","SearchMixin","AutoCompleterMixin","item","autoComplete","highlightMatch","labelAttr","labelType","maxHeight","_stopClickEvents","_getCaretPos","element","pos","selectionStart","tr","ownerDocument","selection","createRange","duplicate","ntr","createTextRange","move","setEndPoint","String","text","replace","length","e","_setCaretPos","location","parseInt","selectInputText","_setDisabledAttr","value","this","inherited","arguments","domNode","setAttribute","_onKey","evt","charCode","key","keyCode","ALT","CTRL","META","SHIFT","pw","dropDown","highlighted","_abortQuery","altKey","ctrlKey","metaKey","_opened","getHighlightedOption","PAGE_DOWN","DOWN_ARROW","PAGE_UP","UP_ARROW","_announceOption","stopPropagation","preventDefault","ENTER","nextButton","_nextSearch","previousButton","_setBlurValue","focusNode","TAB","newvalue","get","_messages","_selectOption","ESCAPE","_lastQuery","closeDropDown","_autoCompleteText","fn","caseFilter","ignoreCase","indexOf","cpos","_openResultList","results","options","wasSelected","clearResultList","start","onPage","hitch","direction","nextPage","focus","createOptions","_showResultList","highlightFirstOption","highlightLastOption","_prev_key_backspace","test","searchAttr","toString","containerNode","firstChild","nextSibling","openDropDown","loadDropDown","_startSearchAll","isLoaded","set","_lastValueReported","_handleOnChange","_refreshState","_setValueAttr","removeAttribute","_setItemAttr","priorityChange","displayedValue","store","_oldAPI","getValue","_getValueField","getIdentity","node","newValue","innerHTML","undefined","items","getAttribute","substring","_lastInput","target","_startSearch","_startSearchFromInput","popupId","id","dropDownConstructor","isString","dropDownClass","getObject","onChange","dir","textDir","postMixInProperties","srcNodeRef","params","fetchSelectedItem","valueField","postCreate","label","after","_getMenuLabelFromItem","labelFunc","doHighlight","html","find","modifiers","i","queryExpr","escapeString","_escapeHtml","RegExp","str","reset","_set","extend","_setTextDirAttr"],"mappings":"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","file":"../../form/_AutoCompleterMixin.js","sourcesContent":["define([\r\n\t\"dojo/aspect\",\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom-attr\", // domAttr.get\r\n\t\"dojo/keys\",\r\n\t\"dojo/_base/lang\", // lang.clone lang.hitch\r\n\t\"dojo/query\", // query\r\n\t\"dojo/regexp\", // regexp.escapeString\r\n\t\"dojo/sniff\", // has(\"ie\")\r\n\t\"./DataList\",\r\n\t\"./_TextBoxMixin\", // defines _TextBoxMixin.selectInputText\r\n\t\"./_SearchMixin\"\r\n], function(aspect, declare, domAttr, keys, lang, query, regexp, has, DataList, _TextBoxMixin, SearchMixin){\r\n\r\n\t// module:\r\n\t//\t\tdijit/form/_AutoCompleterMixin\r\n\r\n\tvar AutoCompleterMixin = declare(\"dijit.form._AutoCompleterMixin\", SearchMixin, {\r\n\t\t// summary:\r\n\t\t//\t\tA mixin that implements the base functionality for `dijit/form/ComboBox`/`dijit/form/FilteringSelect`\r\n\t\t// description:\r\n\t\t//\t\tAll widgets that mix in dijit/form/_AutoCompleterMixin must extend `dijit/form/_FormValueWidget`.\r\n\t\t// tags:\r\n\t\t//\t\tprotected\r\n\r\n\t\t// item: Object\r\n\t\t//\t\tThis is the item returned by the dojo/store/api/Store implementation that\r\n\t\t//\t\tprovides the data for this ComboBox, it's the currently selected item.\r\n\t\titem: null,\r\n\r\n\t\t// autoComplete: Boolean\r\n\t\t//\t\tIf user types in a partial string, and then tab out of the `<input>` box,\r\n\t\t//\t\tautomatically copy the first entry displayed in the drop down list to\r\n\t\t//\t\tthe `<input>` field\r\n\t\tautoComplete: true,\r\n\r\n\t\t// highlightMatch: String\r\n\t\t//\t\tOne of: \"first\", \"all\" or \"none\".\r\n\t\t//\r\n\t\t//\t\tIf the ComboBox/FilteringSelect opens with the search results and the searched\r\n\t\t//\t\tstring can be found, it will be highlighted.  If set to \"all\"\r\n\t\t//\t\tthen will probably want to change `queryExpr` parameter to '*${0}*'\r\n\t\t//\r\n\t\t//\t\tHighlighting is only performed when `labelType` is \"text\", so as to not\r\n\t\t//\t\tinterfere with any HTML markup an HTML label might contain.\r\n\t\thighlightMatch: \"first\",\r\n\r\n\t\t// labelAttr: String?\r\n\t\t//\t\tThe entries in the drop down list come from this attribute in the\r\n\t\t//\t\tdojo.data items.\r\n\t\t//\t\tIf not specified, the searchAttr attribute is used instead.\r\n\t\tlabelAttr: \"\",\r\n\r\n\t\t// labelType: String\r\n\t\t//\t\tSpecifies how to interpret the labelAttr in the data store items.\r\n\t\t//\t\tCan be \"html\" or \"text\".\r\n\t\tlabelType: \"text\",\r\n\r\n\t\t// Flags to _HasDropDown to limit height of drop down to make it fit in viewport\r\n\t\tmaxHeight: -1,\r\n\r\n\t\t// For backwards compatibility let onClick events propagate, even clicks on the down arrow button\r\n\t\t_stopClickEvents: false,\r\n\r\n\t\t_getCaretPos: function(/*DomNode*/ element){\r\n\t\t\t// khtml 3.5.2 has selection* methods as does webkit nightlies from 2005-06-22\r\n\t\t\tvar pos = 0;\r\n\t\t\tif(typeof(element.selectionStart) == \"number\"){\r\n\t\t\t\t// FIXME: this is totally borked on Moz < 1.3. Any recourse?\r\n\t\t\t\tpos = element.selectionStart;\r\n\t\t\t}else if(has(\"ie\")){\r\n\t\t\t\t// in the case of a mouse click in a popup being handled,\r\n\t\t\t\t// then the document.selection is not the textarea, but the popup\r\n\t\t\t\t// var r = document.selection.createRange();\r\n\t\t\t\t// hack to get IE 6 to play nice. What a POS browser.\r\n\t\t\t\tvar tr = element.ownerDocument.selection.createRange().duplicate();\r\n\t\t\t\tvar ntr = element.createTextRange();\r\n\t\t\t\ttr.move(\"character\", 0);\r\n\t\t\t\tntr.move(\"character\", 0);\r\n\t\t\t\ttry{\r\n\t\t\t\t\t// If control doesn't have focus, you get an exception.\r\n\t\t\t\t\t// Seems to happen on reverse-tab, but can also happen on tab (seems to be a race condition - only happens sometimes).\r\n\t\t\t\t\t// There appears to be no workaround for this - googled for quite a while.\r\n\t\t\t\t\tntr.setEndPoint(\"EndToEnd\", tr);\r\n\t\t\t\t\tpos = String(ntr.text).replace(/\\r/g, \"\").length;\r\n\t\t\t\t}catch(e){\r\n\t\t\t\t\t// If focus has shifted, 0 is fine for caret pos.\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn pos;\r\n\t\t},\r\n\r\n\t\t_setCaretPos: function(/*DomNode*/ element, /*Number*/ location){\r\n\t\t\tlocation = parseInt(location);\r\n\t\t\t_TextBoxMixin.selectInputText(element, location, location);\r\n\t\t},\r\n\r\n\t\t_setDisabledAttr: function(/*Boolean*/ value){\r\n\t\t\t// Additional code to set disabled state of ComboBox node.\r\n\t\t\t// Overrides _FormValueWidget._setDisabledAttr() or ValidationTextBox._setDisabledAttr().\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis.domNode.setAttribute(\"aria-disabled\", value ? \"true\" : \"false\");\r\n\t\t},\r\n\r\n\t\t_onKey: function(/*Event*/ evt){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHandles keyboard events\r\n\r\n\t\t\tif(evt.charCode >= 32){\r\n\t\t\t\treturn;\r\n\t\t\t} // alphanumeric reserved for searching\r\n\r\n\t\t\tvar key = evt.charCode || evt.keyCode;\r\n\r\n\t\t\t// except for cutting/pasting case - ctrl + x/v\r\n\t\t\tif(key == keys.ALT || key == keys.CTRL || key == keys.META || key == keys.SHIFT){\r\n\t\t\t\treturn; // throw out spurious events\r\n\t\t\t}\r\n\r\n\t\t\tvar pw = this.dropDown;\r\n\t\t\tvar highlighted = null;\r\n\t\t\tthis._abortQuery();\r\n\r\n\t\t\t// _HasDropDown will do some of the work:\r\n\t\t\t//\r\n\t\t\t//\t1. when drop down is not yet shown:\r\n\t\t\t//\t\t- if user presses the down arrow key, call loadDropDown()\r\n\t\t\t//\t2. when drop down is already displayed:\r\n\t\t\t//\t\t- on ESC key, call closeDropDown()\r\n\t\t\t//\t\t- otherwise, call dropDown.handleKey() to process the keystroke\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\tif(evt.altKey || evt.ctrlKey || evt.metaKey){\r\n\t\t\t\treturn;\r\n\t\t\t} // don't process keys with modifiers  - but we want shift+TAB\r\n\r\n\t\t\tif(this._opened){\r\n\t\t\t\thighlighted = pw.getHighlightedOption();\r\n\t\t\t}\r\n\t\t\tswitch(key){\r\n\t\t\t\tcase keys.PAGE_DOWN:\r\n\t\t\t\tcase keys.DOWN_ARROW:\r\n\t\t\t\tcase keys.PAGE_UP:\r\n\t\t\t\tcase keys.UP_ARROW:\r\n\t\t\t\t\t// Keystroke caused ComboBox_menu to move to a different item.\r\n\t\t\t\t\t// Copy new item to <input> box.\r\n\t\t\t\t\tif(this._opened){\r\n\t\t\t\t\t\tthis._announceOption(highlighted);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tevt.stopPropagation();\r\n\t\t\t\t\tevt.preventDefault();\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase keys.ENTER:\r\n\t\t\t\t\t// prevent submitting form if user presses enter. Also\r\n\t\t\t\t\t// prevent accepting the value if either Next or Previous\r\n\t\t\t\t\t// are selected\r\n\t\t\t\t\tif(highlighted){\r\n\t\t\t\t\t\t// only stop event on prev/next\r\n\t\t\t\t\t\tif(highlighted == pw.nextButton){\r\n\t\t\t\t\t\t\tthis._nextSearch(1);\r\n\t\t\t\t\t\t\t// prevent submit\r\n\t\t\t\t\t\t\tevt.stopPropagation();\r\n\t\t\t\t\t\t\tevt.preventDefault();\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}else if(highlighted == pw.previousButton){\r\n\t\t\t\t\t\t\tthis._nextSearch(-1);\r\n\t\t\t\t\t\t\t// prevent submit\r\n\t\t\t\t\t\t\tevt.stopPropagation();\r\n\t\t\t\t\t\t\tevt.preventDefault();\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// prevent submit if ENTER was to choose an item\r\n\t\t\t\t\t\tevt.stopPropagation();\r\n\t\t\t\t\t\tevt.preventDefault();\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t// Update 'value' (ex: KY) according to currently displayed text\r\n\t\t\t\t\t\tthis._setBlurValue(); // set value if needed\r\n\t\t\t\t\t\tthis._setCaretPos(this.focusNode, this.focusNode.value.length); // move cursor to end and cancel highlighting\r\n\t\t\t\t\t}\r\n\t\t\t\t// fall through\r\n\r\n\t\t\t\tcase keys.TAB:\r\n\t\t\t\t\tvar newvalue = this.get('displayedValue');\r\n\t\t\t\t\t//\tif the user had More Choices selected fall into the\r\n\t\t\t\t\t//\t_onBlur handler\r\n\t\t\t\t\tif(pw && (newvalue == pw._messages[\"previousMessage\"] || newvalue == pw._messages[\"nextMessage\"])){\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(highlighted){\r\n\t\t\t\t\t\tthis._selectOption(highlighted);\r\n\t\t\t\t\t}\r\n\t\t\t\t// fall through\r\n\r\n\t\t\t\tcase keys.ESCAPE:\r\n\t\t\t\t\tif(this._opened){\r\n\t\t\t\t\t\tthis._lastQuery = null; // in case results come back later\r\n\t\t\t\t\t\tthis.closeDropDown();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_autoCompleteText: function(/*String*/ text){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFill in the textbox with the first item from the drop down\r\n\t\t\t//\t\tlist, and highlight the characters that were\r\n\t\t\t//\t\tauto-completed. For example, if user typed \"CA\" and the\r\n\t\t\t//\t\tdrop down list appeared, the textbox would be changed to\r\n\t\t\t//\t\t\"California\" and \"ifornia\" would be highlighted.\r\n\r\n\t\t\tvar fn = this.focusNode;\r\n\r\n\t\t\t// IE7: clear selection so next highlight works all the time\r\n\t\t\t_TextBoxMixin.selectInputText(fn, fn.value.length);\r\n\t\t\t// does text autoComplete the value in the textbox?\r\n\t\t\tvar caseFilter = this.ignoreCase ? 'toLowerCase' : 'substr';\r\n\t\t\tif(text[caseFilter](0).indexOf(this.focusNode.value[caseFilter](0)) == 0){\r\n\t\t\t\tvar cpos = this.autoComplete ? this._getCaretPos(fn) : fn.value.length;\r\n\t\t\t\t// only try to extend if we added the last character at the end of the input\r\n\t\t\t\tif((cpos + 1) > fn.value.length){\r\n\t\t\t\t\t// only add to input node as we would overwrite Capitalisation of chars\r\n\t\t\t\t\t// actually, that is ok\r\n\t\t\t\t\tfn.value = text;//.substr(cpos);\r\n\t\t\t\t\t// visually highlight the autocompleted characters\r\n\t\t\t\t\t_TextBoxMixin.selectInputText(fn, cpos);\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\t// text does not autoComplete; replace the whole value and highlight\r\n\t\t\t\tfn.value = text;\r\n\t\t\t\t_TextBoxMixin.selectInputText(fn);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_openResultList: function(/*Object*/ results, /*Object*/ query, /*Object*/ options){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCallback when a search completes.\r\n\t\t\t// description:\r\n\t\t\t//\t\t1. generates drop-down list and calls _showResultList() to display it\r\n\t\t\t//\t\t2. if this result list is from user pressing \"more choices\"/\"previous choices\"\r\n\t\t\t//\t\t\tthen tell screen reader to announce new option\r\n\t\t\tvar wasSelected = this.dropDown.getHighlightedOption();\r\n\t\t\tthis.dropDown.clearResultList();\r\n\t\t\tif(!results.length && options.start == 0){ // if no results and not just the previous choices button\r\n\t\t\t\tthis.closeDropDown();\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis._nextSearch = this.dropDown.onPage = lang.hitch(this, function(direction){\r\n\t\t\t\tresults.nextPage(direction !== -1);\r\n\t\t\t\tthis.focus();\r\n\t\t\t});\r\n\r\n\t\t\t// Fill in the textbox with the first item from the drop down list,\r\n\t\t\t// and highlight the characters that were auto-completed. For\r\n\t\t\t// example, if user typed \"CA\" and the drop down list appeared, the\r\n\t\t\t// textbox would be changed to \"California\" and \"ifornia\" would be\r\n\t\t\t// highlighted.\r\n\r\n\t\t\tthis.dropDown.createOptions(\r\n\t\t\t\tresults,\r\n\t\t\t\toptions,\r\n\t\t\t\tlang.hitch(this, \"_getMenuLabelFromItem\")\r\n\t\t\t);\r\n\r\n\t\t\t// show our list (only if we have content, else nothing)\r\n\t\t\tthis._showResultList();\r\n\r\n\t\t\t// #4091:\r\n\t\t\t//\t\ttell the screen reader that the paging callback finished by\r\n\t\t\t//\t\tshouting the next choice\r\n\t\t\tif(\"direction\" in options){\r\n\t\t\t\tif(options.direction){\r\n\t\t\t\t\tthis.dropDown.highlightFirstOption();\r\n\t\t\t\t}else if(!options.direction){\r\n\t\t\t\t\tthis.dropDown.highlightLastOption();\r\n\t\t\t\t}\r\n\t\t\t\tif(wasSelected){\r\n\t\t\t\t\tthis._announceOption(this.dropDown.getHighlightedOption());\r\n\t\t\t\t}\r\n\t\t\t}else if(this.autoComplete && !this._prev_key_backspace\r\n\t\t\t\t// when the user clicks the arrow button to show the full list,\r\n\t\t\t\t// startSearch looks for \"*\".\r\n\t\t\t\t// it does not make sense to autocomplete\r\n\t\t\t\t// if they are just previewing the options available.\r\n\t\t\t\t&& !/^[*]+$/.test(query[this.searchAttr].toString())){\r\n\t\t\t\tthis._announceOption(this.dropDown.containerNode.firstChild.nextSibling); // 1st real item\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_showResultList: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDisplay the drop down if not already displayed, or if it is displayed, then\r\n\t\t\t//\t\treposition it if necessary (reposition may be necessary if drop down's height changed).\r\n\t\t\tthis.closeDropDown(true);\r\n\t\t\tthis.openDropDown();\r\n\t\t\tthis.domNode.setAttribute(\"aria-expanded\", \"true\");\r\n\t\t},\r\n\r\n\t\tloadDropDown: function(/*Function*/ /*===== callback =====*/){\r\n\t\t\t// Overrides _HasDropDown.loadDropDown().\r\n\t\t\t// This is called when user has pressed button icon or pressed the down arrow key\r\n\t\t\t// to open the drop down.\r\n\t\t\tthis._startSearchAll();\r\n\t\t},\r\n\r\n\t\tisLoaded: function(){\r\n\t\t\t// signal to _HasDropDown that it needs to call loadDropDown() to load the\r\n\t\t\t// drop down asynchronously before displaying it\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\tcloseDropDown: function(){\r\n\t\t\t// Overrides _HasDropDown.closeDropDown().  Closes the drop down (assuming that it's open).\r\n\t\t\t// This method is the callback when the user types ESC or clicking\r\n\t\t\t// the button icon while the drop down is open.  It's also called by other code.\r\n\t\t\tthis._abortQuery();\r\n\t\t\tif(this._opened){\r\n\t\t\t\tthis.inherited(arguments);\r\n\t\t\t\tthis.domNode.setAttribute(\"aria-expanded\", \"false\");\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_setBlurValue: function(){\r\n\t\t\t// if the user clicks away from the textbox OR tabs away, set the\r\n\t\t\t// value to the textbox value\r\n\t\t\t// #4617:\r\n\t\t\t//\t\tif value is now more choices or previous choices, revert\r\n\t\t\t//\t\tthe value\r\n\t\t\tvar newvalue = this.get('displayedValue');\r\n\t\t\tvar pw = this.dropDown;\r\n\t\t\tif(pw && (newvalue == pw._messages[\"previousMessage\"] || newvalue == pw._messages[\"nextMessage\"])){\r\n\t\t\t\tthis._setValueAttr(this._lastValueReported, true);\r\n\t\t\t}else if(typeof this.item == \"undefined\"){\r\n\t\t\t\t// Update 'value' (ex: KY) according to currently displayed text\r\n\t\t\t\tthis.item = null;\r\n\t\t\t\tthis.set('displayedValue', newvalue);\r\n\t\t\t}else{\r\n\t\t\t\tif(this.value != this._lastValueReported){\r\n\t\t\t\t\tthis._handleOnChange(this.value, true);\r\n\t\t\t\t}\r\n\t\t\t\tthis._refreshState();\r\n\t\t\t}\r\n\t\t\t// Remove aria-activedescendant since it may not be removed if they select with arrows then blur with mouse\r\n\t\t\tthis.focusNode.removeAttribute(\"aria-activedescendant\");\r\n\t\t},\r\n\r\n\t\t_setItemAttr: function(/*item*/ item, /*Boolean?*/ priorityChange, /*String?*/ displayedValue){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSet the displayed valued in the input box, and the hidden value\r\n\t\t\t//\t\tthat gets submitted, based on a dojo.data store item.\r\n\t\t\t// description:\r\n\t\t\t//\t\tUsers shouldn't call this function; they should be calling\r\n\t\t\t//\t\tset('item', value)\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tvar value = '';\r\n\t\t\tif(item){\r\n\t\t\t\tif(!displayedValue){\r\n\t\t\t\t\tdisplayedValue = this.store._oldAPI ? // remove getValue() for 2.0 (old dojo.data API)\r\n\t\t\t\t\t\tthis.store.getValue(item, this.searchAttr) : item[this.searchAttr];\r\n\t\t\t\t}\r\n\t\t\t\tvalue = this._getValueField() != this.searchAttr ? this.store.getIdentity(item) : displayedValue;\r\n\t\t\t}\r\n\t\t\tthis.set('value', value, priorityChange, displayedValue, item);\r\n\t\t},\r\n\r\n\t\t_announceOption: function(/*Node*/ node){\r\n\t\t\t// summary:\r\n\t\t\t//\t\ta11y code that puts the highlighted option in the textbox.\r\n\t\t\t//\t\tThis way screen readers will know what is happening in the\r\n\t\t\t//\t\tmenu.\r\n\r\n\t\t\tif(!node){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\t// pull the text value from the item attached to the DOM node\r\n\t\t\tvar newValue;\r\n\t\t\tif(node == this.dropDown.nextButton ||\r\n\t\t\t\tnode == this.dropDown.previousButton){\r\n\t\t\t\tnewValue = node.innerHTML;\r\n\t\t\t\tthis.item = undefined;\r\n\t\t\t\tthis.value = '';\r\n\t\t\t}else{\r\n\t\t\t\tvar item = this.dropDown.items[node.getAttribute(\"item\")];\r\n\t\t\t\tnewValue = (this.store._oldAPI ? // remove getValue() for 2.0 (old dojo.data API)\r\n\t\t\t\t\tthis.store.getValue(item, this.searchAttr) : item[this.searchAttr]).toString();\r\n\t\t\t\tthis.set('item', item, false, newValue);\r\n\t\t\t}\r\n\t\t\t// get the text that the user manually entered (cut off autocompleted text)\r\n\t\t\tthis.focusNode.value = this.focusNode.value.substring(0, this._lastInput.length);\r\n\t\t\t// set up ARIA activedescendant\r\n\t\t\tthis.focusNode.setAttribute(\"aria-activedescendant\", domAttr.get(node, \"id\"));\r\n\t\t\t// autocomplete the rest of the option to announce change\r\n\t\t\tthis._autoCompleteText(newValue);\r\n\t\t},\r\n\r\n\t\t_selectOption: function(/*DomNode*/ target){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tMenu callback function, called when an item in the menu is selected.\r\n\t\t\tthis.closeDropDown();\r\n\t\t\tif(target){\r\n\t\t\t\tthis._announceOption(target);\r\n\t\t\t}\r\n\t\t\tthis._setCaretPos(this.focusNode, this.focusNode.value.length);\r\n\t\t\tthis._handleOnChange(this.value, true);\r\n\t\t\t// Remove aria-activedescendant since the drop down is no loner visible\r\n\t\t\t// after closeDropDown() but _announceOption() adds it back in\r\n\t\t\tthis.focusNode.removeAttribute(\"aria-activedescendant\");\r\n\t\t},\r\n\r\n\t\t_startSearchAll: function(){\r\n\t\t\tthis._startSearch('');\r\n\t\t},\r\n\r\n\t\t_startSearchFromInput: function(){\r\n\t\t\tthis.item = undefined; // undefined means item needs to be set\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\t_startSearch: function(/*String*/ key){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tStarts a search for elements matching key (key==\"\" means to return all items),\r\n\t\t\t//\t\tand calls _openResultList() when the search completes, to display the results.\r\n\t\t\tif(!this.dropDown){\r\n\t\t\t\tvar popupId = this.id + \"_popup\",\r\n\t\t\t\t\tdropDownConstructor = lang.isString(this.dropDownClass) ?\r\n\t\t\t\t\t\tlang.getObject(this.dropDownClass, false) : this.dropDownClass;\r\n\t\t\t\tthis.dropDown = new dropDownConstructor({\r\n\t\t\t\t\tonChange: lang.hitch(this, this._selectOption),\r\n\t\t\t\t\tid: popupId,\r\n\t\t\t\t\tdir: this.dir,\r\n\t\t\t\t\ttextDir: this.textDir\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tthis._lastInput = key; // Store exactly what was entered by the user.\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\t_getValueField: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHelper for postMixInProperties() to set this.value based on data inlined into the markup.\r\n\t\t\t//\t\tReturns the attribute name in the item (in dijit/form/_ComboBoxDataStore) to use as the value.\r\n\t\t\treturn this.searchAttr;\r\n\t\t},\r\n\r\n\t\t//////////// INITIALIZATION METHODS ///////////////////////////////////////\r\n\r\n\t\tpostMixInProperties: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tif(!this.store && this.srcNodeRef){\r\n\t\t\t\tvar srcNodeRef = this.srcNodeRef;\r\n\t\t\t\t// if user didn't specify store, then assume there are option tags\r\n\t\t\t\tthis.store = new DataList({}, srcNodeRef);\r\n\r\n\t\t\t\t// if there is no value set and there is an option list, set\r\n\t\t\t\t// the value to the first value to be consistent with native Select\r\n\t\t\t\t// Firefox and Safari set value\r\n\t\t\t\t// IE6 and Opera set selectedIndex, which is automatically set\r\n\t\t\t\t// by the selected attribute of an option tag\r\n\t\t\t\t// IE6 does not set value, Opera sets value = selectedIndex\r\n\t\t\t\tif(!(\"value\" in this.params)){\r\n\t\t\t\t\tvar item = (this.item = this.store.fetchSelectedItem());\r\n\t\t\t\t\tif(item){\r\n\t\t\t\t\t\tvar valueField = this._getValueField();\r\n\t\t\t\t\t\t// remove getValue() for 2.0 (old dojo.data API)\r\n\t\t\t\t\t\tthis.value = this.store._oldAPI ? this.store.getValue(item, valueField) : item[valueField];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tpostCreate: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSubclasses must call this method from their postCreate() methods\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\r\n\t\t\t// find any associated label element and add to ComboBox node.\r\n\t\t\tvar label = query('label[for=\"' + this.id + '\"]');\r\n\t\t\tif(label.length){\r\n\t\t\t\tif(!label[0].id){\r\n\t\t\t\t\tlabel[0].id = this.id + \"_label\";\r\n\t\t\t\t}\r\n\t\t\t\tthis.domNode.setAttribute(\"aria-labelledby\", label[0].id);\r\n\r\n\t\t\t}\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\taspect.after(this, \"onSearch\", lang.hitch(this, \"_openResultList\"), true);\r\n\t\t},\r\n\r\n\t\t_getMenuLabelFromItem: function(/*Item*/ item){\r\n\t\t\tvar label = this.labelFunc(item, this.store),\r\n\t\t\t\tlabelType = this.labelType;\r\n\t\t\t// If labelType is not \"text\" we don't want to screw any markup ot whatever.\r\n\t\t\tif(this.highlightMatch != \"none\" && this.labelType == \"text\" && this._lastInput){\r\n\t\t\t\tlabel = this.doHighlight(label, this._lastInput);\r\n\t\t\t\tlabelType = \"html\";\r\n\t\t\t}\r\n\t\t\treturn {html: labelType == \"html\", label: label};\r\n\t\t},\r\n\r\n\t\tdoHighlight: function(/*String*/ label, /*String*/ find){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHighlights the string entered by the user in the menu.  By default this\r\n\t\t\t//\t\thighlights the first occurrence found. Override this method\r\n\t\t\t//\t\tto implement your custom highlighting.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\r\n\t\t\tvar\r\n\t\t\t// Add (g)lobal modifier when this.highlightMatch == \"all\" and (i)gnorecase when this.ignoreCase == true\r\n\t\t\t\tmodifiers = (this.ignoreCase ? \"i\" : \"\") + (this.highlightMatch == \"all\" ? \"g\" : \"\"),\r\n\t\t\t\ti = this.queryExpr.indexOf(\"${0}\");\r\n\t\t\tfind = regexp.escapeString(find); // escape regexp special chars\r\n\t\t\t//If < appears in label, and user presses t, we don't want to highlight the t in the escaped \"&lt;\"\r\n\t\t\t//first find out every occurrences of \"find\", wrap each occurrence in a pair of \"\\uFFFF\" characters (which\r\n\t\t\t//should not appear in any string). then html escape the whole string, and replace '\\uFFFF\" with the\r\n\t\t\t//HTML highlight markup.\r\n\t\t\treturn this._escapeHtml(label.replace(\r\n\t\t\t\tnew RegExp((i == 0 ? \"^\" : \"\") + \"(\" + find + \")\" + (i == (this.queryExpr.length - 4) ? \"$\" : \"\"), modifiers),\r\n\t\t\t\t'\\uFFFF$1\\uFFFF')).replace(\r\n\t\t\t\t/\\uFFFF([^\\uFFFF]+)\\uFFFF/g, '<span class=\"dijitComboBoxHighlightMatch\">$1</span>'\r\n\t\t\t); // returns String, (almost) valid HTML (entities encoded)\r\n\t\t},\r\n\r\n\t\t_escapeHtml: function(/*String*/ str){\r\n\t\t\t// TODO Should become dojo.html.entities(), when exists use instead\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdds escape sequences for special characters in XML: `&<>\"'`\r\n\t\t\tstr = String(str).replace(/&/gm, \"&amp;\").replace(/</gm, \"&lt;\")\r\n\t\t\t\t.replace(/>/gm, \"&gt;\").replace(/\"/gm, \"&quot;\"); //balance\"\r\n\t\t\treturn str; // string\r\n\t\t},\r\n\r\n\t\treset: function(){\r\n\t\t\t// Overrides the _FormWidget.reset().\r\n\t\t\t// Additionally reset the .item (to clean up).\r\n\t\t\tthis.item = null;\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tlabelFunc: function(item, store){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tComputes the label to display based on the dojo.data store item.\r\n\t\t\t// item: Object\r\n\t\t\t//\t\tThe item from the store\r\n\t\t\t// store: dojo/store/api/Store\r\n\t\t\t//\t\tThe store.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tThe label that the ComboBox should display\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\r\n\t\t\t// Use toString() because XMLStore returns an XMLItem whereas this\r\n\t\t\t// method is expected to return a String (#9354).\r\n\t\t\t// Remove getValue() for 2.0 (old dojo.data API)\r\n\t\t\treturn (store._oldAPI ? store.getValue(item, this.labelAttr || this.searchAttr) :\r\n\t\t\t\titem[this.labelAttr || this.searchAttr]).toString(); // String\r\n\t\t},\r\n\r\n\t\t_setValueAttr: function(/*String*/ value, /*Boolean?*/ priorityChange, /*String?*/ displayedValue, /*item?*/ item){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHook so set('value', value) works.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSets the value of the select.\r\n\t\t\tthis._set(\"item\", item || null); // value not looked up in store\r\n\t\t\tif(value == null /* or undefined */){\r\n\t\t\t\tvalue = '';\r\n\t\t\t} // null translates to blank\r\n\t\t\tthis.inherited(arguments);\r\n\t\t}\r\n\t});\r\n\r\n\tif(has(\"dojo-bidi\")){\r\n\t\tAutoCompleterMixin.extend({\r\n\t\t\t_setTextDirAttr: function(/*String*/ textDir){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tSetter for textDir, needed for the dropDown's textDir update.\r\n\t\t\t\t// description:\r\n\t\t\t\t//\t\tUsers shouldn't call this function; they should be calling\r\n\t\t\t\t//\t\tset('textDir', value)\r\n\t\t\t\t// tags:\r\n\t\t\t\t//\t\tprivate\r\n\t\t\t\tthis.inherited(arguments);\r\n\t\t\t\t// update the drop down also (_ComboBoxMenuMixin)\r\n\t\t\t\tif(this.dropDown){\r\n\t\t\t\t\tthis.dropDown._set(\"textDir\", textDir);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\treturn AutoCompleterMixin;\r\n});\r\n"]}