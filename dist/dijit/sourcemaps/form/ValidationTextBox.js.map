{"version":3,"sources":["form/ValidationTextBox.js"],"names":["define","declare","kernel","lang","i18n","TextBox","Tooltip","template","ValidationTextBox","templateString","required","promptMessage","invalidMessage","missingMessage","message","constraints","pattern","regExp","regExpGen","state","tooltipPosition","_deprecateRegExp","attr","value","prototype","deprecated","this","id","set","_setRegExpGenAttr","newFcn","_set","_computeRegexp","_setRegExpAttr","_setValueAttr","inherited","arguments","_refreshState","validator","RegExp","test","_isEmpty","undefined","parse","_isValidSubset","textbox","search","_partialre","isValid","get","trim","getErrorMessage","invalid","messages","missing","getPromptMessage","_maskValidSubsetError","validate","isFocused","disabled","isEmpty","isValidSubset","_hasBeenBlurred","focusNode","setAttribute","displayMessage","focused","show","domNode","isLeftToRight","hide","_created","constructor","params","clone","baseClass","startup","_setConstraintsAttr","locale","_setPatternAttr","p","call","_lastRegExp","partialre","replace","re","charAt","e","console","warn","declaredClass","postMixInProperties","getLocalization","_setDisabledAttr","_setRequiredAttr","_setMessageAttr","reset","_onBlur","destroy"],"mappings":"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","file":"../../form/ValidationTextBox.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/_base/kernel\", // kernel.deprecated\r\n\t\"dojo/_base/lang\",\r\n\t\"dojo/i18n\", // i18n.getLocalization\r\n\t\"./TextBox\",\r\n\t\"../Tooltip\",\r\n\t\"dojo/text!./templates/ValidationTextBox.html\",\r\n\t\"dojo/i18n!./nls/validate\"\r\n], function(declare, kernel, lang, i18n, TextBox, Tooltip, template){\r\n\r\n\t// module:\r\n\t//\t\tdijit/form/ValidationTextBox\r\n\r\n\r\n\t/*=====\r\n\tvar __Constraints = {\r\n\t\t// locale: String\r\n\t\t//\t\tlocale used for validation, picks up value from this widget's lang attribute\r\n\t\t// _flags_: anything\r\n\t\t//\t\tvarious flags passed to pattern function\r\n\t};\r\n\t=====*/\r\n\r\n\tvar ValidationTextBox;\r\n\treturn ValidationTextBox = declare(\"dijit.form.ValidationTextBox\", TextBox, {\r\n\t\t// summary:\r\n\t\t//\t\tBase class for textbox widgets with the ability to validate content of various types and provide user feedback.\r\n\r\n\t\ttemplateString: template,\r\n\r\n\t\t// required: Boolean\r\n\t\t//\t\tUser is required to enter data into this field.\r\n\t\trequired: false,\r\n\r\n\t\t// promptMessage: String\r\n\t\t//\t\tIf defined, display this hint string immediately on focus to the textbox, if empty.\r\n\t\t//\t\tAlso displays if the textbox value is Incomplete (not yet valid but will be with additional input).\r\n\t\t//\t\tThink of this like a tooltip that tells the user what to do, not an error message\r\n\t\t//\t\tthat tells the user what they've done wrong.\r\n\t\t//\r\n\t\t//\t\tMessage disappears when user starts typing.\r\n\t\tpromptMessage: \"\",\r\n\r\n\t\t// invalidMessage: String\r\n\t\t//\t\tThe message to display if value is invalid.\r\n\t\t//\t\tThe translated string value is read from the message file by default.\r\n\t\t//\t\tSet to \"\" to use the promptMessage instead.\r\n\t\tinvalidMessage: \"$_unset_$\",\r\n\r\n\t\t// missingMessage: String\r\n\t\t//\t\tThe message to display if value is empty and the field is required.\r\n\t\t//\t\tThe translated string value is read from the message file by default.\r\n\t\t//\t\tSet to \"\" to use the invalidMessage instead.\r\n\t\tmissingMessage: \"$_unset_$\",\r\n\r\n\t\t// message: String\r\n\t\t//\t\tCurrently error/prompt message.\r\n\t\t//\t\tWhen using the default tooltip implementation, this will only be\r\n\t\t//\t\tdisplayed when the field is focused.\r\n\t\tmessage: \"\",\r\n\r\n\t\t// constraints: __Constraints\r\n\t\t//\t\tuser-defined object needed to pass parameters to the validator functions\r\n\t\tconstraints: {},\r\n\r\n\t\t// pattern: [extension protected] String|Function(constraints) returning a string.\r\n\t\t//\t\tThis defines the regular expression used to validate the input.\r\n\t\t//\t\tDo not add leading ^ or $ characters since the widget adds these.\r\n\t\t//\t\tA function may be used to generate a valid pattern when dependent on constraints or other runtime factors.\r\n\t\t//\t\tset('pattern', String|Function).\r\n\t\tpattern: \".*\",\r\n\r\n\t\t// regExp: Deprecated [extension protected] String.  Use \"pattern\" instead.\r\n\t\tregExp: \"\",\r\n\r\n\t\tregExpGen: function(/*__Constraints*/ /*===== constraints =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDeprecated.  Use set('pattern', Function) instead.\r\n\t\t},\r\n\r\n\t\t// state: [readonly] String\r\n\t\t//\t\tShows current state (ie, validation result) of input (\"\"=Normal, Incomplete, or Error)\r\n\t\tstate: \"\",\r\n\r\n\t\t// tooltipPosition: String[]\r\n\t\t//\t\tSee description of `dijit/Tooltip.defaultPosition` for details on this parameter.\r\n\t\ttooltipPosition: [],\r\n\r\n\t\t_deprecateRegExp: function(attr, value){\r\n\t\t\tif(value != ValidationTextBox.prototype[attr]){\r\n\t\t\t\tkernel.deprecated(\"ValidationTextBox id=\"+this.id+\", set('\" + attr + \"', ...) is deprecated.  Use set('pattern', ...) instead.\", \"\", \"2.0\");\r\n\t\t\t\tthis.set('pattern', value);\r\n\t\t\t}\r\n\t\t},\r\n\t\t_setRegExpGenAttr: function(/*Function*/ newFcn){\r\n\t\t\tthis._deprecateRegExp(\"regExpGen\", newFcn);\r\n\t\t\tthis._set(\"regExpGen\", this._computeRegexp); // backward compat with this.regExpGen(this.constraints)\r\n\t\t},\r\n\t\t_setRegExpAttr: function(/*String*/ value){\r\n\t\t\tthis._deprecateRegExp(\"regExp\", value);\r\n\t\t},\r\n\r\n\t\t_setValueAttr: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHook so set('value', ...) works.\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis._refreshState();\r\n\t\t},\r\n\r\n\t\tvalidator: function(/*anything*/ value, /*__Constraints*/ constraints){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverridable function used to validate the text input against the regular expression.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t\treturn (new RegExp(\"^(?:\" + this._computeRegexp(constraints) + \")\"+(this.required?\"\":\"?\")+\"$\")).test(value) &&\r\n\t\t\t\t(!this.required || !this._isEmpty(value)) &&\r\n\t\t\t\t(this._isEmpty(value) || this.parse(value, constraints) !== undefined); // Boolean\r\n\t\t},\r\n\r\n\t\t_isValidSubset: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns true if the value is either already valid or could be made valid by appending characters.\r\n\t\t\t//\t\tThis is used for validation while the user [may be] still typing.\r\n\t\t\treturn this.textbox.value.search(this._partialre) == 0;\r\n\t\t},\r\n\r\n\t\tisValid: function(/*Boolean*/ /*===== isFocused =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTests if value is valid.\r\n\t\t\t//\t\tCan override with your own routine in a subclass.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t\treturn this.validator(this.textbox.value, this.get('constraints'));\r\n\t\t},\r\n\r\n\t\t_isEmpty: function(value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tChecks for whitespace\r\n\t\t\treturn (this.trim ? /^\\s*$/ : /^$/).test(value); // Boolean\r\n\t\t},\r\n\r\n\t\tgetErrorMessage: function(/*Boolean*/ /*===== isFocused =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturn an error message to show if appropriate\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t\tvar invalid = this.invalidMessage == \"$_unset_$\" ? this.messages.invalidMessage :\r\n\t\t\t\t!this.invalidMessage ? this.promptMessage : this.invalidMessage;\r\n\t\t\tvar missing = this.missingMessage == \"$_unset_$\" ? this.messages.missingMessage :\r\n\t\t\t\t!this.missingMessage ? invalid : this.missingMessage;\r\n\t\t\treturn (this.required && this._isEmpty(this.textbox.value)) ? missing : invalid; // String\r\n\t\t},\r\n\r\n\t\tgetPromptMessage: function(/*Boolean*/ /*===== isFocused =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturn a hint message to show when widget is first focused\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t\treturn this.promptMessage; // String\r\n\t\t},\r\n\r\n\t\t_maskValidSubsetError: true,\r\n\t\tvalidate: function(/*Boolean*/ isFocused){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled by oninit, onblur, and onkeypress.\r\n\t\t\t// description:\r\n\t\t\t//\t\tShow missing or invalid messages if appropriate, and highlight textbox field.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t\tvar message = \"\";\r\n\t\t\tvar isValid = this.disabled || this.isValid(isFocused);\r\n\t\t\tif(isValid){ this._maskValidSubsetError = true; }\r\n\t\t\tvar isEmpty = this._isEmpty(this.textbox.value);\r\n\t\t\tvar isValidSubset = !isValid && isFocused && this._isValidSubset();\r\n\t\t\tthis._set(\"state\", isValid ? \"\" : (((((!this._hasBeenBlurred || isFocused) && isEmpty) || isValidSubset) && (this._maskValidSubsetError || (isValidSubset && !this._hasBeenBlurred && isFocused))) ? \"Incomplete\" : \"Error\"));\r\n\t\t\tthis.focusNode.setAttribute(\"aria-invalid\", this.state == \"Error\" ? \"true\" : \"false\");\r\n\r\n\t\t\tif(this.state == \"Error\"){\r\n\t\t\t\tthis._maskValidSubsetError = isFocused && isValidSubset; // we want the error to show up after a blur and refocus\r\n\t\t\t\tmessage = this.getErrorMessage(isFocused);\r\n\t\t\t}else if(this.state == \"Incomplete\"){\r\n\t\t\t\tmessage = this.getPromptMessage(isFocused); // show the prompt whenever the value is not yet complete\r\n\t\t\t\tthis._maskValidSubsetError = !this._hasBeenBlurred || isFocused; // no Incomplete warnings while focused\r\n\t\t\t}else if(isEmpty){\r\n\t\t\t\tmessage = this.getPromptMessage(isFocused); // show the prompt whenever there's no error and no text\r\n\t\t\t}\r\n\t\t\tthis.set(\"message\", message);\r\n\r\n\t\t\treturn isValid;\r\n\t\t},\r\n\r\n\t\tdisplayMessage: function(/*String*/ message){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverridable method to display validation errors/hints.\r\n\t\t\t//\t\tBy default uses a tooltip.\r\n\t\t\t// tags:\r\n\t\t\t//\t\textension\r\n\t\t\tif(message && this.focused){\r\n\t\t\t\tTooltip.show(message, this.domNode, this.tooltipPosition, !this.isLeftToRight());\r\n\t\t\t}else{\r\n\t\t\t\tTooltip.hide(this.domNode);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_refreshState: function(){\r\n\t\t\t// Overrides TextBox._refreshState()\r\n\t\t\tif(this._created){ // should instead be this._started but that would require all programmatic ValidationTextBox instantiations to call startup()\r\n\t\t\t\tthis.validate(this.focused);\r\n\t\t\t}\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\t//////////// INITIALIZATION METHODS ///////////////////////////////////////\r\n\r\n\t\tconstructor: function(params /*===== , srcNodeRef =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate the widget.\r\n\t\t\t// params: Object|null\r\n\t\t\t//\t\tHash of initialization parameters for widget, including scalar values (like title, duration etc.)\r\n\t\t\t//\t\tand functions, typically callbacks like onClick.\r\n\t\t\t//\t\tThe hash can contain any of the widget's properties, excluding read-only properties.\r\n\t\t\t// srcNodeRef: DOMNode|String?\r\n\t\t\t//\t\tIf a srcNodeRef (DOM node) is specified, replace srcNodeRef with my generated DOM tree.\r\n\r\n\t\t\tthis.constraints = lang.clone(this.constraints);\r\n\t\t\tthis.baseClass += ' dijitValidationTextBox';\r\n\t\t},\r\n\r\n\t\tstartup: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis._refreshState(); // after all _set* methods have run\r\n\t\t},\r\n\r\n\t\t_setConstraintsAttr: function(/*__Constraints*/ constraints){\r\n\t\t\tif(!constraints.locale && this.lang){\r\n\t\t\t\tconstraints.locale = this.lang;\r\n\t\t\t}\r\n\t\t\tthis._set(\"constraints\", constraints);\r\n\t\t\tthis._refreshState();\r\n\t\t},\r\n\r\n\t\t_setPatternAttr: function(/*String|Function*/ pattern){\r\n\t\t\tthis._set(\"pattern\", pattern); // don't set on INPUT to avoid native HTML5 validation\r\n\t\t\tthis._refreshState();\r\n\t\t},\r\n\r\n\t\t_computeRegexp: function(/*__Constraints*/ constraints){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHook to get the current regExp and to compute the partial validation RE.\r\n\r\n\t\t\tvar p = this.pattern;\r\n\t\t\tif(typeof p == \"function\"){\r\n\t\t\t\tp = p.call(this, constraints);\r\n\t\t\t}\r\n\t\t\tif(p != this._lastRegExp){\r\n\t\t\t\tvar partialre = \"\";\r\n\t\t\t\tthis._lastRegExp = p;\r\n\t\t\t\t// parse the regexp and produce a new regexp that matches valid subsets\r\n\t\t\t\t// if the regexp is .* then there's no use in matching subsets since everything is valid\r\n\t\t\t\tif(p != \".*\"){\r\n\t\t\t\t\tp.replace(/\\\\.|\\[\\]|\\[.*?[^\\\\]{1}\\]|\\{.*?\\}|\\(\\?[=:!]|./g,\r\n\t\t\t\t\tfunction(re){\r\n\t\t\t\t\t\tswitch(re.charAt(0)){\r\n\t\t\t\t\t\t\tcase '{':\r\n\t\t\t\t\t\t\tcase '+':\r\n\t\t\t\t\t\t\tcase '?':\r\n\t\t\t\t\t\t\tcase '*':\r\n\t\t\t\t\t\t\tcase '^':\r\n\t\t\t\t\t\t\tcase '$':\r\n\t\t\t\t\t\t\tcase '|':\r\n\t\t\t\t\t\t\tcase '(':\r\n\t\t\t\t\t\t\t\tpartialre += re;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\tcase \")\":\r\n\t\t\t\t\t\t\t\tpartialre += \"|$)\";\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t default:\r\n\t\t\t\t\t\t\t\tpartialre += \"(?:\"+re+\"|$)\";\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t\ttry{ // this is needed for now since the above regexp parsing needs more test verification\r\n\t\t\t\t\t\"\".search(partialre);\r\n\t\t\t\t}catch(e){ // should never be here unless the original RE is bad or the parsing is bad\r\n\t\t\t\t\tpartialre = this.pattern;\r\n\t\t\t\t\tconsole.warn('RegExp error in ' + this.declaredClass + ': ' + this.pattern);\r\n\t\t\t\t} // should never be here unless the original RE is bad or the parsing is bad\r\n\t\t\t\tthis._partialre = \"^(?:\" + partialre + \")$\";\r\n\t\t\t}\r\n\t\t\treturn p;\r\n\t\t},\r\n\r\n\t\tpostMixInProperties: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis.messages = i18n.getLocalization(\"dijit.form\", \"validate\", this.lang);\r\n\t\t\tthis._setConstraintsAttr(this.constraints); // this needs to happen now (and later) due to codependency on _set*Attr calls attachPoints\r\n\t\t},\r\n\r\n\t\t_setDisabledAttr: function(/*Boolean*/ value){\r\n\t\t\tthis.inherited(arguments);\t// call FormValueWidget._setDisabledAttr()\r\n\t\t\tthis._refreshState();\r\n\t\t},\r\n\r\n\t\t_setRequiredAttr: function(/*Boolean*/ value){\r\n\t\t\tthis._set(\"required\", value);\r\n\t\t\tthis.focusNode.setAttribute(\"aria-required\", value);\r\n\t\t\tthis._refreshState();\r\n\t\t},\r\n\r\n\t\t_setMessageAttr: function(/*String*/ message){\r\n\t\t\tthis._set(\"message\", message);\r\n\t\t\tthis.displayMessage(message);\r\n\t\t},\r\n\r\n\t\treset:function(){\r\n\t\t\t// Overrides dijit/form/TextBox.reset() by also\r\n\t\t\t// hiding errors about partial matches\r\n\t\t\tthis._maskValidSubsetError = true;\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\t_onBlur: function(){\r\n\t\t\t// the message still exists but for back-compat, and to erase the tooltip\r\n\t\t\t// (if the message is being displayed as a tooltip), call displayMessage('')\r\n\t\t\tthis.displayMessage('');\r\n\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tdestroy: function(){\r\n\t\t\tTooltip.hide(this.domNode);\t// in case tooltip show when ValidationTextBox (or enclosing Dialog) destroyed\r\n\t\t\tthis.inherited(arguments);\r\n\t\t}\r\n\t});\r\n});\r\n"]}