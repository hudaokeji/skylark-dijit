{"version":3,"sources":["form/Form.js"],"names":["define","declare","domAttr","kernel","has","_Widget","_TemplatedMixin","_FormMixin","_ContentPaneResizeMixin","name","action","method","encType","accept-charset","accept","target","templateString","postMixInProperties","this","nameAttrSetting","inherited","arguments","execute","onExecute","_setEncTypeAttr","value","set","domNode","encoding","_set","reset","e","faux","returnValue","preventDefault","stopPropagation","currentTarget","onReset","_onReset","_onSubmit","fp","constructor","prototype","deprecated","getValues","onSubmit","isValid","submit","containerNode"],"mappings":";;;;;;;AAAAA,QACC,qBACA,gBACA,oBACA,aACA,aACA,qBACA,eACA,qCACE,SAASC,EAASC,EAASC,EAAQC,EAAKC,EAASC,EAAiBC,EAAYC,GAMhF,OAAOP,EAAQ,mBAAoBI,EAASC,EAAiBC,EAAYC,IAkBxEC,KAAM,GAINC,OAAQ,GAIRC,OAAQ,GAIRC,QAAS,GAITC,iBAAkB,GAIlBC,OAAQ,GAIRC,OAAQ,GAERC,eAAgB,wIAEhBC,oBAAqB,WAGpBC,KAAKC,gBAAkBD,KAAKT,KAAQ,SAAWS,KAAKT,KAAO,IAAO,GAClES,KAAKE,UAAUC,YAGhBC,QAAS,aAOTC,UAAW,aAOXC,gBAAiB,SAAoBC,GACpCvB,EAAQwB,IAAIR,KAAKS,QAAS,UAAWF,GAClCrB,EAAI,QACNc,KAAKS,QAAQC,SAAWH,GAEzBP,KAAKW,KAAK,UAAWJ,IAGtBK,MAAO,SAAoBC,GAM1B,IAAIC,GACHC,aAAa,EACbC,eAAgB,WACfhB,KAAKe,aAAc,GAEpBE,gBAAiB,aAEjBC,cAAeL,EAAIA,EAAEhB,OAASG,KAAKS,QACnCZ,OAAQgB,EAAIA,EAAEhB,OAASG,KAAKS,UAGD,IAAvBT,KAAKmB,QAAQL,IAAoBA,EAAKC,aAC1Cf,KAAKE,UAAUC,eAIjBgB,QAAS,WAQR,OAAO,GAGRC,SAAU,SAASP,GAIlB,OAHAb,KAAKY,MAAMC,GACXA,EAAEI,kBACFJ,EAAEG,kBACK,GAGRK,UAAW,SAASR,GACnB,IAAIS,EAAKtB,KAAKuB,YAAYC,UAEvBxB,KAAKI,SAAWkB,EAAGlB,SAAWJ,KAAKK,WAAaiB,EAAGjB,YACrDpB,EAAOwC,WAAW,gFAAiF,GAAI,OACvGzB,KAAKK,YACLL,KAAKI,QAAQJ,KAAK0B,eAEK,IAArB1B,KAAK2B,SAASd,KAChBA,EAAEI,kBACFJ,EAAEG,mBAIJW,SAAU,WAYT,OAAO3B,KAAK4B,WAGbC,OAAQ,YAGkB,IAApB7B,KAAK2B,YACT3B,KAAK8B,cAAcD","file":"../../form/Form.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom-attr\", // domAttr.set\r\n\t\"dojo/_base/kernel\", // kernel.deprecated\r\n\t\"dojo/sniff\", // has(\"ie\")\r\n\t\"../_Widget\",\r\n\t\"../_TemplatedMixin\",\r\n\t\"./_FormMixin\",\r\n\t\"../layout/_ContentPaneResizeMixin\"\r\n], function(declare, domAttr, kernel, has, _Widget, _TemplatedMixin, _FormMixin, _ContentPaneResizeMixin){\r\n\r\n\t// module:\r\n\t//\t\tdijit/form/Form\r\n\r\n\r\n\treturn declare(\"dijit.form.Form\", [_Widget, _TemplatedMixin, _FormMixin, _ContentPaneResizeMixin], {\r\n\t\t// summary:\r\n\t\t//\t\tWidget corresponding to HTML form tag, for validation and serialization\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t|\t<form data-dojo-type=\"dijit/form/Form\" id=\"myForm\">\r\n\t\t//\t|\t\tName: <input type=\"text\" name=\"name\" />\r\n\t\t//\t|\t</form>\r\n\t\t//\t|\t// Example assumes you have required dijit/registry\r\n\t\t//\t|\tmyObj = {name: \"John Doe\"};\r\n\t\t//\t|\tregistry.byId('myForm').set('value', myObj);\r\n\t\t//\t|\r\n\t\t//\t|\tmyObj=registry.byId('myForm').get('value');\r\n\r\n\t\t// HTML <FORM> attributes\r\n\r\n\t\t// name: String?\r\n\t\t//\t\tName of form for scripting.\r\n\t\tname: \"\",\r\n\r\n\t\t// action: String?\r\n\t\t//\t\tServer-side form handler.\r\n\t\taction: \"\",\r\n\r\n\t\t// method: String?\r\n\t\t//\t\tHTTP method used to submit the form, either \"GET\" or \"POST\".\r\n\t\tmethod: \"\",\r\n\r\n\t\t// encType: String?\r\n\t\t//\t\tEncoding type for the form, ex: application/x-www-form-urlencoded.\r\n\t\tencType: \"\",\r\n\r\n\t\t// accept-charset: String?\r\n\t\t//\t\tList of supported charsets.\r\n\t\t\"accept-charset\": \"\",\r\n\r\n\t\t// accept: String?\r\n\t\t//\t\tList of MIME types for file upload.\r\n\t\taccept: \"\",\r\n\r\n\t\t// target: String?\r\n\t\t//\t\tTarget frame for the document to be opened in.\r\n\t\ttarget: \"\",\r\n\r\n\t\ttemplateString: \"<form data-dojo-attach-point='containerNode' data-dojo-attach-event='onreset:_onReset,onsubmit:_onSubmit' ${!nameAttrSetting}></form>\",\r\n\r\n\t\tpostMixInProperties: function(){\r\n\t\t\t// Setup name=foo string to be referenced from the template (but only if a name has been specified)\r\n\t\t\t// Unfortunately we can't use _setNameAttr to set the name due to IE limitations, see #8660\r\n\t\t\tthis.nameAttrSetting = this.name ? (\"name='\" + this.name + \"'\") : \"\";\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\texecute: function(/*Object*/ /*===== formContents =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDeprecated: use submit()\r\n\t\t\t// tags:\r\n\t\t\t//\t\tdeprecated\r\n\t\t},\r\n\r\n\t\tonExecute: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDeprecated: use onSubmit()\r\n\t\t\t// tags:\r\n\t\t\t//\t\tdeprecated\r\n\t\t},\r\n\r\n\t\t_setEncTypeAttr: function(/*String*/ value){\r\n\t\t\tdomAttr.set(this.domNode, \"encType\", value);\r\n\t\t\tif(has(\"ie\")){\r\n\t\t\t\tthis.domNode.encoding = value;\r\n\t\t\t}\r\n\t\t\tthis._set(\"encType\", value);\r\n\t\t},\r\n\r\n\t\treset: function(/*Event?*/ e){\r\n\t\t\t// summary:\r\n\t\t\t//\t\trestores all widget values back to their init values,\r\n\t\t\t//\t\tcalls onReset() which can cancel the reset by returning false\r\n\r\n\t\t\t// create fake event so we can know if preventDefault() is called\r\n\t\t\tvar faux = {\r\n\t\t\t\treturnValue: true, // the IE way\r\n\t\t\t\tpreventDefault: function(){ // not IE\r\n\t\t\t\t\tthis.returnValue = false;\r\n\t\t\t\t},\r\n\t\t\t\tstopPropagation: function(){\r\n\t\t\t\t},\r\n\t\t\t\tcurrentTarget: e ? e.target : this.domNode,\r\n\t\t\t\ttarget: e ? e.target : this.domNode\r\n\t\t\t};\r\n\t\t\t// if return value is not exactly false, and haven't called preventDefault(), then reset\r\n\t\t\tif(!(this.onReset(faux) === false) && faux.returnValue){\r\n\t\t\t\tthis.inherited(arguments, []);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonReset: function(/*Event?*/ /*===== e =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCallback when user resets the form. This method is intended\r\n\t\t\t//\t\tto be over-ridden. When the `reset` method is called\r\n\t\t\t//\t\tprogrammatically, the return value from `onReset` is used\r\n\t\t\t//\t\tto compute whether or not resetting should proceed\r\n\t\t\t// tags:\r\n\t\t\t//\t\tcallback\r\n\t\t\treturn true; // Boolean\r\n\t\t},\r\n\r\n\t\t_onReset: function(e){\r\n\t\t\tthis.reset(e);\r\n\t\t\te.stopPropagation();\r\n\t\t\te.preventDefault();\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\t_onSubmit: function(e){\r\n\t\t\tvar fp = this.constructor.prototype;\r\n\t\t\t// TODO: remove this if statement beginning with 2.0\r\n\t\t\tif(this.execute != fp.execute || this.onExecute != fp.onExecute){\r\n\t\t\t\tkernel.deprecated(\"dijit.form.Form:execute()/onExecute() are deprecated. Use onSubmit() instead.\", \"\", \"2.0\");\r\n\t\t\t\tthis.onExecute();\r\n\t\t\t\tthis.execute(this.getValues());\r\n\t\t\t}\r\n\t\t\tif(this.onSubmit(e) === false){ // only exactly false stops submit\r\n\t\t\t\te.stopPropagation();\r\n\t\t\t\te.preventDefault();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonSubmit: function(/*Event?*/ /*===== e =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCallback when user submits the form.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThis method is intended to be over-ridden, but by default it checks and\r\n\t\t\t//\t\treturns the validity of form elements. When the `submit`\r\n\t\t\t//\t\tmethod is called programmatically, the return value from\r\n\t\t\t//\t\t`onSubmit` is used to compute whether or not submission\r\n\t\t\t//\t\tshould proceed\r\n\t\t\t// tags:\r\n\t\t\t//\t\textension\r\n\r\n\t\t\treturn this.isValid(); // Boolean\r\n\t\t},\r\n\r\n\t\tsubmit: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tprogrammatically submit form if and only if the `onSubmit` returns true\r\n\t\t\tif(!(this.onSubmit() === false)){\r\n\t\t\t\tthis.containerNode.submit();\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n});\r\n"]}