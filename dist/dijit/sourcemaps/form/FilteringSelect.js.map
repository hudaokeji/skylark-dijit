{"version":3,"sources":["form/FilteringSelect.js"],"names":["define","declare","lang","when","MappedTextBox","ComboBoxMixin","required","_lastDisplayedValue","_isValidSubset","this","_opened","isValid","item","get","_refreshState","searchTimer","inherited","arguments","_callbackSetLabel","result","query","options","priorityChange","searchAttr","_lastQuery","length","store","getIdentity","set","undefined","focused","textbox","value","_openResultList","results","validate","_getValueAttr","valueNode","_getValueField","_setValueAttr","displayedValue","_onChangeActive","isString","_setDisplayedValueAttr","self","_setItemAttr","_getDisplayQueryString","text","replace","label","_created","params","closeDropDown","q","clone","qs","_oldAPI","_patternToRegExp","toString","_set","_this","queryOptions","ignoreCase","deep","mixin","fetchProperties","_fetchHandle","err","_cancelingQuery","console","error","undo"],"mappings":"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","file":"../../form/FilteringSelect.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/_base/lang\", // lang.mixin\r\n\t\"dojo/when\",\r\n\t\"./MappedTextBox\",\r\n\t\"./ComboBoxMixin\"\r\n], function(declare, lang, when, MappedTextBox, ComboBoxMixin){\r\n\r\n\t// module:\r\n\t//\t\tdijit/form/FilteringSelect\r\n\r\n\treturn declare(\"dijit.form.FilteringSelect\", [MappedTextBox, ComboBoxMixin], {\r\n\t\t// summary:\r\n\t\t//\t\tAn enhanced version of the HTML SELECT tag, populated dynamically\r\n\t\t//\r\n\t\t// description:\r\n\t\t//\t\tAn enhanced version of the HTML SELECT tag, populated dynamically. It works\r\n\t\t//\t\tvery nicely with very large data sets because it can load and page data as needed.\r\n\t\t//\t\tIt also resembles ComboBox, but does not allow values outside of the provided ones.\r\n\t\t//\t\tIf OPTION tags are used as the data provider via markup, then the\r\n\t\t//\t\tOPTION tag's child text node is used as the displayed value when selected\r\n\t\t//\t\twhile the OPTION tag's value attribute is used as the widget value on form submit.\r\n\t\t//\t\tTo set the default value when using OPTION tags, specify the selected\r\n\t\t//\t\tattribute on 1 of the child OPTION tags.\r\n\t\t//\r\n\t\t//\t\tSimilar features:\r\n\t\t//\r\n\t\t//\t\t- There is a drop down list of possible values.\r\n\t\t//\t\t- You can only enter a value from the drop down list.  (You can't\r\n\t\t//\t\t\tenter an arbitrary value.)\r\n\t\t//\t\t- The value submitted with the form is the hidden value (ex: CA),\r\n\t\t//\t\t\tnot the displayed value a.k.a. label (ex: California)\r\n\t\t//\r\n\t\t//\t\tEnhancements over plain HTML version:\r\n\t\t//\r\n\t\t//\t\t- If you type in some text then it will filter down the list of\r\n\t\t//\t\t\tpossible values in the drop down list.\r\n\t\t//\t\t- List can be specified either as a static list or via a javascript\r\n\t\t//\t\t\tfunction (that can get the list from a server)\r\n\r\n\t\t// required: Boolean\r\n\t\t//\t\tTrue (default) if user is required to enter a value into this field.\r\n\t\trequired: true,\r\n\r\n\t\t_lastDisplayedValue: \"\",\r\n\r\n\t\t_isValidSubset: function(){\r\n\t\t\treturn this._opened;\r\n\t\t},\r\n\r\n\t\tisValid: function(){\r\n\t\t\t// Overrides ValidationTextBox.isValid()\r\n\t\t\treturn !!this.item || (!this.required && this.get('displayedValue') == \"\"); // #5974\r\n\t\t},\r\n\r\n\t\t_refreshState: function(){\r\n\t\t\tif(!this.searchTimer){ // state will be refreshed after results are returned\r\n\t\t\t\tthis.inherited(arguments);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_callbackSetLabel: function(\r\n\t\t\t\t\t\t/*Array*/ result,\r\n\t\t\t\t\t\t/*Object*/ query,\r\n\t\t\t\t\t\t/*Object*/ options,\r\n\t\t\t\t\t\t/*Boolean?*/ priorityChange){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCallback from dojo.store after lookup of user entered value finishes\r\n\r\n\t\t\t// setValue does a synchronous lookup,\r\n\t\t\t// so it calls _callbackSetLabel directly,\r\n\t\t\t// and so does not pass dataObject\r\n\t\t\t// still need to test against _lastQuery in case it came too late\r\n\t\t\tif((query && query[this.searchAttr] !== this._lastQuery) || (!query && result.length && this.store.getIdentity(result[0]) != this._lastQuery)){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(!result.length){\r\n\t\t\t\t//#3268: don't modify display value on bad input\r\n\t\t\t\t//#3285: change CSS to indicate error\r\n\t\t\t\tthis.set(\"value\", '', priorityChange || (priorityChange === undefined && !this.focused), this.textbox.value, null);\r\n\t\t\t}else{\r\n\t\t\t\tthis.set('item', result[0], priorityChange);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_openResultList: function(/*Object*/ results, /*Object*/ query, /*Object*/ options){\r\n\t\t\t// Callback when a data store query completes.\r\n\t\t\t// Overrides ComboBox._openResultList()\r\n\r\n\t\t\t// #3285: tap into search callback to see if user's query resembles a match\r\n\t\t\tif(query[this.searchAttr] !== this._lastQuery){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\tif(this.item === undefined){ // item == undefined for keyboard search\r\n\t\t\t\t// If the search returned no items that means that the user typed\r\n\t\t\t\t// in something invalid (and they can't make it valid by typing more characters),\r\n\t\t\t\t// so flag the FilteringSelect as being in an invalid state\r\n\t\t\t\tthis.validate(true);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_getValueAttr: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHook for get('value') to work.\r\n\r\n\t\t\t// don't get the textbox value but rather the previously set hidden value.\r\n\t\t\t// Use this.valueNode.value which isn't always set for other MappedTextBox widgets until blur\r\n\t\t\treturn this.valueNode.value;\r\n\t\t},\r\n\r\n\t\t_getValueField: function(){\r\n\t\t\t// Overrides ComboBox._getValueField()\r\n\t\t\treturn \"value\";\r\n\t\t},\r\n\r\n\t\t_setValueAttr: function(/*String*/ value, /*Boolean?*/ priorityChange, /*String?*/ displayedValue, /*item?*/ item){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHook so set('value', value) works.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSets the value of the select.\r\n\t\t\t//\t\tAlso sets the label to the corresponding value by reverse lookup.\r\n\t\t\tif(!this._onChangeActive){ priorityChange = null; }\r\n\r\n\t\t\tif(item === undefined){\r\n\t\t\t\tif(value === null || value === ''){\r\n\t\t\t\t\tvalue = '';\r\n\t\t\t\t\tif(!lang.isString(displayedValue)){\r\n\t\t\t\t\t\tthis._setDisplayedValueAttr(displayedValue||'', priorityChange);\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tvar self = this;\r\n\t\t\t\tthis._lastQuery = value;\r\n\t\t\t\twhen(this.store.get(value), function(item){\r\n\t\t\t\t\tself._callbackSetLabel(item? [item] : [], undefined, undefined, priorityChange);\r\n\t\t\t\t});\r\n\t\t\t}else{\r\n\t\t\t\tthis.valueNode.value = value;\r\n\t\t\t\tthis.inherited(arguments, [value, priorityChange, displayedValue, item]);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_setItemAttr: function(/*item*/ item, /*Boolean?*/ priorityChange, /*String?*/ displayedValue){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSet the displayed valued in the input box, and the hidden value\r\n\t\t\t//\t\tthat gets submitted, based on a dojo.data store item.\r\n\t\t\t// description:\r\n\t\t\t//\t\tUsers shouldn't call this function; they should be calling\r\n\t\t\t//\t\tset('item', value)\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis._lastDisplayedValue = this.textbox.value;\r\n\t\t},\r\n\r\n\t\t_getDisplayQueryString: function(/*String*/ text){\r\n\t\t\treturn text.replace(/([\\\\\\*\\?])/g, \"\\\\$1\");\r\n\t\t},\r\n\r\n\t\t_setDisplayedValueAttr: function(/*String*/ label, /*Boolean?*/ priorityChange){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHook so set('displayedValue', label) works.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSets textbox to display label. Also performs reverse lookup\r\n\t\t\t//\t\tto set the hidden value.  label should corresponding to item.searchAttr.\r\n\r\n\t\t\tif(label == null){ label = ''; }\r\n\r\n\t\t\t// This is called at initialization along with every custom setter.\r\n\t\t\t// Usually (or always?) the call can be ignored.   If it needs to be\r\n\t\t\t// processed then at least make sure that the XHR request doesn't trigger an onChange()\r\n\t\t\t// event, even if it returns after creation has finished\r\n\t\t\tif(!this._created){\r\n\t\t\t\tif(!(\"displayedValue\" in this.params)){\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tpriorityChange = false;\r\n\t\t\t}\r\n\r\n\t\t\t// Do a reverse lookup to map the specified displayedValue to the hidden value.\r\n\t\t\t// Note that if there's a custom labelFunc() this code\r\n\t\t\tif(this.store){\r\n\t\t\t\tthis.closeDropDown();\r\n\t\t\t\tvar query = lang.clone(this.query); // #6196: populate query with user-specifics\r\n\r\n\t\t\t\t// Generate query\r\n\t\t\t\tvar qs = this._getDisplayQueryString(label), q;\r\n\t\t\t\tif(this.store._oldAPI){\r\n\t\t\t\t\t// remove this branch for 2.0\r\n\t\t\t\t\tq = qs;\r\n\t\t\t\t}else{\r\n\t\t\t\t\t// Query on searchAttr is a regex for benefit of dojo/store/Memory,\r\n\t\t\t\t\t// but with a toString() method to help dojo/store/JsonRest.\r\n\t\t\t\t\t// Search string like \"Co*\" converted to regex like /^Co.*$/i.\r\n\t\t\t\t\tq = this._patternToRegExp(qs);\r\n\t\t\t\t\tq.toString = function(){ return qs; };\r\n\t\t\t\t}\r\n\t\t\t\tthis._lastQuery = query[this.searchAttr] = q;\r\n\r\n\t\t\t\t// If the label is not valid, the callback will never set it,\r\n\t\t\t\t// so the last valid value will get the warning textbox.   Set the\r\n\t\t\t\t// textbox value now so that the impending warning will make\r\n\t\t\t\t// sense to the user\r\n\t\t\t\tthis.textbox.value = label;\r\n\t\t\t\tthis._lastDisplayedValue = label;\r\n\t\t\t\tthis._set(\"displayedValue\", label);\t// for watch(\"displayedValue\") notification\r\n\t\t\t\tvar _this = this;\r\n\t\t\t\tvar options = {\r\n\t\t\t\t\tqueryOptions: {\r\n\t\t\t\t\t\tignoreCase: this.ignoreCase,\r\n\t\t\t\t\t\tdeep: true\r\n\t\t\t\t\t}\r\n\t\t\t\t};\r\n\t\t\t\tlang.mixin(options, this.fetchProperties);\r\n\t\t\t\tthis._fetchHandle = this.store.query(query, options);\r\n\t\t\t\twhen(this._fetchHandle, function(result){\r\n\t\t\t\t\t_this._fetchHandle = null;\r\n\t\t\t\t\t_this._callbackSetLabel(result || [], query, options, priorityChange);\r\n\t\t\t\t}, function(err){\r\n\t\t\t\t\t_this._fetchHandle = null;\r\n\t\t\t\t\tif(!_this._cancelingQuery){\t// don't treat canceled query as an error\r\n\t\t\t\t\t\tconsole.error('dijit.form.FilteringSelect: ' + err.toString());\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tundo: function(){\r\n\t\t\tthis.set('displayedValue', this._lastDisplayedValue);\r\n\t\t}\r\n\t});\r\n});\r\n"]}