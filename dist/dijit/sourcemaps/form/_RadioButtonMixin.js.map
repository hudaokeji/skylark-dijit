{"version":3,"sources":["form/_RadioButtonMixin.js"],"names":["define","array","declare","domAttr","lang","query","registry","type","_getRelatedWidgets","ary","this","focusNode","form","ownerDocument","forEach","hitch","inputNode","name","widget","getEnclosingWidget","push","_setCheckedAttr","value","inherited","arguments","_created","checked","set","_getSubmitValue","_onClick","e","disabled","stopPropagation","preventDefault","readOnly","domNode"],"mappings":";;;;;;;AAAAA,QACC,mBACA,qBACA,gBACA,kBACA,kBACA,eACE,SAASC,EAAOC,EAASC,EAASC,EAAMC,EAAOC,GAKjD,OAAOJ,EAAQ,+BAAgC,MAO9CK,KAAM,QAENC,mBAAoB,WAEnB,IAAIC,KAWJ,OAVAJ,EAAM,oBAAqBK,KAAKC,UAAUC,MAAQF,KAAKG,eAAeC,QACrEV,EAAKW,MAAML,KAAM,SAASM,GACzB,GAAGA,EAAUC,MAAQP,KAAKO,MAAQD,EAAUJ,MAAQF,KAAKC,UAAUC,KAAK,CACvE,IAAIM,EAASZ,EAASa,mBAAmBH,GACtCE,GACFT,EAAIW,KAAKF,OAKNT,GAGRY,gBAAiB,SAAqBC,GAErCZ,KAAKa,UAAUC,WACXd,KAAKe,UAGNH,GACFrB,EAAMa,QAAQJ,KAAKF,qBAAsBJ,EAAKW,MAAML,KAAM,SAASQ,GAC/DA,GAAUR,MAAQQ,EAAOQ,SAC3BR,EAAOS,IAAI,WAAW,OAM1BC,gBAAiB,SAAoBN,GACpC,OAAgB,MAATA,EAAgB,KAAOA,GAG/BO,SAAU,SAAmBC,GAC5B,OAAGpB,KAAKgB,SAAWhB,KAAKqB,UACvBD,EAAEE,kBACFF,EAAEG,kBACK,GAELvB,KAAKwB,UACPJ,EAAEE,kBACFF,EAAEG,iBACFhC,EAAMa,QAAQJ,KAAKF,qBAAsBJ,EAAKW,MAAML,KAAM,SAASQ,GAClEf,EAAQwB,IAAIjB,KAAKC,WAAaD,KAAKyB,QAAS,UAAWjB,EAAOQ,aAExD,GAEDhB,KAAKa,UAAUC","file":"../../form/_RadioButtonMixin.js","sourcesContent":["define([\r\n\t\"dojo/_base/array\", // array.forEach\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom-attr\", // domAttr.set\r\n\t\"dojo/_base/lang\", // lang.hitch\r\n\t\"dojo/query!css2\", // query\r\n\t\"../registry\"    // registry.getEnclosingWidget\r\n], function(array, declare, domAttr, lang, query, registry){\r\n\r\n\t// module:\r\n\t//\t\tdijit/form/_RadioButtonMixin\r\n\r\n\treturn declare(\"dijit.form._RadioButtonMixin\", null, {\r\n\t\t// summary:\r\n\t\t//\t\tMixin to provide widget functionality for an HTML radio button\r\n\r\n\t\t// type: [private] String\r\n\t\t//\t\ttype attribute on `<input>` node.\r\n\t\t//\t\tUsers should not change this value.\r\n\t\ttype: \"radio\",\r\n\r\n\t\t_getRelatedWidgets: function(){\r\n\t\t\t// Private function needed to help iterate over all radio buttons in a group.\r\n\t\t\tvar ary = [];\r\n\t\t\tquery(\"input[type=radio]\", this.focusNode.form || this.ownerDocument).forEach(// can't use name= since query doesn't support [] in the name\r\n\t\t\t\tlang.hitch(this, function(inputNode){\r\n\t\t\t\t\tif(inputNode.name == this.name && inputNode.form == this.focusNode.form){\r\n\t\t\t\t\t\tvar widget = registry.getEnclosingWidget(inputNode);\r\n\t\t\t\t\t\tif(widget){\r\n\t\t\t\t\t\t\tary.push(widget);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t\treturn ary;\r\n\t\t},\r\n\r\n\t\t_setCheckedAttr: function(/*Boolean*/ value){\r\n\t\t\t// If I am being checked then have to deselect currently checked radio button\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tif(!this._created){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(value){\r\n\t\t\t\tarray.forEach(this._getRelatedWidgets(), lang.hitch(this, function(widget){\r\n\t\t\t\t\tif(widget != this && widget.checked){\r\n\t\t\t\t\t\twidget.set('checked', false);\r\n\t\t\t\t\t}\r\n\t\t\t\t}));\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_getSubmitValue: function(/*String*/ value){\r\n\t\t\treturn value == null ? \"on\" : value;\r\n\t\t},\r\n\r\n\t\t_onClick: function(/*Event*/ e){\r\n\t\t\tif(this.checked || this.disabled){ // nothing to do\r\n\t\t\t\te.stopPropagation();\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.readOnly){ // ignored by some browsers so we have to resync the DOM elements with widget values\r\n\t\t\t\te.stopPropagation();\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tarray.forEach(this._getRelatedWidgets(), lang.hitch(this, function(widget){\r\n\t\t\t\t\tdomAttr.set(this.focusNode || this.domNode, 'checked', widget.checked);\r\n\t\t\t\t}));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\treturn this.inherited(arguments);\r\n\t\t}\r\n\t});\r\n});\r\n"]}