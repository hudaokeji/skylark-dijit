{"version":3,"sources":["form/_ComboBoxMenuMixin.js"],"names":["define","array","declare","domAttr","has","i18n","ComboBoxMenuMixin","_messages","postMixInProperties","this","inherited","arguments","getLocalization","lang","buildRendering","previousButton","innerHTML","nextButton","_setValueAttr","value","_set","onChange","onClick","node","_setSelectedAttr","onPage","onClose","_createOption","item","labelFunc","menuitem","_createMenuItem","labelObject","html","label","appendChild","ownerDocument","createTextNode","createOptions","results","options","items","style","display","start","set","id","forEach","i","setAttribute","parentNode","insertBefore","displayMore","total","then","count","length","clearResultList","container","containerNode","childNodes","removeChild","highlightFirstOption","selectFirstNode","highlightLastOption","selectLastNode","getHighlightedOption","selectNextNode","selectPreviousNode","selected","applyTextDir"],"mappings":";;;;;;;AAAAA,QACC,mBACA,qBACA,gBACA,WACA,YACA,4BACE,SAASC,EAAOC,EAASC,EAASC,EAAKC,GAKzC,IAAIC,EAAoBJ,EAAQ,iCAAmCE,EAAI,aAAe,UAAY,IAAK,MAQtGG,UAAW,KAEXC,oBAAqB,WACpBC,KAAKC,UAAUC,WACfF,KAAKF,UAAYF,EAAKO,gBAAgB,aAAc,WAAYH,KAAKI,OAGtEC,eAAgB,WACfL,KAAKC,UAAUC,WAGfF,KAAKM,eAAeC,UAAYP,KAAKF,UAA2B,gBAChEE,KAAKQ,WAAWD,UAAYP,KAAKF,UAAuB,aAGzDW,cAAe,SAAoBC,GAClCV,KAAKW,KAAK,QAASD,GACnBV,KAAKY,SAASF,IAGfG,QAAS,SAAqBC,GAC1BA,GAAQd,KAAKM,gBACfN,KAAKe,iBAAiB,MACtBf,KAAKgB,QAAQ,IACLF,GAAQd,KAAKQ,YACrBR,KAAKe,iBAAiB,MACtBf,KAAKgB,OAAO,IAEZhB,KAAKY,SAASE,IAKhBF,SAAU,aAOVI,OAAQ,aAORC,QAAS,WAKRjB,KAAKe,iBAAiB,OAGvBG,cAAe,SAAoBC,EAAMC,GAKxC,IAAIC,EAAWrB,KAAKsB,kBAChBC,EAAcH,EAAUD,GAa5B,OAZGI,EAAYC,KACdH,EAASd,UAAYgB,EAAYE,MAEjCJ,EAASK,YACRL,EAASM,cAAcC,eAAeL,EAAYE,QAI3B,IAAtBJ,EAASd,YACXc,EAASd,UAAY,UAGfc,GAGRQ,cAAe,SAASC,EAASC,EAASX,GAWzCpB,KAAKgC,MAAQF,EAGb9B,KAAKM,eAAe2B,MAAMC,QAA4B,GAAjBH,EAAQI,MAAc,OAAS,GACpEzC,EAAQ0C,IAAIpC,KAAKM,eAAgB,KAAMN,KAAKqC,GAAK,SAKjD7C,EAAM8C,QAAQR,EAAS,SAASX,EAAMoB,GACrC,IAAIlB,EAAWrB,KAAKkB,cAAcC,EAAMC,GACxCC,EAASmB,aAAa,OAAQD,GAC9B7C,EAAQ0C,IAAIf,EAAU,KAAMrB,KAAKqC,GAAKE,GACtCvC,KAAKQ,WAAWiC,WAAWC,aAAarB,EAAUrB,KAAKQ,aACrDR,MAEH,IAAI2C,GAAc,EAEfb,EAAQc,QAAUd,EAAQc,MAAMC,OAA0B,GAAlBf,EAAQc,MAC9Cb,EAAQI,MAAQJ,EAAQe,MAAShB,EAAQc,MAC5CD,GAAc,EACLZ,EAAQI,MAAQJ,EAAQe,MAAShB,EAAQc,OAASb,EAAQe,OAAShB,EAAQiB,SAIpFJ,GAAc,GAEPZ,EAAQe,OAAShB,EAAQiB,SAGjCJ,GAAc,GAGf3C,KAAKQ,WAAWyB,MAAMC,QAAUS,EAAc,GAAK,OACnDjD,EAAQ0C,IAAIpC,KAAKQ,WAAY,KAAMR,KAAKqC,GAAK,UAG9CW,gBAAiB,WAIhB,IADA,IAAIC,EAAYjD,KAAKkD,cACfD,EAAUE,WAAWJ,OAAS,GACnCE,EAAUG,YAAYH,EAAUE,WAAWF,EAAUE,WAAWJ,OAAS,IAE1E/C,KAAKe,iBAAiB,OAGvBsC,qBAAsB,WAGrBrD,KAAKsD,mBAGNC,oBAAqB,WAGpBvD,KAAKwD,kBAGNF,gBAAiB,WAChBtD,KAAKC,UAAUC,WACZF,KAAKyD,wBAA0BzD,KAAKM,gBACtCN,KAAK0D,kBAIPF,eAAgB,WACfxD,KAAKC,UAAUC,WACZF,KAAKyD,wBAA0BzD,KAAKQ,YACtCR,KAAK2D,sBAIPF,qBAAsB,WACrB,OAAOzD,KAAK4D,YAiBd,OAbGjE,EAAI,eACNE,EAAoBJ,EAAQ,gCAAiCI,GAC5DqB,cAAe,WACd,IAAIG,EAAWrB,KAAKC,UAAUC,WAK9B,OAFAF,KAAK6D,aAAaxC,GAEXA,MAKHxB","file":"../../form/_ComboBoxMenuMixin.js","sourcesContent":["define([\r\n\t\"dojo/_base/array\", // array.forEach\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom-attr\", // domAttr.set\r\n\t\"dojo/has\",\r\n\t\"dojo/i18n\", // i18n.getLocalization\r\n\t\"dojo/i18n!./nls/ComboBox\"\r\n], function(array, declare, domAttr, has, i18n){\r\n\r\n\t// module:\r\n\t//\t\tdijit/form/_ComboBoxMenuMixin\r\n\r\n\tvar ComboBoxMenuMixin = declare(\"dijit.form._ComboBoxMenuMixin\" + (has(\"dojo-bidi\") ? \"_NoBidi\" : \"\"), null, {\r\n\t\t// summary:\r\n\t\t//\t\tFocus-less menu for internal use in `dijit/form/ComboBox`\r\n\t\t// tags:\r\n\t\t//\t\tprivate\r\n\r\n\t\t// _messages: Object\r\n\t\t//\t\tHolds \"next\" and \"previous\" text for paging buttons on drop down\r\n\t\t_messages: null,\r\n\r\n\t\tpostMixInProperties: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis._messages = i18n.getLocalization(\"dijit.form\", \"ComboBox\", this.lang);\r\n\t\t},\r\n\r\n\t\tbuildRendering: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\t// fill in template with i18n messages\r\n\t\t\tthis.previousButton.innerHTML = this._messages[\"previousMessage\"];\r\n\t\t\tthis.nextButton.innerHTML = this._messages[\"nextMessage\"];\r\n\t\t},\r\n\r\n\t\t_setValueAttr: function(/*Object*/ value){\r\n\t\t\tthis._set(\"value\", value);\r\n\t\t\tthis.onChange(value);\r\n\t\t},\r\n\r\n\t\tonClick: function(/*DomNode*/ node){\r\n\t\t\tif(node == this.previousButton){\r\n\t\t\t\tthis._setSelectedAttr(null);\r\n\t\t\t\tthis.onPage(-1);\r\n\t\t\t}else if(node == this.nextButton){\r\n\t\t\t\tthis._setSelectedAttr(null);\r\n\t\t\t\tthis.onPage(1);\r\n\t\t\t}else{\r\n\t\t\t\tthis.onChange(node);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t// stubs\r\n\t\tonChange: function(/*Number*/ /*===== direction =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tNotifies ComboBox/FilteringSelect that user selected an option.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tcallback\r\n\t\t},\r\n\r\n\t\tonPage: function(/*Number*/ /*===== direction =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tNotifies ComboBox/FilteringSelect that user clicked to advance to next/previous page.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tcallback\r\n\t\t},\r\n\r\n\t\tonClose: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCallback from dijit.popup code to this widget, notifying it that it closed\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tthis._setSelectedAttr(null);\r\n\t\t},\r\n\r\n\t\t_createOption: function(/*Object*/ item, labelFunc){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreates an option to appear on the popup menu subclassed by\r\n\t\t\t//\t\t`dijit/form/FilteringSelect`.\r\n\r\n\t\t\tvar menuitem = this._createMenuItem();\r\n\t\t\tvar labelObject = labelFunc(item);\r\n\t\t\tif(labelObject.html){\r\n\t\t\t\tmenuitem.innerHTML = labelObject.label;\r\n\t\t\t}else{\r\n\t\t\t\tmenuitem.appendChild(\r\n\t\t\t\t\tmenuitem.ownerDocument.createTextNode(labelObject.label)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\t// #3250: in blank options, assign a normal height\r\n\t\t\tif(menuitem.innerHTML == \"\"){\r\n\t\t\t\tmenuitem.innerHTML = \"&#160;\";\t// &nbsp;\r\n\t\t\t}\r\n\r\n\t\t\treturn menuitem;\r\n\t\t},\r\n\r\n\t\tcreateOptions: function(results, options, labelFunc){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFills in the items in the drop down list\r\n\t\t\t// results:\r\n\t\t\t//\t\tArray of items\r\n\t\t\t// options:\r\n\t\t\t//\t\tThe options to the query function of the store\r\n\t\t\t//\r\n\t\t\t// labelFunc:\r\n\t\t\t//\t\tFunction to produce a label in the drop down list from a dojo.data item\r\n\r\n\t\t\tthis.items = results;\r\n\r\n\t\t\t// display \"Previous . . .\" button\r\n\t\t\tthis.previousButton.style.display = (options.start == 0) ? \"none\" : \"\";\r\n\t\t\tdomAttr.set(this.previousButton, \"id\", this.id + \"_prev\");\r\n\t\t\t// create options using _createOption function defined by parent\r\n\t\t\t// ComboBox (or FilteringSelect) class\r\n\t\t\t// #2309:\r\n\t\t\t//\t\titerate over cache nondestructively\r\n\t\t\tarray.forEach(results, function(item, i){\r\n\t\t\t\tvar menuitem = this._createOption(item, labelFunc);\r\n\t\t\t\tmenuitem.setAttribute(\"item\", i);\t// index to this.items; use indirection to avoid mem leak\r\n\t\t\t\tdomAttr.set(menuitem, \"id\", this.id + i);\r\n\t\t\t\tthis.nextButton.parentNode.insertBefore(menuitem, this.nextButton);\r\n\t\t\t}, this);\r\n\t\t\t// display \"Next . . .\" button\r\n\t\t\tvar displayMore = false;\r\n\t\t\t// Try to determine if we should show 'more'...\r\n\t\t\tif(results.total && !results.total.then && results.total != -1){\r\n\t\t\t\tif((options.start + options.count) < results.total){\r\n\t\t\t\t\tdisplayMore = true;\r\n\t\t\t\t}else if((options.start + options.count) > results.total && options.count == results.length){\r\n\t\t\t\t\t// Weird return from a data store, where a start + count > maxOptions\r\n\t\t\t\t\t// implies maxOptions isn't really valid and we have to go into faking it.\r\n\t\t\t\t\t// And more or less assume more if count == results.length\r\n\t\t\t\t\tdisplayMore = true;\r\n\t\t\t\t}\r\n\t\t\t}else if(options.count == results.length){\r\n\t\t\t\t//Don't know the size, so we do the best we can based off count alone.\r\n\t\t\t\t//So, if we have an exact match to count, assume more.\r\n\t\t\t\tdisplayMore = true;\r\n\t\t\t}\r\n\r\n\t\t\tthis.nextButton.style.display = displayMore ? \"\" : \"none\";\r\n\t\t\tdomAttr.set(this.nextButton, \"id\", this.id + \"_next\");\r\n\t\t},\r\n\r\n\t\tclearResultList: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tClears the entries in the drop down list, but of course keeps the previous and next buttons.\r\n\t\t\tvar container = this.containerNode;\r\n\t\t\twhile(container.childNodes.length > 2){\r\n\t\t\t\tcontainer.removeChild(container.childNodes[container.childNodes.length - 2]);\r\n\t\t\t}\r\n\t\t\tthis._setSelectedAttr(null);\r\n\t\t},\r\n\r\n\t\thighlightFirstOption: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHighlight the first real item in the list (not Previous Choices).\r\n\t\t\tthis.selectFirstNode();\r\n\t\t},\r\n\r\n\t\thighlightLastOption: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHighlight the last real item in the list (not More Choices).\r\n\t\t\tthis.selectLastNode();\r\n\t\t},\r\n\r\n\t\tselectFirstNode: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tif(this.getHighlightedOption() == this.previousButton){\r\n\t\t\t\tthis.selectNextNode();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tselectLastNode: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tif(this.getHighlightedOption() == this.nextButton){\r\n\t\t\t\tthis.selectPreviousNode();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tgetHighlightedOption: function(){\r\n\t\t\treturn this.selected;\r\n\t\t}\r\n\t});\r\n\r\n\tif(has(\"dojo-bidi\")){\r\n\t\tComboBoxMenuMixin = declare(\"dijit.form._ComboBoxMenuMixin\", ComboBoxMenuMixin, {\r\n\t\t\t_createOption: function(){\r\n\t\t\t\tvar menuitem = this.inherited(arguments);\r\n\r\n\t\t\t\t// update menuitem.dir if BidiSupport was required\r\n\t\t\t\tthis.applyTextDir(menuitem);\r\n\r\n\t\t\t\treturn menuitem;\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\treturn ComboBoxMenuMixin;\r\n});\r\n"]}