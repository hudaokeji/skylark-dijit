{"version":3,"sources":["form/_ButtonMixin.js"],"names":["define","declare","dom","has","registry","ButtonMixin","label","type","__onClick","e","stopPropagation","preventDefault","this","disabled","valueNode","click","_onClick","onClick","cancelled","defaultPrevented","focusNode","form","node","domNode","parentNode","widget","byNode","_onSubmit","postCreate","inherited","arguments","setSelectable","_setLabelAttr","content","_set","containerNode","innerHTML","labelNode","applyTextDir"],"mappings":";;;;;;;AAAAA,QACC,qBACA,WACA,WACA,eACE,SAASC,EAASC,EAAKC,EAAKC,GAK9B,IAAIC,EAAcJ,EAAQ,2BAA6BE,EAAI,aAAe,UAAY,IAAK,MAmB1FG,MAAO,GAIPC,KAAM,SAENC,UAAW,SAAmBC,GAW7B,OANAA,EAAEC,kBACFD,EAAEE,iBACEC,KAAKC,UAERD,KAAKE,UAAUC,MAAMN,IAEf,GAGRO,SAAU,SAAmBP,GAG5B,GAAGG,KAAKC,SAGP,OAFAJ,EAAEC,kBACFD,EAAEE,kBACK,GAEe,IAApBC,KAAKK,QAAQR,IACfA,EAAEE,iBAEH,IAAIO,EAAYT,EAAEU,iBAIlB,IAAID,GAA0B,UAAbN,KAAKL,QAAsBK,KAAKE,WAAaF,KAAKQ,WAAWC,KAC7E,IAAI,IAAIC,EAAOV,KAAKW,QAASD,EAAKE,WAAYF,EAAOA,EAAKE,WAAW,CACpE,IAAIC,EAASrB,EAASsB,OAAOJ,GAC7B,GAAGG,GAAqC,mBAApBA,EAAOE,UAAwB,CAClDF,EAAOE,UAAUlB,GACjBA,EAAEE,iBACFO,GAAY,EACZ,OAKH,OAAQA,GAGTU,WAAY,WACXhB,KAAKiB,UAAUC,WACf5B,EAAI6B,cAAcnB,KAAKQ,WAAW,IAGnCH,QAAS,WAMR,OAAO,GAGRe,cAAe,SAAoBC,GAKlCrB,KAAKsB,KAAK,QAASD,IACHrB,KAAKuB,eAAiBvB,KAAKQ,WACjCgB,UAAYH,KAcxB,OAVG9B,EAAI,eACNE,EAAcJ,EAAQ,0BAA2BI,GAChD2B,cAAe,WACdpB,KAAKiB,UAAUC,WACf,IAAIO,EAAYzB,KAAKuB,eAAiBvB,KAAKQ,UAC3CR,KAAK0B,aAAaD,OAKdhC","file":"../../form/_ButtonMixin.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom\", // dom.setSelectable\r\n\t\"dojo/has\",\r\n\t\"../registry\"        // registry.byNode\r\n], function(declare, dom, has, registry){\r\n\r\n\t// module:\r\n\t//\t\tdijit/form/_ButtonMixin\r\n\r\n\tvar ButtonMixin = declare(\"dijit.form._ButtonMixin\" + (has(\"dojo-bidi\") ? \"_NoBidi\" : \"\"), null, {\r\n\t\t// summary:\r\n\t\t//\t\tA mixin to add a thin standard API wrapper to a normal HTML button\r\n\t\t// description:\r\n\t\t//\t\tA label should always be specified (through innerHTML) or the label attribute.\r\n\t\t//\r\n\t\t//\t\tAttach points:\r\n\t\t//\r\n\t\t//\t\t- focusNode (required): this node receives focus\r\n\t\t//\t\t- valueNode (optional): this node's value gets submitted with FORM elements\r\n\t\t//\t\t- containerNode (optional): this node gets the innerHTML assignment for label\r\n\t\t// example:\r\n\t\t// |\t<button data-dojo-type=\"dijit/form/Button\" onClick=\"...\">Hello world</button>\r\n\t\t// example:\r\n\t\t// |\tvar button1 = new Button({label: \"hello world\", onClick: foo});\r\n\t\t// |\tdojo.body().appendChild(button1.domNode);\r\n\r\n\t\t// label: HTML String\r\n\t\t//\t\tContent to display in button.\r\n\t\tlabel: \"\",\r\n\r\n\t\t// type: [const] String\r\n\t\t//\t\tType of button (submit, reset, button, checkbox, radio)\r\n\t\ttype: \"button\",\r\n\r\n\t\t__onClick: function(/*Event*/ e){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInternal function to divert the real click onto the hidden INPUT that has a native default action associated with it\r\n\t\t\t// type:\r\n\t\t\t//\t\tprivate\r\n\t\t\te.stopPropagation();\r\n\t\t\te.preventDefault();\r\n\t\t\tif(!this.disabled){\r\n\t\t\t\t// cannot use on.emit since button default actions won't occur\r\n\t\t\t\tthis.valueNode.click(e);\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t},\r\n\r\n\t\t_onClick: function(/*Event*/ e){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInternal function to handle click actions\r\n\t\t\tif(this.disabled){\r\n\t\t\t\te.stopPropagation();\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tif(this.onClick(e) === false){\r\n\t\t\t\te.preventDefault();\r\n\t\t\t}\r\n\t\t\tvar cancelled = e.defaultPrevented;\r\n\r\n\t\t\t// Signal Form/Dialog to submit/close.  For 2.0, consider removing this code and instead making the Form/Dialog\r\n\t\t\t// listen for bubbled click events where evt.target.type == \"submit\" && !evt.defaultPrevented.\r\n\t\t\tif(!cancelled && this.type == \"submit\" && !(this.valueNode || this.focusNode).form){\r\n\t\t\t\tfor(var node = this.domNode; node.parentNode; node = node.parentNode){\r\n\t\t\t\t\tvar widget = registry.byNode(node);\r\n\t\t\t\t\tif(widget && typeof widget._onSubmit == \"function\"){\r\n\t\t\t\t\t\twidget._onSubmit(e);\r\n\t\t\t\t\t\te.preventDefault(); // action has already occurred\r\n\t\t\t\t\t\tcancelled = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn !cancelled;\r\n\t\t},\r\n\r\n\t\tpostCreate: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tdom.setSelectable(this.focusNode, false);\r\n\t\t},\r\n\r\n\t\tonClick: function(/*Event*/ /*===== e =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCallback for when button is clicked.\r\n\t\t\t//\t\tIf type=\"submit\", return true to perform submit, or false to cancel it.\r\n\t\t\t// type:\r\n\t\t\t//\t\tcallback\r\n\t\t\treturn true;\t\t// Boolean\r\n\t\t},\r\n\r\n\t\t_setLabelAttr: function(/*String*/ content){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHook for set('label', ...) to work.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSet the label (text) of the button; takes an HTML string.\r\n\t\t\tthis._set(\"label\", content);\r\n\t\t\tvar labelNode = this.containerNode || this.focusNode;\r\n\t\t\tlabelNode.innerHTML = content;\r\n\t\t}\r\n\t});\r\n\r\n\tif(has(\"dojo-bidi\")){\r\n\t\tButtonMixin = declare(\"dijit.form._ButtonMixin\", ButtonMixin, {\r\n\t\t\t_setLabelAttr: function(){\r\n\t\t\t\tthis.inherited(arguments);\r\n\t\t\t\tvar labelNode = this.containerNode || this.focusNode;\r\n\t\t\t\tthis.applyTextDir(labelNode);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\treturn ButtonMixin;\r\n});\r\n"]}