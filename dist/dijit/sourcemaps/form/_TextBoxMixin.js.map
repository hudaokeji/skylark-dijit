{"version":3,"sources":["form/_TextBoxMixin.js"],"names":["define","array","declare","dom","has","keys","lang","on","dijit","_TextBoxMixin","trim","uppercase","lowercase","propercase","maxLength","selectOnClick","placeHolder","_getValueAttr","this","parse","get","constraints","_setValueAttr","value","priorityChange","formattedValue","filteredValue","undefined","filter","isNaN","format","compare","textbox","_set","inherited","arguments","displayedValue","_getDisplayedValueAttr","_setDisplayedValueAttr","String","toString","_refreshState","onInput","__skipInputEvent","_onInput","evt","_processInput","intermediateChanges","defer","_handleOnChange","postCreate","setAttribute","own","hitch","e","charOrCode","type","keyCode","SHIFT","ALT","CTRL","META","CAPS_LOCK","NUM_LOCK","SCROLL_LOCK","ctrlKey","metaKey","altKey","NUMPAD_0","NUMPAD_1","NUMPAD_2","NUMPAD_3","NUMPAD_4","NUMPAD_5","NUMPAD_6","NUMPAD_7","NUMPAD_8","NUMPAD_9","NUMPAD_MULTIPLY","NUMPAD_PLUS","NUMPAD_ENTER","NUMPAD_MINUS","NUMPAD_PERIOD","NUMPAD_DIVIDE","SPACE","named","i","charCode","fromCharCode","attr","faux","test","v","mixin","_wasConsumed","preventDefault","stopPropagation","domNode","_blankValue","val","toUpperCase","toLowerCase","replace","word","substring","_setBlurValue","_onBlur","disabled","_isTextSelected","selectionStart","selectionEnd","_onFocus","by","readOnly","_selectOnClickHandle","once","selectInputText","remove","reset","applyTextDir","focusNode","_setSelectionRange","element","start","stop","setSelectionRange","byId","length","focus"],"mappings":"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","file":"../../form/_TextBoxMixin.js","sourcesContent":["define([\r\n\t\"dojo/_base/array\", // array.forEach\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom\", // dom.byId\r\n\t\"dojo/has\",\r\n\t\"dojo/keys\", // keys.ALT keys.CAPS_LOCK keys.CTRL keys.META keys.SHIFT\r\n\t\"dojo/_base/lang\", // lang.mixin\r\n\t\"dojo/on\", // on\r\n\t\"../_dijit\"    // for exporting dijit._setSelectionRange, dijit.selectInputText\r\n], function(array, declare, dom, has, keys, lang, on, dijit){\r\n\r\n\t// module:\r\n\t//\t\tdijit/form/_TextBoxMixin\r\n\r\n\tvar _TextBoxMixin = declare(\"dijit.form._TextBoxMixin\" + (has(\"dojo-bidi\") ? \"_NoBidi\" : \"\"), null, {\r\n\t\t// summary:\r\n\t\t//\t\tA mixin for textbox form input widgets\r\n\r\n\t\t// trim: Boolean\r\n\t\t//\t\tRemoves leading and trailing whitespace if true.  Default is false.\r\n\t\ttrim: false,\r\n\r\n\t\t// uppercase: Boolean\r\n\t\t//\t\tConverts all characters to uppercase if true.  Default is false.\r\n\t\tuppercase: false,\r\n\r\n\t\t// lowercase: Boolean\r\n\t\t//\t\tConverts all characters to lowercase if true.  Default is false.\r\n\t\tlowercase: false,\r\n\r\n\t\t// propercase: Boolean\r\n\t\t//\t\tConverts the first character of each word to uppercase if true.\r\n\t\tpropercase: false,\r\n\r\n\t\t// maxLength: String\r\n\t\t//\t\tHTML INPUT tag maxLength declaration.\r\n\t\tmaxLength: \"\",\r\n\r\n\t\t// selectOnClick: [const] Boolean\r\n\t\t//\t\tIf true, all text will be selected when focused with mouse\r\n\t\tselectOnClick: false,\r\n\r\n\t\t// placeHolder: String\r\n\t\t//\t\tDefines a hint to help users fill out the input field (as defined in HTML 5).\r\n\t\t//\t\tThis should only contain plain text (no html markup).\r\n\t\tplaceHolder: \"\",\r\n\r\n\t\t_getValueAttr: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHook so get('value') works as we like.\r\n\t\t\t// description:\r\n\t\t\t//\t\tFor `dijit/form/TextBox` this basically returns the value of the `<input>`.\r\n\t\t\t//\r\n\t\t\t//\t\tFor `dijit/form/MappedTextBox` subclasses, which have both\r\n\t\t\t//\t\ta \"displayed value\" and a separate \"submit value\",\r\n\t\t\t//\t\tThis treats the \"displayed value\" as the master value, computing the\r\n\t\t\t//\t\tsubmit value from it via this.parse().\r\n\t\t\treturn this.parse(this.get('displayedValue'), this.constraints);\r\n\t\t},\r\n\r\n\t\t_setValueAttr: function(value, /*Boolean?*/ priorityChange, /*String?*/ formattedValue){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHook so set('value', ...) works.\r\n\t\t\t//\r\n\t\t\t// description:\r\n\t\t\t//\t\tSets the value of the widget to \"value\" which can be of\r\n\t\t\t//\t\tany type as determined by the widget.\r\n\t\t\t//\r\n\t\t\t// value:\r\n\t\t\t//\t\tThe visual element value is also set to a corresponding,\r\n\t\t\t//\t\tbut not necessarily the same, value.\r\n\t\t\t//\r\n\t\t\t// formattedValue:\r\n\t\t\t//\t\tIf specified, used to set the visual element value,\r\n\t\t\t//\t\totherwise a computed visual value is used.\r\n\t\t\t//\r\n\t\t\t// priorityChange:\r\n\t\t\t//\t\tIf true, an onChange event is fired immediately instead of\r\n\t\t\t//\t\twaiting for the next blur event.\r\n\r\n\t\t\tvar filteredValue;\r\n\t\t\tif(value !== undefined){\r\n\t\t\t\t// TODO: this is calling filter() on both the display value and the actual value.\r\n\t\t\t\t// I added a comment to the filter() definition about this, but it should be changed.\r\n\t\t\t\tfilteredValue = this.filter(value);\r\n\t\t\t\tif(typeof formattedValue != \"string\"){\r\n\t\t\t\t\tif(filteredValue !== null && ((typeof filteredValue != \"number\") || !isNaN(filteredValue))){\r\n\t\t\t\t\t\tformattedValue = this.filter(this.format(filteredValue, this.constraints));\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tformattedValue = '';\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// Ensure the filtered value does not change after being formatted. See track #17955.\r\n\t\t\t\t\t//\r\n\t\t\t\t\t// This check is only applied when the formatted value is not specified by the caller in order to allow the \r\n\t\t\t\t\t// behavior to be overriden. This is needed whenever value synonyms cannot be determined using parse/compare. For\r\n\t\t\t\t\t// example, dijit/form/FilteringSelect determines the formatted value asynchronously and applies it using a \r\n\t\t\t\t\t// callback to this method.\r\n\t\t\t\t\t//\r\n\t\t\t\t\t// TODO: Should developers be warned that they broke the round trip on format?\r\n\t\t\t\t\tif (this.compare(filteredValue, this.filter(this.parse(formattedValue, this.constraints))) != 0){\r\n\t\t\t\t\t\tformattedValue = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(formattedValue != null /* and !undefined */ && ((typeof formattedValue) != \"number\" || !isNaN(formattedValue)) && this.textbox.value != formattedValue){\r\n\t\t\t\tthis.textbox.value = formattedValue;\r\n\t\t\t\tthis._set(\"displayedValue\", this.get(\"displayedValue\"));\r\n\t\t\t}\r\n\r\n\t\t\tthis.inherited(arguments, [filteredValue, priorityChange]);\r\n\t\t},\r\n\r\n\t\t// displayedValue: String\r\n\t\t//\t\tFor subclasses like ComboBox where the displayed value\r\n\t\t//\t\t(ex: Kentucky) and the serialized value (ex: KY) are different,\r\n\t\t//\t\tthis represents the displayed value.\r\n\t\t//\r\n\t\t//\t\tSetting 'displayedValue' through set('displayedValue', ...)\r\n\t\t//\t\tupdates 'value', and vice-versa.  Otherwise 'value' is updated\r\n\t\t//\t\tfrom 'displayedValue' periodically, like onBlur etc.\r\n\t\t//\r\n\t\t//\t\tTODO: move declaration to MappedTextBox?\r\n\t\t//\t\tProblem is that ComboBox references displayedValue,\r\n\t\t//\t\tfor benefit of FilteringSelect.\r\n\t\tdisplayedValue: \"\",\r\n\r\n\t\t_getDisplayedValueAttr: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHook so get('displayedValue') works.\r\n\t\t\t// description:\r\n\t\t\t//\t\tReturns the displayed value (what the user sees on the screen),\r\n\t\t\t//\t\tafter filtering (ie, trimming spaces etc.).\r\n\t\t\t//\r\n\t\t\t//\t\tFor some subclasses of TextBox (like ComboBox), the displayed value\r\n\t\t\t//\t\tis different from the serialized value that's actually\r\n\t\t\t//\t\tsent to the server (see `dijit/form/ValidationTextBox.serialize()`)\r\n\r\n\t\t\t// TODO: maybe we should update this.displayedValue on every keystroke so that we don't need\r\n\t\t\t// this method\r\n\t\t\t// TODO: this isn't really the displayed value when the user is typing\r\n\t\t\treturn this.filter(this.textbox.value);\r\n\t\t},\r\n\r\n\t\t_setDisplayedValueAttr: function(/*String*/ value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHook so set('displayedValue', ...) works.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSets the value of the visual element to the string \"value\".\r\n\t\t\t//\t\tThe widget value is also set to a corresponding,\r\n\t\t\t//\t\tbut not necessarily the same, value.\r\n\r\n\t\t\tif(value == null /* or undefined */){\r\n\t\t\t\tvalue = ''\r\n\t\t\t}\r\n\t\t\telse if(typeof value != \"string\"){\r\n\t\t\t\tvalue = String(value)\r\n\t\t\t}\r\n\r\n\t\t\tthis.textbox.value = value;\r\n\r\n\t\t\t// sets the serialized value to something corresponding to specified displayedValue\r\n\t\t\t// (if possible), and also updates the textbox.value, for example converting \"123\"\r\n\t\t\t// to \"123.00\"\r\n\t\t\tthis._setValueAttr(this.get('value'), undefined);\r\n\r\n\t\t\tthis._set(\"displayedValue\", this.get('displayedValue'));\r\n\t\t},\r\n\r\n\t\tformat: function(value /*=====, constraints =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReplaceable function to convert a value to a properly formatted string.\r\n\t\t\t// value: String\r\n\t\t\t// constraints: Object\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected extension\r\n\t\t\treturn value == null /* or undefined */ ? \"\" : (value.toString ? value.toString() : value);\r\n\t\t},\r\n\r\n\t\tparse: function(value /*=====, constraints =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReplaceable function to convert a formatted string to a value\r\n\t\t\t// value: String\r\n\t\t\t// constraints: Object\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected extension\r\n\r\n\t\t\treturn value;\t// String\r\n\t\t},\r\n\r\n\t\t_refreshState: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAfter the user types some characters, etc., this method is\r\n\t\t\t//\t\tcalled to check the field for validity etc.  The base method\r\n\t\t\t//\t\tin `dijit/form/TextBox` does nothing, but subclasses override.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t},\r\n\r\n\t\t onInput: function(/*===== event =====*/){\r\n\t\t\t // summary:\r\n\t\t\t //\t\tConnect to this function to receive notifications of various user data-input events.\r\n\t\t\t //\t\tReturn false to cancel the event and prevent it from being processed.\r\n\t\t\t // event:\r\n\t\t\t //\t\tkeydown | keypress | cut | paste | input\r\n\t\t\t // tags:\r\n\t\t\t //\t\tcallback\r\n\t\t },\r\n\r\n\t\t__skipInputEvent: false,\r\n\t\t_onInput: function(/*Event*/ evt){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled AFTER the input event has happened\r\n\r\n\t\t\tthis._processInput(evt);\r\n\r\n\t\t\tif(this.intermediateChanges){\r\n\t\t\t\t// allow the key to post to the widget input box\r\n\t\t\t\tthis.defer(function(){\r\n\t\t\t\t\tthis._handleOnChange(this.get('value'), false);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_processInput: function(/*Event*/ evt){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDefault action handler for user input events\r\n\r\n\t\t\tthis._refreshState();\r\n\r\n\t\t\t// In case someone is watch()'ing for changes to displayedValue\r\n\t\t\tthis._set(\"displayedValue\", this.get(\"displayedValue\"));\r\n\t\t},\r\n\r\n\t\tpostCreate: function(){\r\n\t\t\t// setting the value here is needed since value=\"\" in the template causes \"undefined\"\r\n\t\t\t// and setting in the DOM (instead of the JS object) helps with form reset actions\r\n\t\t\tthis.textbox.setAttribute(\"value\", this.textbox.value); // DOM and JS values should be the same\r\n\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\t// normalize input events to reduce spurious event processing\r\n\t\t\t//\tonkeydown: do not forward modifier keys\r\n\t\t\t//\t\t       set charOrCode to numeric keycode\r\n\t\t\t//\tonkeypress: do not forward numeric charOrCode keys (already sent through onkeydown)\r\n\t\t\t//\tonpaste & oncut: set charOrCode to 229 (IME)\r\n\t\t\t//\toninput: if primary event not already processed, set charOrCode to 229 (IME), else do not forward\r\n\t\t\tfunction handleEvent(e){\r\n\t\t\t\tvar charOrCode;\r\n\t\t\t\tif(e.type == \"keydown\"){\r\n\t\t\t\t\tcharOrCode = e.keyCode;\r\n\t\t\t\t\tswitch(charOrCode){ // ignore state keys\r\n\t\t\t\t\t\tcase keys.SHIFT:\r\n\t\t\t\t\t\tcase keys.ALT:\r\n\t\t\t\t\t\tcase keys.CTRL:\r\n\t\t\t\t\t\tcase keys.META:\r\n\t\t\t\t\t\tcase keys.CAPS_LOCK:\r\n\t\t\t\t\t\tcase keys.NUM_LOCK:\r\n\t\t\t\t\t\tcase keys.SCROLL_LOCK:\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(!e.ctrlKey && !e.metaKey && !e.altKey){ // no modifiers\r\n\t\t\t\t\t\tswitch(charOrCode){ // ignore location keys\r\n\t\t\t\t\t\t\tcase keys.NUMPAD_0:\r\n\t\t\t\t\t\t\tcase keys.NUMPAD_1:\r\n\t\t\t\t\t\t\tcase keys.NUMPAD_2:\r\n\t\t\t\t\t\t\tcase keys.NUMPAD_3:\r\n\t\t\t\t\t\t\tcase keys.NUMPAD_4:\r\n\t\t\t\t\t\t\tcase keys.NUMPAD_5:\r\n\t\t\t\t\t\t\tcase keys.NUMPAD_6:\r\n\t\t\t\t\t\t\tcase keys.NUMPAD_7:\r\n\t\t\t\t\t\t\tcase keys.NUMPAD_8:\r\n\t\t\t\t\t\t\tcase keys.NUMPAD_9:\r\n\t\t\t\t\t\t\tcase keys.NUMPAD_MULTIPLY:\r\n\t\t\t\t\t\t\tcase keys.NUMPAD_PLUS:\r\n\t\t\t\t\t\t\tcase keys.NUMPAD_ENTER:\r\n\t\t\t\t\t\t\tcase keys.NUMPAD_MINUS:\r\n\t\t\t\t\t\t\tcase keys.NUMPAD_PERIOD:\r\n\t\t\t\t\t\t\tcase keys.NUMPAD_DIVIDE:\r\n\t\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif((charOrCode >= 65 && charOrCode <= 90) || (charOrCode >= 48 && charOrCode <= 57) || charOrCode == keys.SPACE){\r\n\t\t\t\t\t\t\treturn; // keypress will handle simple non-modified printable keys\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar named = false;\r\n\t\t\t\t\t\tfor(var i in keys){\r\n\t\t\t\t\t\t\tif(keys[i] === e.keyCode){\r\n\t\t\t\t\t\t\t\tnamed = true;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!named){\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t} // only allow named ones through\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tcharOrCode = e.charCode >= 32 ? String.fromCharCode(e.charCode) : e.charCode;\r\n\t\t\t\tif(!charOrCode){\r\n\t\t\t\t\tcharOrCode = (e.keyCode >= 65 && e.keyCode <= 90) || (e.keyCode >= 48 && e.keyCode <= 57) || e.keyCode == keys.SPACE ? String.fromCharCode(e.keyCode) : e.keyCode;\r\n\t\t\t\t}\r\n\t\t\t\tif(!charOrCode){\r\n\t\t\t\t\tcharOrCode = 229; // IME\r\n\t\t\t\t}\r\n\t\t\t\tif(e.type == \"keypress\"){\r\n\t\t\t\t\tif(typeof charOrCode != \"string\"){\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif((charOrCode >= 'a' && charOrCode <= 'z') || (charOrCode >= 'A' && charOrCode <= 'Z') || (charOrCode >= '0' && charOrCode <= '9') || (charOrCode === ' ')){\r\n\t\t\t\t\t\tif(e.ctrlKey || e.metaKey || e.altKey){\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t} // can only be stopped reliably in keydown\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(e.type == \"input\"){\r\n\t\t\t\t\tif(this.__skipInputEvent){ // duplicate event\r\n\t\t\t\t\t\tthis.__skipInputEvent = false;\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis.__skipInputEvent = true;\r\n\t\t\t\t}\r\n\t\t\t\t// create fake event to set charOrCode and to know if preventDefault() was called\r\n\t\t\t\tvar faux = { faux: true }, attr;\r\n\t\t\t\tfor(attr in e){\r\n\t\t\t\t\tif(!/^(layer[XY]|returnValue|keyLocation)$/.test(attr)){ // prevent WebKit warnings\r\n\t\t\t\t\t\tvar v = e[attr];\r\n\t\t\t\t\t\tif(typeof v != \"function\" && typeof v != \"undefined\"){\r\n\t\t\t\t\t\t\tfaux[attr] = v;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tlang.mixin(faux, {\r\n\t\t\t\t\tcharOrCode: charOrCode,\r\n\t\t\t\t\t_wasConsumed: false,\r\n\t\t\t\t\tpreventDefault: function(){\r\n\t\t\t\t\t\tfaux._wasConsumed = true;\r\n\t\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\t},\r\n\t\t\t\t\tstopPropagation: function(){\r\n\t\t\t\t\t\te.stopPropagation();\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\t// give web page author a chance to consume the event\r\n\t\t\t\t//console.log(faux.type + ', charOrCode = (' + (typeof charOrCode) + ') ' + charOrCode + ', ctrl ' + !!faux.ctrlKey + ', alt ' + !!faux.altKey + ', meta ' + !!faux.metaKey + ', shift ' + !!faux.shiftKey);\r\n\t\t\t\tif(this.onInput(faux) === false){ // return false means stop\r\n\t\t\t\t\tfaux.preventDefault();\r\n\t\t\t\t\tfaux.stopPropagation();\r\n\t\t\t\t}\r\n\t\t\t\tif(faux._wasConsumed){\r\n\t\t\t\t\treturn;\r\n\t\t\t\t} // if preventDefault was called\r\n\t\t\t\tthis.defer(function(){\r\n\t\t\t\t\tthis._onInput(faux);\r\n\t\t\t\t}); // widget notification after key has posted\r\n\t\t\t}\r\n\t\t\tthis.own(\r\n\t\t\t\ton(this.textbox, \"keydown, keypress, paste, cut, input, compositionend\", lang.hitch(this, handleEvent)),\r\n\r\n\t\t\t\t// Allow keypress to bubble to this.domNode, so that TextBox.on(\"keypress\", ...) works,\r\n\t\t\t\t// but prevent it from further propagating, so that typing into a TextBox inside a Toolbar doesn't\r\n\t\t\t\t// trigger the Toolbar's letter key navigation.\r\n\t\t\t\ton(this.domNode, \"keypress\", function(e){ e.stopPropagation(); })\r\n\t\t\t);\r\n\t\t},\r\n\r\n\t\t_blankValue: '', // if the textbox is blank, what value should be reported\r\n\t\tfilter: function(val){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAuto-corrections (such as trimming) that are applied to textbox\r\n\t\t\t//\t\tvalue on blur or form submit.\r\n\t\t\t// description:\r\n\t\t\t//\t\tFor MappedTextBox subclasses, this is called twice\r\n\t\t\t//\r\n\t\t\t//\t\t- once with the display value\r\n\t\t\t//\t\t- once the value as set/returned by set('value', ...)\r\n\t\t\t//\r\n\t\t\t//\t\tand get('value'), ex: a Number for NumberTextBox.\r\n\t\t\t//\r\n\t\t\t//\t\tIn the latter case it does corrections like converting null to NaN.  In\r\n\t\t\t//\t\tthe former case the NumberTextBox.filter() method calls this.inherited()\r\n\t\t\t//\t\tto execute standard trimming code in TextBox.filter().\r\n\t\t\t//\r\n\t\t\t//\t\tTODO: break this into two methods in 2.0\r\n\t\t\t//\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected extension\r\n\t\t\tif(val === null){\r\n\t\t\t\treturn this._blankValue;\r\n\t\t\t}\r\n\t\t\tif(typeof val != \"string\"){\r\n\t\t\t\treturn val;\r\n\t\t\t}\r\n\t\t\tif(this.trim){\r\n\t\t\t\tval = lang.trim(val);\r\n\t\t\t}\r\n\t\t\tif(this.uppercase){\r\n\t\t\t\tval = val.toUpperCase();\r\n\t\t\t}\r\n\t\t\tif(this.lowercase){\r\n\t\t\t\tval = val.toLowerCase();\r\n\t\t\t}\r\n\t\t\tif(this.propercase){\r\n\t\t\t\tval = val.replace(/[^\\s]+/g, function(word){\r\n\t\t\t\t\treturn word.substring(0, 1).toUpperCase() + word.substring(1);\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\treturn val;\r\n\t\t},\r\n\r\n\t\t_setBlurValue: function(){\r\n\t\t\t// Format the displayed value, for example (for NumberTextBox) convert 1.4 to 1.400,\r\n\t\t\t// or (for CurrencyTextBox) 2.50 to $2.50\r\n\r\n\t\t\tthis._setValueAttr(this.get('value'), true);\r\n\t\t},\r\n\r\n\t\t_onBlur: function(e){\r\n\t\t\tif(this.disabled){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis._setBlurValue();\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\t_isTextSelected: function(){\r\n\t\t\treturn this.textbox.selectionStart != this.textbox.selectionEnd;\r\n\t\t},\r\n\r\n\t\t_onFocus: function(/*String*/ by){\r\n\t\t\tif(this.disabled || this.readOnly){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Select all text on focus via click if nothing already selected.\r\n\t\t\t// Since mouse-up will clear the selection, need to defer selection until after mouse-up.\r\n\t\t\t// Don't do anything on focus by tabbing into the widget since there's no associated mouse-up event.\r\n\t\t\tif(this.selectOnClick && by == \"mouse\"){\r\n\t\t\t\t// Use on.once() to only select all text on first click only; otherwise users would have no way to clear\r\n\t\t\t\t// the selection.\r\n\t\t\t\tthis._selectOnClickHandle = on.once(this.domNode, \"mouseup, touchend\", lang.hitch(this, function(evt){\r\n\t\t\t\t\t// Check if the user selected some text manually (mouse-down, mouse-move, mouse-up)\r\n\t\t\t\t\t// and if not, then select all the text\r\n\t\t\t\t\tif(!this._isTextSelected()){\r\n\t\t\t\t\t\t_TextBoxMixin.selectInputText(this.textbox);\r\n\t\t\t\t\t}\r\n\t\t\t\t}));\r\n\t\t\t\tthis.own(this._selectOnClickHandle);\r\n\r\n\t\t\t\t// in case the mouseup never comes\r\n\t\t\t\tthis.defer(function(){\r\n\t\t\t\t\tif(this._selectOnClickHandle){\r\n\t\t\t\t\t\tthis._selectOnClickHandle.remove();\r\n\t\t\t\t\t\tthis._selectOnClickHandle = null;\r\n\t\t\t\t\t}\r\n\t\t\t\t}, 500); // if mouseup not received soon, then treat it as some gesture\r\n\t\t\t}\r\n\t\t\t// call this.inherited() before refreshState(), since this.inherited() will possibly scroll the viewport\r\n\t\t\t// (to scroll the TextBox into view), which will affect how _refreshState() positions the tooltip\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\tthis._refreshState();\r\n\t\t},\r\n\r\n\t\treset: function(){\r\n\t\t\t// Overrides `dijit/_FormWidget/reset()`.\r\n\t\t\t// Additionally resets the displayed textbox value to ''\r\n\t\t\tthis.textbox.value = '';\r\n\t\t\tthis.inherited(arguments);\r\n\t\t}\r\n\t});\r\n\r\n\tif(has(\"dojo-bidi\")){\r\n\t\t_TextBoxMixin = declare(\"dijit.form._TextBoxMixin\", _TextBoxMixin, {\r\n\t\t\t_setValueAttr: function(){\r\n\t\t\t\tthis.inherited(arguments);\r\n\t\t\t\tthis.applyTextDir(this.focusNode);\r\n\t\t\t},\r\n\t\t\t_setDisplayedValueAttr: function(){\r\n\t\t\t\tthis.inherited(arguments);\r\n\t\t\t\tthis.applyTextDir(this.focusNode);\r\n\t\t\t},\r\n\t\t\t_onInput: function(){\r\n\t\t\t\tthis.applyTextDir(this.focusNode);\r\n\t\t\t\tthis.inherited(arguments);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\t_TextBoxMixin._setSelectionRange = dijit._setSelectionRange = function(/*DomNode*/ element, /*Number?*/ start, /*Number?*/ stop){\r\n\t\tif(element.setSelectionRange){\r\n\t\t\telement.setSelectionRange(start, stop);\r\n\t\t}\r\n\t};\r\n\r\n\t_TextBoxMixin.selectInputText = dijit.selectInputText = function(/*DomNode*/ element, /*Number?*/ start, /*Number?*/ stop){\r\n\t\t// summary:\r\n\t\t//\t\tSelect text in the input element argument, from start (default 0), to stop (default end).\r\n\r\n\t\t// TODO: use functions in _editor/selection.js?\r\n\t\telement = dom.byId(element);\r\n\t\tif(isNaN(start)){\r\n\t\t\tstart = 0;\r\n\t\t}\r\n\t\tif(isNaN(stop)){\r\n\t\t\tstop = element.value ? element.value.length : 0;\r\n\t\t}\r\n\t\ttry{\r\n\t\t\telement.focus();\r\n\t\t\t_TextBoxMixin._setSelectionRange(element, start, stop);\r\n\t\t}catch(e){ /* squelch random errors (esp. on IE) from unexpected focus changes or DOM nodes being hidden */\r\n\t\t}\r\n\t};\r\n\r\n\treturn _TextBoxMixin;\r\n});\r\n"]}