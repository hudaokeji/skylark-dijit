{"version":3,"sources":["form/_DateTimeTextBox.js"],"names":["define","date","locale","stamp","declare","lang","RangeBoundTextBox","_HasDropDown","template","Date","templateString","hasDownArrow","cssStateNodes","_buttonNode","_unboundedConstraints","pattern","regexp","datePackage","postMixInProperties","this","inherited","arguments","_set","compare","val1","val2","isInvalid1","_isInvalidDate","isInvalid2","fval1","format","fval2","pval1","parse","pval2","_selector","autoWidth","value","constraints","dateLocaleModule","_isEmpty","undefined","serialize","val","options","toGregorian","toISOString","dropDownDefaultValue","_blankValue","popupClass","constructor","params","dateModule","getObject","dateClassObj","_invalidDate","prototype","toString","buildRendering","style","display","domNode","baseClass","_setConstraintsAttr","selector","fullYear","fromISO","fromISOString","min","max","mixin","isNaN","_setValueAttr","priorityChange","formattedValue","filterString","dropDown","set","attr","oldValue","_get","_setDropDownDefaultValueAttr","openDropDown","callback","destroy","PopupProto","isString","textBox","get","onChange","id","dir","textDir","currentFocus","isDisabledDate","rangeCheck","_getDisplayedValueAttr","textbox","_setDisplayedValueAttr"],"mappings":"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","file":"../../form/_DateTimeTextBox.js","sourcesContent":["define([\r\n\t\"dojo/date\", // date date.compare\r\n\t\"dojo/date/locale\", // locale.regexp\r\n\t\"dojo/date/stamp\", // stamp.fromISOString stamp.toISOString\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/_base/lang\", // lang.getObject\r\n\t\"./RangeBoundTextBox\",\r\n\t\"../_HasDropDown\",\r\n\t\"dojo/text!./templates/DropDownBox.html\"\r\n], function(date, locale, stamp, declare, lang, RangeBoundTextBox, _HasDropDown, template){\r\n\r\n\t// module:\r\n\t//\t\tdijit/form/_DateTimeTextBox\r\n\r\n\tnew Date(\"X\"); // workaround for #11279, new Date(\"\") == NaN\r\n\r\n\tvar _DateTimeTextBox = declare(\"dijit.form._DateTimeTextBox\", [RangeBoundTextBox, _HasDropDown], {\r\n\t\t// summary:\r\n\t\t//\t\tBase class for validating, serializable, range-bound date or time text box.\r\n\r\n\t\ttemplateString: template,\r\n\r\n\t\t// hasDownArrow: [const] Boolean\r\n\t\t//\t\tSet this textbox to display a down arrow button, to open the drop down list.\r\n\t\thasDownArrow: true,\r\n\r\n\t\t// Set classes like dijitDownArrowButtonHover depending on mouse action over button node\r\n\t\tcssStateNodes: {\r\n\t\t\t\"_buttonNode\": \"dijitDownArrowButton\"\r\n\t\t},\r\n\r\n\t\t/*=====\r\n\t\t// constraints: _DateTimeTextBox.__Constraints\r\n\t\t//\t\tDespite the name, this parameter specifies both constraints on the input\r\n\t\t//\t\t(including starting/ending dates/times allowed) as well as\r\n\t\t//\t\tformatting options like whether the date is displayed in long (ex: December 25, 2005)\r\n\t\t//\t\tor short (ex: 12/25/2005) format.  See `dijit/form/_DateTimeTextBox.__Constraints` for details.\r\n\t\tconstraints: {},\r\n\t\t======*/\r\n\r\n\t\t// The constraints without the min/max properties. Used by the compare() method\r\n\t\t_unboundedConstraints: {},\r\n\r\n\t\t// Override ValidationTextBox.pattern.... we use a reg-ex generating function rather\r\n\t\t// than a straight regexp to deal with locale  (plus formatting options too?)\r\n\t\tpattern: locale.regexp,\r\n\r\n\t\t// datePackage: String\r\n\t\t//\t\tJavaScript namespace to find calendar routines.\t If unspecified, uses Gregorian calendar routines\r\n\t\t//\t\tat dojo/date and dojo/date/locale.\r\n\t\tdatePackage: \"\",\r\n\t\t//\t\tTODO: for 2.0, replace datePackage with dateModule and dateLocalModule attributes specifying MIDs,\r\n\t\t//\t\tor alternately just get rid of this completely and tell user to use module ID remapping\r\n\t\t//\t\tvia require\r\n\r\n\t\tpostMixInProperties: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis._set(\"type\", \"text\"); // in case type=\"date\"|\"time\" was specified which messes up parse/format\r\n\t\t},\r\n\r\n\t\t// Override _FormWidget.compare() to work for dates/times\r\n\t\tcompare: function(/*Date*/ val1, /*Date*/ val2){\r\n\t\t\tvar isInvalid1 = this._isInvalidDate(val1);\r\n\t\t\tvar isInvalid2 = this._isInvalidDate(val2);\r\n\t\t\tif (isInvalid1 || isInvalid2){\r\n\t\t\t\treturn (isInvalid1 && isInvalid2) ? 0 : (!isInvalid1 ? 1 : -1);\r\n\t\t\t}\r\n\t\t\t// Format and parse the values before comparing them to make sure that only the parts of the\r\n\t\t\t// date that will make the \"round trip\" get compared.\r\n\t\t\tvar fval1 = this.format(val1, this._unboundedConstraints),\r\n\t\t\t\tfval2 = this.format(val2, this._unboundedConstraints),\r\n\t\t\t\tpval1 = this.parse(fval1, this._unboundedConstraints),\r\n\t\t\t\tpval2 = this.parse(fval2, this._unboundedConstraints);\r\n\r\n\t\t\treturn fval1 == fval2 ? 0 : date.compare(pval1, pval2, this._selector);\r\n\t\t},\r\n\r\n\t\t// flag to _HasDropDown to make drop down Calendar width == <input> width\r\n\t\tautoWidth: true,\r\n\r\n\t\tformat: function(/*Date*/ value, /*locale.__FormatOptions*/ constraints){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFormats the value as a Date, according to specified locale (second argument)\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t\tif(!value){ return ''; }\r\n\t\t\treturn this.dateLocaleModule.format(value, constraints);\r\n\t\t},\r\n\r\n\t\t\"parse\": function(/*String*/ value, /*locale.__FormatOptions*/ constraints){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tParses as string as a Date, according to constraints\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\r\n\t\t\treturn this.dateLocaleModule.parse(value, constraints) || (this._isEmpty(value) ? null : undefined);\t // Date\r\n\t\t},\r\n\r\n\t\t// Overrides ValidationTextBox.serialize() to serialize a date in canonical ISO format.\r\n\t\tserialize: function(/*anything*/ val, /*Object?*/ options){\r\n\t\t\tif(val.toGregorian){\r\n\t\t\t\tval = val.toGregorian();\r\n\t\t\t}\r\n\t\t\treturn stamp.toISOString(val, options);\r\n\t\t},\r\n\r\n\t\t// dropDownDefaultValue: Date\r\n\t\t//\t\tThe default value to focus in the popupClass widget when the textbox value is empty.\r\n\t\tdropDownDefaultValue : new Date(),\r\n\r\n\t\t// value: Date\r\n\t\t//\t\tThe value of this widget as a JavaScript Date object.  Use get(\"value\") / set(\"value\", val) to manipulate.\r\n\t\t//\t\tWhen passed to the parser in markup, must be specified according to `dojo/date/stamp.fromISOString()`\r\n\t\tvalue: new Date(\"\"),\t// value.toString()=\"NaN\"\r\n\r\n\t\t_blankValue: null,\t// used by filter() when the textbox is blank\r\n\r\n\t\t// popupClass: [protected extension] String\r\n\t\t//\t\tName of the popup widget class used to select a date/time.\r\n\t\t//\t\tSubclasses should specify this.\r\n\t\tpopupClass: \"\", // default is no popup = text only\r\n\r\n\r\n\t\t// _selector: [protected extension] String\r\n\t\t//\t\tSpecifies constraints.selector passed to dojo.date functions, should be either\r\n\t\t//\t\t\"date\" or \"time\".\r\n\t\t//\t\tSubclass must specify this.\r\n\t\t_selector: \"\",\r\n\r\n\t\tconstructor: function(params /*===== , srcNodeRef =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate the widget.\r\n\t\t\t// params: Object|null\r\n\t\t\t//\t\tHash of initialization parameters for widget, including scalar values (like title, duration etc.)\r\n\t\t\t//\t\tand functions, typically callbacks like onClick.\r\n\t\t\t//\t\tThe hash can contain any of the widget's properties, excluding read-only properties.\r\n\t\t\t// srcNodeRef: DOMNode|String?\r\n\t\t\t//\t\tIf a srcNodeRef (DOM node) is specified, replace srcNodeRef with my generated DOM tree\r\n\r\n\t\t\tparams = params || {};\r\n\t\t\tthis.dateModule = params.datePackage ? lang.getObject(params.datePackage, false) : date;\r\n\t\t\tthis.dateClassObj = this.dateModule.Date || Date;\r\n\t\t\tif(!(this.dateClassObj instanceof Date)){\r\n\t\t\t\tthis.value = new this.dateClassObj(this.value);\r\n\t\t\t}\r\n\t\t\tthis.dateLocaleModule = params.datePackage ? lang.getObject(params.datePackage+\".locale\", false) : locale;\r\n\t\t\tthis._set('pattern', this.dateLocaleModule.regexp);\r\n\t\t\tthis._invalidDate = this.constructor.prototype.value.toString();\r\n\t\t},\r\n\r\n\t\tbuildRendering: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\tif(!this.hasDownArrow){\r\n\t\t\t\tthis._buttonNode.style.display = \"none\";\r\n\t\t\t}\r\n\r\n\t\t\t// If hasDownArrow is false, we basically just want to treat the whole widget as the\r\n\t\t\t// button.\r\n\t\t\tif(!this.hasDownArrow){\r\n\t\t\t\tthis._buttonNode = this.domNode;\r\n\t\t\t\tthis.baseClass += \" dijitComboBoxOpenOnClick\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_setConstraintsAttr: function(/*Object*/ constraints){\r\n\t\t\tconstraints.selector = this._selector;\r\n\t\t\tconstraints.fullYear = true; // see #5465 - always format with 4-digit years\r\n\t\t\tvar fromISO = stamp.fromISOString;\r\n\t\t\tif(typeof constraints.min == \"string\"){\r\n\t\t\t\tconstraints.min = fromISO(constraints.min);\r\n\t\t\t\tif(!(this.dateClassObj instanceof Date)){\r\n\t\t\t\t\tconstraints.min = new this.dateClassObj(constraints.min);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(typeof constraints.max == \"string\"){\r\n\t\t\t\tconstraints.max = fromISO(constraints.max);\r\n\t\t\t\tif(!(this.dateClassObj instanceof Date)){\r\n\t\t\t\t\tconstraints.max = new this.dateClassObj(constraints.max);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis._unboundedConstraints = lang.mixin({}, this.constraints, {min: null, max: null});\r\n\t\t},\r\n\r\n\t\t_isInvalidDate: function(/*Date*/ value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRuns various tests on the value, checking for invalid conditions\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\treturn !value || isNaN(value) || typeof value != \"object\" || value.toString() == this._invalidDate;\r\n\t\t},\r\n\r\n\t\t_setValueAttr: function(/*Date|String*/ value, /*Boolean?*/ priorityChange, /*String?*/ formattedValue){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSets the date on this textbox. Note: value can be a JavaScript Date literal or a string to be parsed.\r\n\t\t\tif(value !== undefined){\r\n\t\t\t\tif(typeof value == \"string\"){\r\n\t\t\t\t\tvalue = stamp.fromISOString(value);\r\n\t\t\t\t}\r\n\t\t\t\tif(this._isInvalidDate(value)){\r\n\t\t\t\t\tvalue = null;\r\n\t\t\t\t}\r\n\t\t\t\tif(value instanceof Date && !(this.dateClassObj instanceof Date)){\r\n\t\t\t\t\tvalue = new this.dateClassObj(value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.inherited(arguments, [value, priorityChange, formattedValue]);\r\n\t\t\tif(this.value instanceof Date){\r\n\t\t\t\tthis.filterString = \"\";\r\n\t\t\t}\r\n\t\t\tif(this.dropDown){\r\n\t\t\t\tthis.dropDown.set('value', value, false);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_set: function(attr, value){\r\n\t\t\t// Avoid spurious watch() notifications when value is changed to new Date object w/the same value\r\n\t\t\tif(attr == \"value\"){\r\n\t\t\t\tif(value instanceof Date && !(this.dateClassObj instanceof Date)){\r\n\t\t\t\t\tvalue = new this.dateClassObj(value);\r\n\t\t\t\t}\r\n\t\t\t\tvar oldValue = this._get(\"value\");\r\n\t\t\t\tif(oldValue instanceof this.dateClassObj && this.compare(value, oldValue) == 0){\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\t_setDropDownDefaultValueAttr: function(/*Date*/ val){\r\n\t\t\tif(this._isInvalidDate(val)){\r\n\t\t\t\t// convert null setting into today's date, since there needs to be *some* default at all times.\r\n\t\t\t\t val = new this.dateClassObj();\r\n\t\t\t}\r\n\t\t\tthis._set(\"dropDownDefaultValue\", val);\r\n\t\t},\r\n\r\n\t\topenDropDown: function(/*Function*/ callback){\r\n\t\t\t// rebuild drop down every time, so that constraints get copied (#6002)\r\n\t\t\tif(this.dropDown){\r\n\t\t\t\tthis.dropDown.destroy();\r\n\t\t\t}\r\n\t\t\tvar PopupProto = lang.isString(this.popupClass) ? lang.getObject(this.popupClass, false) : this.popupClass,\r\n\t\t\t\ttextBox = this,\r\n\t\t\t\tvalue = this.get(\"value\");\r\n\t\t\tthis.dropDown = new PopupProto({\r\n\t\t\t\tonChange: function(value){\r\n\t\t\t\t\t// this will cause InlineEditBox and other handlers to do stuff so make sure it's last\r\n\t\t\t\t\ttextBox.set('value', value, true);\r\n\t\t\t\t},\r\n\t\t\t\tid: this.id + \"_popup\",\r\n\t\t\t\tdir: textBox.dir,\r\n\t\t\t\tlang: textBox.lang,\r\n\t\t\t\tvalue: value,\r\n\t\t\t\ttextDir: textBox.textDir,\r\n\t\t\t\tcurrentFocus: !this._isInvalidDate(value) ? value : this.dropDownDefaultValue,\r\n\t\t\t\tconstraints: textBox.constraints,\r\n\t\t\t\tfilterString: textBox.filterString, // for TimeTextBox, to filter times shown\r\n\t\t\t\tdatePackage: textBox.datePackage,\r\n\t\t\t\tisDisabledDate: function(/*Date*/ date){\r\n\t\t\t\t\t// summary:\r\n\t\t\t\t\t//\t\tdisables dates outside of the min/max of the _DateTimeTextBox\r\n\t\t\t\t\treturn !textBox.rangeCheck(date, textBox.constraints);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\t_getDisplayedValueAttr: function(){\r\n\t\t\treturn this.textbox.value;\r\n\t\t},\r\n\r\n\t\t_setDisplayedValueAttr: function(/*String*/ value, /*Boolean?*/ priorityChange){\r\n\t\t\tthis._setValueAttr(this.parse(value, this.constraints), priorityChange, value);\r\n\t\t}\r\n\t});\r\n\r\n\r\n\t/*=====\r\n\t _DateTimeTextBox.__Constraints = declare([RangeBoundTextBox.__Constraints, locale.__FormatOptions], {\r\n\t\t // summary:\r\n\t\t //\t\tSpecifies both the rules on valid/invalid values (first/last date/time allowed),\r\n\t\t //\t\tand also formatting options for how the date/time is displayed.\r\n\t\t // example:\r\n\t\t //\t\tTo restrict to dates within 2004, displayed in a long format like \"December 25, 2005\":\r\n\t\t //\t|\t\t{min:'2004-01-01',max:'2004-12-31', formatLength:'long'}\r\n\t });\r\n\t =====*/\r\n\r\n\treturn _DateTimeTextBox;\r\n});\r\n"]}