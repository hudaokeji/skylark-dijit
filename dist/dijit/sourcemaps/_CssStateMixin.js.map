{"version":3,"sources":["_CssStateMixin.js"],"names":["define","array","declare","dom","domClass","has","lang","on","domReady","touch","win","a11yclick","registry","CssStateMixin","hovering","active","_applyAttributes","ap","this","inherited","arguments","forEach","attr","watch","hitch","cssStateNodes","_trackMouseState","domNode","baseClass","_setStateClass","_cssMouseEvent","event","disabled","type","_set","_mouseDown","newStateClasses","split","multiply","modifier","concat","map","c","isLeftToRight","checkedState","checked","state","selected","_opened","readOnly","focused","tn","stateNode","classHash","className","_stateClasses","newClasses","push","join","_subnodeCssMouseEvent","node","clazz","evt","hover","isHovering","toggle","isActive","isFocused","_cssState","pointerHandler","target","relatedTarget","isDescendant","parentNode","widget","getEnclosingWidget","activeNode","body","over","out","press","release","getAttribute"],"mappings":"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","file":"../_CssStateMixin.js","sourcesContent":["define([\r\n\t\"dojo/_base/array\", // array.forEach array.map\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom\", // dom.isDescendant()\r\n\t\"dojo/dom-class\", // domClass.toggle\r\n\t\"dojo/has\",\r\n\t\"dojo/_base/lang\", // lang.hitch\r\n\t\"dojo/on\",\r\n\t\"dojo/domReady\",\r\n\t\"dojo/touch\",\r\n\t\"dojo/_base/window\", // win.body\r\n\t\"./a11yclick\",\r\n\t\"./registry\"\r\n], function(array, declare, dom, domClass, has, lang, on, domReady, touch, win, a11yclick, registry){\r\n\r\n\t// module:\r\n\t//\t\tdijit/_CssStateMixin\r\n\r\n\tvar CssStateMixin = declare(\"dijit._CssStateMixin\", [], {\r\n\t\t// summary:\r\n\t\t//\t\tMixin for widgets to set CSS classes on the widget DOM nodes depending on hover/mouse press/focus\r\n\t\t//\t\tstate changes, and also higher-level state changes such becoming disabled or selected.\r\n\t\t//\r\n\t\t// description:\r\n\t\t//\t\tBy mixing this class into your widget, and setting the this.baseClass attribute, it will automatically\r\n\t\t//\t\tmaintain CSS classes on the widget root node (this.domNode) depending on hover,\r\n\t\t//\t\tactive, focus, etc. state.   Ex: with a baseClass of dijitButton, it will apply the classes\r\n\t\t//\t\tdijitButtonHovered and dijitButtonActive, as the user moves the mouse over the widget and clicks it.\r\n\t\t//\r\n\t\t//\t\tIt also sets CSS like dijitButtonDisabled based on widget semantic state.\r\n\t\t//\r\n\t\t//\t\tBy setting the cssStateNodes attribute, a widget can also track events on subnodes (like buttons\r\n\t\t//\t\twithin the widget).\r\n\r\n\t\t/*=====\r\n\t\t // cssStateNodes: [protected] Object\r\n\t\t //\t\tSubclasses may define a cssStateNodes property that lists sub-nodes within the widget that\r\n\t\t //\t\tneed CSS classes applied on mouse hover/press and focus.\r\n\t\t //\r\n\t\t //\t\tEach entry in this optional hash is a an attach-point name (like \"upArrowButton\") mapped to a CSS class name\r\n\t\t //\t\t(like \"dijitUpArrowButton\"). Example:\r\n\t\t //\t|\t\t{\r\n\t\t //\t|\t\t\t\"upArrowButton\": \"dijitUpArrowButton\",\r\n\t\t //\t|\t\t\t\"downArrowButton\": \"dijitDownArrowButton\"\r\n\t\t //\t|\t\t}\r\n\t\t //\t\tThe above will set the CSS class dijitUpArrowButton to the this.upArrowButton DOMNode when it\r\n\t\t //\t\tis hovered, etc.\r\n\t\t cssStateNodes: {},\r\n\t\t =====*/\r\n\r\n\t\t// hovering: [readonly] Boolean\r\n\t\t//\t\tTrue if cursor is over this widget\r\n\t\thovering: false,\r\n\r\n\t\t// active: [readonly] Boolean\r\n\t\t//\t\tTrue if mouse was pressed while over this widget, and hasn't been released yet\r\n\t\tactive: false,\r\n\r\n\t\t_applyAttributes: function(){\r\n\t\t\t// This code would typically be in postCreate(), but putting in _applyAttributes() for\r\n\t\t\t// performance: so the class changes happen before DOM is inserted into the document.\r\n\t\t\t// Change back to postCreate() in 2.0.  See #11635.\r\n\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\t// Monitoring changes to disabled, readonly, etc. state, and update CSS class of root node\r\n\t\t\tarray.forEach([\"disabled\", \"readOnly\", \"checked\", \"selected\", \"focused\", \"state\", \"hovering\", \"active\", \"_opened\"], function(attr){\r\n\t\t\t\tthis.watch(attr, lang.hitch(this, \"_setStateClass\"));\r\n\t\t\t}, this);\r\n\r\n\t\t\t// Track hover and active mouse events on widget root node, plus possibly on subnodes\r\n\t\t\tfor(var ap in this.cssStateNodes || {}){\r\n\t\t\t\tthis._trackMouseState(this[ap], this.cssStateNodes[ap]);\r\n\t\t\t}\r\n\t\t\tthis._trackMouseState(this.domNode, this.baseClass);\r\n\r\n\t\t\t// Set state initially; there's probably no hover/active/focus state but widget might be\r\n\t\t\t// disabled/readonly/checked/selected so we want to set CSS classes for those conditions.\r\n\t\t\tthis._setStateClass();\r\n\t\t},\r\n\r\n\t\t_cssMouseEvent: function(/*Event*/ event){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHandler for CSS event on this.domNode. Sets hovering and active properties depending on mouse state,\r\n\t\t\t//\t\twhich triggers _setStateClass() to set appropriate CSS classes for this.domNode.\r\n\r\n\t\t\tif(!this.disabled){\r\n\t\t\t\tswitch(event.type){\r\n\t\t\t\t\tcase \"mouseover\":\r\n\t\t\t\t\tcase \"MSPointerOver\":\r\n\t\t\t\t\tcase \"pointerover\":\r\n\t\t\t\t\t\tthis._set(\"hovering\", true);\r\n\t\t\t\t\t\tthis._set(\"active\", this._mouseDown);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"mouseout\":\r\n\t\t\t\t\tcase \"MSPointerOut\":\r\n\t\t\t\t\tcase \"pointerout\":\r\n\t\t\t\t\t\tthis._set(\"hovering\", false);\r\n\t\t\t\t\t\tthis._set(\"active\", false);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"mousedown\":\r\n\t\t\t\t\tcase \"touchstart\":\r\n\t\t\t\t\tcase \"MSPointerDown\":\r\n\t\t\t\t\tcase \"pointerdown\":\r\n\t\t\t\t\tcase \"keydown\":\r\n\t\t\t\t\t\tthis._set(\"active\", true);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase \"mouseup\":\r\n\t\t\t\t\tcase \"dojotouchend\":\r\n\t\t\t\t\tcase \"MSPointerUp\":\r\n\t\t\t\t\tcase \"pointerup\":\r\n\t\t\t\t\tcase \"keyup\":\r\n\t\t\t\t\t\tthis._set(\"active\", false);\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_setStateClass: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUpdate the visual state of the widget by setting the css classes on this.domNode\r\n\t\t\t//\t\t(or this.stateNode if defined) by combining this.baseClass with\r\n\t\t\t//\t\tvarious suffixes that represent the current widget state(s).\r\n\t\t\t//\r\n\t\t\t// description:\r\n\t\t\t//\t\tIn the case where a widget has multiple\r\n\t\t\t//\t\tstates, it sets the class based on all possible\r\n\t\t\t//\t\tcombinations.  For example, an invalid form widget that is being hovered\r\n\t\t\t//\t\twill be \"dijitInput dijitInputInvalid dijitInputHover dijitInputInvalidHover\".\r\n\t\t\t//\r\n\t\t\t//\t\tThe widget may have one or more of the following states, determined\r\n\t\t\t//\t\tby this.state, this.checked, this.valid, and this.selected:\r\n\t\t\t//\r\n\t\t\t//\t\t- Error - ValidationTextBox sets this.state to \"Error\" if the current input value is invalid\r\n\t\t\t//\t\t- Incomplete - ValidationTextBox sets this.state to \"Incomplete\" if the current input value is not finished yet\r\n\t\t\t//\t\t- Checked - ex: a checkmark or a ToggleButton in a checked state, will have this.checked==true\r\n\t\t\t//\t\t- Selected - ex: currently selected tab will have this.selected==true\r\n\t\t\t//\r\n\t\t\t//\t\tIn addition, it may have one or more of the following states,\r\n\t\t\t//\t\tbased on this.disabled and flags set in _onMouse (this.active, this.hovering) and from focus manager (this.focused):\r\n\t\t\t//\r\n\t\t\t//\t\t- Disabled\t- if the widget is disabled\r\n\t\t\t//\t\t- Active\t\t- if the mouse (or space/enter key?) is being pressed down\r\n\t\t\t//\t\t- Focused\t\t- if the widget has focus\r\n\t\t\t//\t\t- Hover\t\t- if the mouse is over the widget\r\n\r\n\t\t\t// Compute new set of classes\r\n\t\t\tvar newStateClasses = this.baseClass.split(\" \");\r\n\r\n\t\t\tfunction multiply(modifier){\r\n\t\t\t\tnewStateClasses = newStateClasses.concat(array.map(newStateClasses, function(c){\r\n\t\t\t\t\treturn c + modifier;\r\n\t\t\t\t}), \"dijit\" + modifier);\r\n\t\t\t}\r\n\r\n\t\t\tif(!this.isLeftToRight()){\r\n\t\t\t\t// For RTL mode we need to set an addition class like dijitTextBoxRtl.\r\n\t\t\t\tmultiply(\"Rtl\");\r\n\t\t\t}\r\n\r\n\t\t\tvar checkedState = this.checked == \"mixed\" ? \"Mixed\" : (this.checked ? \"Checked\" : \"\");\r\n\t\t\tif(this.checked){\r\n\t\t\t\tmultiply(checkedState);\r\n\t\t\t}\r\n\t\t\tif(this.state){\r\n\t\t\t\tmultiply(this.state);\r\n\t\t\t}\r\n\t\t\tif(this.selected){\r\n\t\t\t\tmultiply(\"Selected\");\r\n\t\t\t}\r\n\t\t\tif(this._opened){\r\n\t\t\t\tmultiply(\"Opened\");\r\n\t\t\t}\r\n\r\n\t\t\tif(this.disabled){\r\n\t\t\t\tmultiply(\"Disabled\");\r\n\t\t\t}else if(this.readOnly){\r\n\t\t\t\tmultiply(\"ReadOnly\");\r\n\t\t\t}else{\r\n\t\t\t\tif(this.active){\r\n\t\t\t\t\tmultiply(\"Active\");\r\n\t\t\t\t}else if(this.hovering){\r\n\t\t\t\t\tmultiply(\"Hover\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(this.focused){\r\n\t\t\t\tmultiply(\"Focused\");\r\n\t\t\t}\r\n\r\n\t\t\t// Remove old state classes and add new ones.\r\n\t\t\t// For performance concerns we only write into domNode.className once.\r\n\t\t\tvar tn = this.stateNode || this.domNode,\r\n\t\t\t\tclassHash = {};\t// set of all classes (state and otherwise) for node\r\n\r\n\t\t\tarray.forEach(tn.className.split(\" \"), function(c){\r\n\t\t\t\tclassHash[c] = true;\r\n\t\t\t});\r\n\r\n\t\t\tif(\"_stateClasses\" in this){\r\n\t\t\t\tarray.forEach(this._stateClasses, function(c){\r\n\t\t\t\t\tdelete classHash[c];\r\n\t\t\t\t});\r\n\t\t\t}\r\n\r\n\t\t\tarray.forEach(newStateClasses, function(c){\r\n\t\t\t\tclassHash[c] = true;\r\n\t\t\t});\r\n\r\n\t\t\tvar newClasses = [];\r\n\t\t\tfor(var c in classHash){\r\n\t\t\t\tnewClasses.push(c);\r\n\t\t\t}\r\n\t\t\ttn.className = newClasses.join(\" \");\r\n\r\n\t\t\tthis._stateClasses = newStateClasses;\r\n\t\t},\r\n\r\n\t\t_subnodeCssMouseEvent: function(node, clazz, evt){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHandler for hover/active mouse event on widget's subnode\r\n\t\t\tif(this.disabled || this.readOnly){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tfunction hover(isHovering){\r\n\t\t\t\tdomClass.toggle(node, clazz + \"Hover\", isHovering);\r\n\t\t\t}\r\n\r\n\t\t\tfunction active(isActive){\r\n\t\t\t\tdomClass.toggle(node, clazz + \"Active\", isActive);\r\n\t\t\t}\r\n\r\n\t\t\tfunction focused(isFocused){\r\n\t\t\t\tdomClass.toggle(node, clazz + \"Focused\", isFocused);\r\n\t\t\t}\r\n\r\n\t\t\tswitch(evt.type){\r\n\t\t\t\tcase \"mouseover\":\r\n\t\t\t\tcase \"MSPointerOver\":\r\n\t\t\t\tcase \"pointerover\":\r\n\t\t\t\t\thover(true);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"mouseout\":\r\n\t\t\t\tcase \"MSPointerOut\":\r\n\t\t\t\tcase \"pointerout\":\r\n\t\t\t\t\thover(false);\r\n\t\t\t\t\tactive(false);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"mousedown\":\r\n\t\t\t\tcase \"touchstart\":\r\n\t\t\t\tcase \"MSPointerDown\":\r\n\t\t\t\tcase \"pointerdown\":\r\n\t\t\t\tcase \"keydown\":\r\n\t\t\t\t\tactive(true);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"mouseup\":\r\n\t\t\t\tcase \"MSPointerUp\":\r\n\t\t\t\tcase \"pointerup\":\r\n\t\t\t\tcase \"dojotouchend\":\r\n\t\t\t\tcase \"keyup\":\r\n\t\t\t\t\tactive(false);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"focus\":\r\n\t\t\t\tcase \"focusin\":\r\n\t\t\t\t\tfocused(true);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase \"blur\":\r\n\t\t\t\tcase \"focusout\":\r\n\t\t\t\t\tfocused(false);\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_trackMouseState: function(/*DomNode*/ node, /*String*/ clazz){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTrack mouse/focus events on specified node and set CSS class on that node to indicate\r\n\t\t\t//\t\tcurrent state.   Usually not called directly, but via cssStateNodes attribute.\r\n\t\t\t// description:\r\n\t\t\t//\t\tGiven class=foo, will set the following CSS class on the node\r\n\t\t\t//\r\n\t\t\t//\t\t- fooActive: if the user is currently pressing down the mouse button while over the node\r\n\t\t\t//\t\t- fooHover: if the user is hovering the mouse over the node, but not pressing down a button\r\n\t\t\t//\t\t- fooFocus: if the node is focused\r\n\t\t\t//\r\n\t\t\t//\t\tNote that it won't set any classes if the widget is disabled.\r\n\t\t\t// node: DomNode\r\n\t\t\t//\t\tShould be a sub-node of the widget, not the top node (this.domNode), since the top node\r\n\t\t\t//\t\tis handled specially and automatically just by mixing in this class.\r\n\t\t\t// clazz: String\r\n\t\t\t//\t\tCSS class name (ex: dijitSliderUpArrow)\r\n\r\n\t\t\t// Flag for listener code below to call this._cssMouseEvent() or this._subnodeCssMouseEvent()\r\n\t\t\t// when node is hovered/active\r\n\t\t\tnode._cssState = clazz;\r\n\t\t}\r\n\t});\r\n\r\n\tdomReady(function(){\r\n\t\t// Document level listener to catch hover etc. events on widget root nodes and subnodes.\r\n\t\t// Note that when the mouse is moved quickly, a single onmouseenter event could signal that multiple widgets\r\n\t\t// have been hovered or unhovered (try test_Accordion.html)\r\n\r\n\t\tfunction pointerHandler(evt, target, relatedTarget){\r\n\t\t\t// Handler for mouseover, mouseout, a11yclick.press and a11click.release events\r\n\r\n\t\t\t// Poor man's event propagation.  Don't propagate event to ancestors of evt.relatedTarget,\r\n\t\t\t// to avoid processing mouseout events moving from a widget's domNode to a descendant node;\r\n\t\t\t// such events shouldn't be interpreted as a mouseleave on the widget.\r\n\t\t\tif(relatedTarget && dom.isDescendant(relatedTarget, target)){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tfor(var node = target; node && node != relatedTarget; node = node.parentNode){\r\n\t\t\t\t// Process any nodes with _cssState property.   They are generally widget root nodes,\r\n\t\t\t\t// but could also be sub-nodes within a widget\r\n\t\t\t\tif(node._cssState){\r\n\t\t\t\t\tvar widget = registry.getEnclosingWidget(node);\r\n\t\t\t\t\tif(widget){\r\n\t\t\t\t\t\tif(node == widget.domNode){\r\n\t\t\t\t\t\t\t// event on the widget's root node\r\n\t\t\t\t\t\t\twidget._cssMouseEvent(evt);\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t// event on widget's sub-node\r\n\t\t\t\t\t\t\twidget._subnodeCssMouseEvent(node, node._cssState, evt);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar body = win.body(), activeNode;\r\n\r\n\t\t// Handle pointer related events (i.e. mouse or touch)\r\n\t\ton(body, touch.over, function(evt){\r\n\t\t\t// Using touch.over rather than mouseover mainly to ignore phantom mouse events on iOS.\r\n\t\t\tpointerHandler(evt, evt.target, evt.relatedTarget);\r\n\t\t});\r\n\t\ton(body, touch.out, function(evt){\r\n\t\t\t// Using touch.out rather than mouseout mainly to ignore phantom mouse events on iOS.\r\n\t\t\tpointerHandler(evt, evt.target, evt.relatedTarget);\r\n\t\t});\r\n\t\ton(body, a11yclick.press, function(evt){\r\n\t\t\t// Save the a11yclick.press target to reference when the a11yclick.release comes.\r\n\t\t\tactiveNode = evt.target;\r\n\t\t\tpointerHandler(evt, activeNode)\r\n\t\t});\r\n\t\ton(body, a11yclick.release, function(evt){\r\n\t\t\t// The release event could come on a separate node than the press event, if for example user slid finger.\r\n\t\t\t// Reference activeNode to reset the state of the node that got state set in the a11yclick.press handler.\r\n\t\t\tpointerHandler(evt, activeNode);\r\n\t\t\tactiveNode = null;\r\n\t\t});\r\n\r\n\t\t// Track focus events on widget sub-nodes that have been registered via _trackMouseState().\r\n\t\t// However, don't track focus events on the widget root nodes, because focus is tracked via the\r\n\t\t// focus manager (and it's not really tracking focus, but rather tracking that focus is on one of the widget's\r\n\t\t// nodes or a subwidget's node or a popup node, etc.)\r\n\t\t// Remove for 2.0 (if focus CSS needed, just use :focus pseudo-selector).\r\n\t\ton(body, \"focusin, focusout\", function(evt){\r\n\t\t\tvar node = evt.target;\r\n\t\t\tif(node._cssState && !node.getAttribute(\"widgetId\")){\r\n\t\t\t\tvar widget = registry.getEnclosingWidget(node);\r\n\t\t\t\tif(widget){\r\n\t\t\t\t\twidget._subnodeCssMouseEvent(node, node._cssState, evt);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n\r\n\treturn CssStateMixin;\r\n});\r\n"]}