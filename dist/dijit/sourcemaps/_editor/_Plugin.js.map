{"version":3,"sources":["_editor/_Plugin.js"],"names":["define","connect","declare","lang","Destroyable","Button","_Plugin","constructor","args","this","params","mixin","_attrPairNames","editor","iconClassPrefix","button","command","useDefaultCommand","buttonClass","disabled","getLabel","key","commands","_initButton","length","label","className","charAt","toUpperCase","substr","props","ownerDocument","dir","showLabel","iconClass","dropDown","tabIndex","name","get","set","destroy","destroyRecursive","inherited","arguments","o","f","tf","own","updateState","checked","enabled","e","c","isLoaded","queryCommandEnabled","queryCommandState","console","log","setEditor","queryCommandAvailable","on","hitch","commandArg","domNode","style","display","setToolbar","toolbar","addChild","value","x","names","_getAttrNames","s","result","apply","Array","prototype","slice","call","_set","g","_setDisabledAttr","apn","uc","registry"],"mappings":"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","file":"../../_editor/_Plugin.js","sourcesContent":["define([\r\n\t\"dojo/_base/connect\", // connect.connect\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/_base/lang\", // lang.mixin, lang.hitch\r\n\t\"../Destroyable\",\r\n\t\"../form/Button\"\r\n], function(connect, declare, lang, Destroyable, Button){\r\n\r\n\t// module:\r\n\t//\t\tdijit/_editor/_Plugin\r\n\r\n\tvar _Plugin = declare(\"dijit._editor._Plugin\", Destroyable, {\r\n\t\t// summary:\r\n\t\t//\t\tBase class for a \"plugin\" to the editor, which is usually\r\n\t\t//\t\ta single button on the Toolbar and some associated code\r\n\r\n\t\tconstructor: function(args){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate the plugin.\r\n\t\t\t// args: Object?\r\n\t\t\t//\t\tInitial settings for any of the attributes.\r\n\r\n\t\t\tthis.params = args || {};\r\n\t\t\tlang.mixin(this, this.params);\r\n\t\t\tthis._attrPairNames = {};\r\n\t\t},\r\n\r\n\t\t// editor: [const] dijit.Editor\r\n\t\t//\t\tPoints to the parent editor\r\n\t\teditor: null,\r\n\r\n\t\t// iconClassPrefix: [const] String\r\n\t\t//\t\tThe CSS class name for the button node is formed from `iconClassPrefix` and `command`\r\n\t\ticonClassPrefix: \"dijitEditorIcon\",\r\n\r\n\t\t// button: dijit/_WidgetBase?\r\n\t\t//\t\tPointer to `dijit/form/Button` or other widget (ex: `dijit/form/FilteringSelect`)\r\n\t\t//\t\tthat is added to the toolbar to control this plugin.\r\n\t\t//\t\tIf not specified, will be created on initialization according to `buttonClass`\r\n\t\tbutton: null,\r\n\r\n\t\t// command: String\r\n\t\t//\t\tString like \"insertUnorderedList\", \"outdent\", \"justifyCenter\", etc. that represents an editor command.\r\n\t\t//\t\tPassed to editor.execCommand() if `useDefaultCommand` is true.\r\n\t\tcommand: \"\",\r\n\r\n\t\t// useDefaultCommand: Boolean\r\n\t\t//\t\tIf true, this plugin executes by calling Editor.execCommand() with the argument specified in `command`.\r\n\t\tuseDefaultCommand: true,\r\n\r\n\t\t// buttonClass: Widget Class\r\n\t\t//\t\tClass of widget (ex: dijit.form.Button or dijit/form/FilteringSelect)\r\n\t\t//\t\tthat is added to the toolbar to control this plugin.\r\n\t\t//\t\tThis is used to instantiate the button, unless `button` itself is specified directly.\r\n\t\tbuttonClass: Button,\r\n\r\n\t\t// disabled: Boolean\r\n\t\t//\t\tFlag to indicate if this plugin has been disabled and should do nothing\r\n\t\t//\t\thelps control button state, among other things.  Set via the setter api.\r\n\t\tdisabled: false,\r\n\r\n\t\tgetLabel: function(/*String*/key){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the label to use for the button\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\treturn this.editor.commands[key];\t\t// String\r\n\t\t},\r\n\r\n\t\t_initButton: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInitialize the button or other widget that will control this plugin.\r\n\t\t\t//\t\tThis code only works for plugins controlling built-in commands in the editor.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected extension\r\n\t\t\tif(this.command.length){\r\n\t\t\t\tvar label = this.getLabel(this.command),\r\n\t\t\t\t\teditor = this.editor,\r\n\t\t\t\t\tclassName = this.iconClassPrefix + \" \" + this.iconClassPrefix + this.command.charAt(0).toUpperCase() + this.command.substr(1);\r\n\t\t\t\tif(!this.button){\r\n\t\t\t\t\tvar props = lang.mixin({\r\n\t\t\t\t\t\tlabel: label,\r\n\t\t\t\t\t\townerDocument: editor.ownerDocument,\r\n\t\t\t\t\t\tdir: editor.dir,\r\n\t\t\t\t\t\tlang: editor.lang,\r\n\t\t\t\t\t\tshowLabel: false,\r\n\t\t\t\t\t\ticonClass: className,\r\n\t\t\t\t\t\tdropDown: this.dropDown,\r\n\t\t\t\t\t\ttabIndex: \"-1\"\r\n\t\t\t\t\t}, this.params || {});\r\n\r\n\t\t\t\t\t// Avoid creating Button with a name like \"dijit/editor/_plugins/ToggleDir\", since that name becomes\r\n\t\t\t\t\t// a global object, and then if the ToggleDir plugin is referenced again, _Plugin.js will\r\n\t\t\t\t\t// find the <input> rather than the ToggleDir module.\r\n\t\t\t\t\t// Not necessary in 2.0 once the getObject() call is removed from _Plugin.js.\r\n\t\t\t\t\tdelete props.name;\r\n\r\n\t\t\t\t\tthis.button = new this.buttonClass(props);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif(this.get(\"disabled\") && this.button){\r\n\t\t\t\tthis.button.set(\"disabled\", this.get(\"disabled\"));\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tdestroy: function(){\r\n\t\t\tif(this.dropDown){\r\n\t\t\t\tthis.dropDown.destroyRecursive();\r\n\t\t\t}\r\n\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tconnect: function(o, f, tf){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDeprecated.  Use this.own() with dojo/on or dojo/aspect.instead.\r\n\t\t\t//\r\n\t\t\t//\t\tMake a connect.connect() that is automatically disconnected when this plugin is destroyed.\r\n\t\t\t//\t\tSimilar to `dijit/_Widget.connect()`.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected deprecated\r\n\r\n\t\t\tthis.own(connect.connect(o, f, this, tf));\r\n\t\t},\r\n\r\n\t\tupdateState: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tChange state of the plugin to respond to events in the editor.\r\n\t\t\t// description:\r\n\t\t\t//\t\tThis is called on meaningful events in the editor, such as change of selection\r\n\t\t\t//\t\tor caret position (but not simple typing of alphanumeric keys).   It gives the\r\n\t\t\t//\t\tplugin a chance to update the CSS of its button.\r\n\t\t\t//\r\n\t\t\t//\t\tFor example, the \"bold\" plugin will highlight/unhighlight the bold button depending on whether the\r\n\t\t\t//\t\tcharacters next to the caret are bold or not.\r\n\t\t\t//\r\n\t\t\t//\t\tOnly makes sense when `useDefaultCommand` is true, as it calls Editor.queryCommandEnabled(`command`).\r\n\t\t\tvar e = this.editor,\r\n\t\t\t\tc = this.command,\r\n\t\t\t\tchecked, enabled;\r\n\t\t\tif(!e || !e.isLoaded || !c.length){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tvar disabled = this.get(\"disabled\");\r\n\t\t\tif(this.button){\r\n\t\t\t\ttry{\r\n\t\t\t\t\tenabled = !disabled && e.queryCommandEnabled(c);\r\n\t\t\t\t\tif(this.enabled !== enabled){\r\n\t\t\t\t\t\tthis.enabled = enabled;\r\n\t\t\t\t\t\tthis.button.set('disabled', !enabled);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(enabled){\r\n\t\t\t\t\t\tif(typeof this.button.checked == 'boolean'){\r\n\t\t\t\t\t\t\tchecked = e.queryCommandState(c);\r\n\t\t\t\t\t\t\tif(this.checked !== checked){\r\n\t\t\t\t\t\t\t\tthis.checked = checked;\r\n\t\t\t\t\t\t\t\tthis.button.set('checked', e.queryCommandState(c));\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}catch(e){\r\n\t\t\t\t\tconsole.log(e); // FIXME: we shouldn't have debug statements in our code.  Log as an error?\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tsetEditor: function(/*dijit/Editor*/ editor){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTell the plugin which Editor it is associated with.\r\n\r\n\t\t\t// TODO: refactor code to just pass editor to constructor.\r\n\r\n\t\t\t// FIXME: detach from previous editor!!\r\n\t\t\tthis.editor = editor;\r\n\r\n\t\t\t// FIXME: prevent creating this if we don't need to (i.e., editor can't handle our command)\r\n\t\t\tthis._initButton();\r\n\r\n\t\t\t// Processing for buttons that execute by calling editor.execCommand()\r\n\t\t\tif(this.button && this.useDefaultCommand){\r\n\t\t\t\tif(this.editor.queryCommandAvailable(this.command)){\r\n\t\t\t\t\tthis.own(this.button.on(\"click\",\r\n\t\t\t\t\t\tlang.hitch(this.editor, \"execCommand\", this.command, this.commandArg)\r\n\t\t\t\t\t));\r\n\t\t\t\t}else{\r\n\t\t\t\t\t// hide button because editor doesn't support command (due to browser limitations)\r\n\t\t\t\t\tthis.button.domNode.style.display = \"none\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.own(this.editor.on(\"NormalizedDisplayChanged\", lang.hitch(this, \"updateState\")));\r\n\t\t},\r\n\r\n\t\tsetToolbar: function(/*dijit/Toolbar*/ toolbar){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTell the plugin to add it's controller widget (often a button)\r\n\t\t\t//\t\tto the toolbar.  Does nothing if there is no controller widget.\r\n\r\n\t\t\t// TODO: refactor code to just pass toolbar to constructor.\r\n\r\n\t\t\tif(this.button){\r\n\t\t\t\ttoolbar.addChild(this.button);\r\n\t\t\t}\r\n\t\t\t// console.debug(\"adding\", this.button, \"to:\", toolbar);\r\n\t\t},\r\n\r\n\t\tset: function(/* attribute */ name, /* anything */ value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSet a property on a plugin\r\n\t\t\t// name:\r\n\t\t\t//\t\tThe property to set.\r\n\t\t\t// value:\r\n\t\t\t//\t\tThe value to set in the property.\r\n\t\t\t// description:\r\n\t\t\t//\t\tSets named properties on a plugin which may potentially be handled by a\r\n\t\t\t//\t\tsetter in the plugin.\r\n\t\t\t//\t\tFor example, if the plugin has a properties \"foo\"\r\n\t\t\t//\t\tand \"bar\" and a method named \"_setFooAttr\", calling:\r\n\t\t\t//\t|\tplugin.set(\"foo\", \"Howdy!\");\r\n\t\t\t//\t\twould be equivalent to writing:\r\n\t\t\t//\t|\tplugin._setFooAttr(\"Howdy!\");\r\n\t\t\t//\t\tand:\r\n\t\t\t//\t|\tplugin.set(\"bar\", 3);\r\n\t\t\t//\t\twould be equivalent to writing:\r\n\t\t\t//\t|\tplugin.bar = 3;\r\n\t\t\t//\r\n\t\t\t//\t\tset() may also be called with a hash of name/value pairs, ex:\r\n\t\t\t//\t|\tplugin.set({\r\n\t\t\t//\t|\t\tfoo: \"Howdy\",\r\n\t\t\t//\t|\t\tbar: 3\r\n\t\t\t//\t|\t})\r\n\t\t\t//\t\tThis is equivalent to calling set(foo, \"Howdy\") and set(bar, 3)\r\n\t\t\tif(typeof name === \"object\"){\r\n\t\t\t\tfor(var x in name){\r\n\t\t\t\t\tthis.set(x, name[x]);\r\n\t\t\t\t}\r\n\t\t\t\treturn this;\r\n\t\t\t}\r\n\t\t\tvar names = this._getAttrNames(name);\r\n\t\t\tif(this[names.s]){\r\n\t\t\t\t// use the explicit setter\r\n\t\t\t\tvar result = this[names.s].apply(this, Array.prototype.slice.call(arguments, 1));\r\n\t\t\t}else{\r\n\t\t\t\tthis._set(name, value);\r\n\t\t\t}\r\n\t\t\treturn result || this;\r\n\t\t},\r\n\r\n\t\tget: function(name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGet a property from a plugin.\r\n\t\t\t// name:\r\n\t\t\t//\t\tThe property to get.\r\n\t\t\t// description:\r\n\t\t\t//\t\tGet a named property from a plugin. The property may\r\n\t\t\t//\t\tpotentially be retrieved via a getter method. If no getter is defined, this\r\n\t\t\t//\t\tjust retrieves the object's property.\r\n\t\t\t//\t\tFor example, if the plugin has a properties \"foo\"\r\n\t\t\t//\t\tand \"bar\" and a method named \"_getFooAttr\", calling:\r\n\t\t\t//\t|\tplugin.get(\"foo\");\r\n\t\t\t//\t\twould be equivalent to writing:\r\n\t\t\t//\t|\tplugin._getFooAttr();\r\n\t\t\t//\t\tand:\r\n\t\t\t//\t|\tplugin.get(\"bar\");\r\n\t\t\t//\t\twould be equivalent to writing:\r\n\t\t\t//\t|\tplugin.bar;\r\n\t\t\tvar names = this._getAttrNames(name);\r\n\t\t\treturn this[names.g] ? this[names.g]() : this[name];\r\n\t\t},\r\n\r\n\t\t_setDisabledAttr: function(disabled){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFunction to set the plugin state and call updateState to make sure the\r\n\t\t\t//\t\tbutton is updated appropriately.\r\n\t\t\tthis._set(\"disabled\", disabled);\r\n\t\t\tthis.updateState();\r\n\t\t},\r\n\r\n\t\t_getAttrNames: function(name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHelper function for get() and set().\r\n\t\t\t//\t\tCaches attribute name values so we don't do the string ops every time.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\r\n\t\t\tvar apn = this._attrPairNames;\r\n\t\t\tif(apn[name]){\r\n\t\t\t\treturn apn[name];\r\n\t\t\t}\r\n\t\t\tvar uc = name.charAt(0).toUpperCase() + name.substr(1);\r\n\t\t\treturn (apn[name] = {\r\n\t\t\t\ts: \"_set\" + uc + \"Attr\",\r\n\t\t\t\tg: \"_get\" + uc + \"Attr\"\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t_set: function(/*String*/ name, /*anything*/ value){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHelper function to set new value for specified attribute\r\n\t\t\tthis[name] = value;\r\n\t\t}\r\n\t});\r\n\r\n\t// Hash mapping plugin name to factory, used for registering plugins\r\n\t_Plugin.registry = {};\r\n\r\n\treturn _Plugin;\r\n});\r\n"]}