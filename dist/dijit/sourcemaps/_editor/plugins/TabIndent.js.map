{"version":3,"sources":["_editor/plugins/TabIndent.js"],"names":["define","declare","kernel","_Plugin","ToggleButton","experimental","TabIndent","useDefaultCommand","buttonClass","command","_initButton","this","inherited","arguments","e","editor","own","button","on","val","set","updateState","disabled","get","isTabIndent","registry"],"mappings":";;;;;;;AAAAA,QACC,qBACA,oBACA,aACA,2BACE,SAASC,EAASC,EAAQC,EAASC,GAKrCF,EAAOG,aAAa,mCAGpB,IAAIC,EAAYL,EAAQ,kCAAmCE,GAO1DI,mBAAmB,EAGnBC,YAAaJ,EAEbK,QAAS,YAETC,YAAa,WAEZC,KAAKC,UAAUC,WAEf,IAAIC,EAAIH,KAAKI,OACbJ,KAAKK,IAAIL,KAAKM,OAAOC,GAAG,SAAU,SAASC,GAC1CL,EAAEM,IAAI,cAAeD,MAItBR,KAAKU,eAGNA,YAAa,WAGZ,IAAIC,EAAWX,KAAKY,IAAI,YACxBZ,KAAKM,OAAOG,IAAI,WAAYE,GACzBA,GAGHX,KAAKM,OAAOG,IAAI,UAAWT,KAAKI,OAAOS,aAAa,MAUtD,OALArB,EAAQsB,SAAoB,UAAI,WAC/B,OAAO,IAAInB,GAAWG,QAAS,eAIzBH","file":"../../../_editor/plugins/TabIndent.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/_base/kernel\", // kernel.experimental\r\n\t\"../_Plugin\",\r\n\t\"../../form/ToggleButton\"\r\n], function(declare, kernel, _Plugin, ToggleButton){\r\n\r\n\t// module:\r\n\t//\t\tdijit/_editor/plugins/TabIndent\r\n\r\n\tkernel.experimental(\"dijit._editor.plugins.TabIndent\");\r\n\r\n\r\n\tvar TabIndent = declare(\"dijit._editor.plugins.TabIndent\", _Plugin, {\r\n\t\t// summary:\r\n\t\t//\t\tThis plugin is used to allow the use of the tab and shift-tab keys\r\n\t\t//\t\tto indent/outdent list items.  This overrides the default behavior\r\n\t\t//\t\tof moving focus from/to the toolbar\r\n\r\n\t\t// Override _Plugin.useDefaultCommand... processing is handled by this plugin, not by dijit/Editor.\r\n\t\tuseDefaultCommand: false,\r\n\r\n\t\t// Override _Plugin.buttonClass to use a ToggleButton for this plugin rather than a vanilla Button\r\n\t\tbuttonClass: ToggleButton,\r\n\r\n\t\tcommand: \"tabIndent\",\r\n\r\n\t\t_initButton: function(){\r\n\t\t\t// Override _Plugin._initButton() to setup listener on button click\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\tvar e = this.editor;\r\n\t\t\tthis.own(this.button.on(\"change\", function(val){\r\n\t\t\t\te.set(\"isTabIndent\", val);\r\n\t\t\t}));\r\n\r\n\t\t\t// Set initial checked state of button based on Editor.isTabIndent\r\n\t\t\tthis.updateState();\r\n\t\t},\r\n\r\n\t\tupdateState: function(){\r\n\t\t\t// Overrides _Plugin.updateState().\r\n\t\t\t// Ctrl-m in the editor will switch tabIndent mode on/off, so we need to react to that.\r\n\t\t\tvar disabled = this.get(\"disabled\");\r\n\t\t\tthis.button.set(\"disabled\", disabled);\r\n\t\t\tif(disabled){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis.button.set('checked', this.editor.isTabIndent, false);\r\n\t\t}\r\n\t});\r\n\r\n\t// Register this plugin.\r\n\t_Plugin.registry[\"tabIndent\"] = function(){\r\n\t\treturn new TabIndent({command: \"tabIndent\"});\r\n\t};\r\n\r\n\r\n\treturn TabIndent;\r\n});\r\n"]}