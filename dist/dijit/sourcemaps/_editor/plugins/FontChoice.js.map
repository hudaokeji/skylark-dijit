{"version":3,"sources":["_editor/plugins/FontChoice.js"],"names":["define","require","array","declare","domConstruct","i18n","lang","MemoryStore","registry","_Widget","_TemplatedMixin","_WidgetsInTemplateMixin","FilteringSelect","_Plugin","rangeapi","_FontDropDown","label","plainText","templateString","contextRequire","postMixInProperties","this","inherited","arguments","strings","getLocalization","command","id","getUniqueId","declaredClass","replace","selectId","postCreate","select","set","idProperty","data","map","values","value","name","getLabel","disabled","get","_setValueAttr","priorityChange","indexOf","_lastValueReported","_getValueAttr","focus","_setDisabledAttr","_set","_FontNameDropDown","generic","comboClass","Arial","Helvetica","Myriad","Times","Times New Roman","Comic Sans MS","Apple Chancery","Courier","Courier New","Papyrus","Estrangelo Edessa","Gabriola","_FontSizeDropDown","10","13","16","18","24","32","48","parseInt","_FormatBlockDropDown","_execCommand","editor","choice","start","end","sel","getSelection","window","rangeCount","node","tag","range","getRangeAt","startContainer","endContainer","editNode","document","body","nodeType","parentNode","processChildren","hitch","ary","i","childNodes","length","c","selection","inSelection","tagName","toLowerCase","push","unformatNodes","nodes","beginEditing","_removeFormat","pop","endEditing","clearNodes","block","concat","nextSibling","onDisplayChanged","execCommand","customUndo","firstChild","place","removeChild","selectElementChildren","html","getSelectedHtml","selectElement","FontChoice","useDefaultCommand","_initButton","clazz","fontName","fontSize","formatBlock","params","custom","button","delegate","dir","own","on","focused","updateState","_e","_c","isLoaded","queryCommandValue","e","quoted","isString","match","elem","tg","forEach","args"],"mappings":"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","file":"../../../_editor/plugins/FontChoice.js","sourcesContent":["define([\r\n\t\"require\",\r\n\t\"dojo/_base/array\", // array.indexOf array.map\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom-construct\", // domConstruct.place\r\n\t\"dojo/i18n\", // i18n.getLocalization\r\n\t\"dojo/_base/lang\", // lang.delegate lang.hitch lang.isString\r\n\t\"dojo/store/Memory\", // MemoryStore\r\n\t\"../../registry\", // registry.getUniqueId\r\n\t\"../../_Widget\",\r\n\t\"../../_TemplatedMixin\",\r\n\t\"../../_WidgetsInTemplateMixin\",\r\n\t\"../../form/FilteringSelect\",\r\n\t\"../_Plugin\",\r\n\t\"../range\",\r\n\t\"dojo/i18n!../nls/FontChoice\"\r\n], function(require, array, declare, domConstruct, i18n, lang, MemoryStore,\r\n\tregistry, _Widget, _TemplatedMixin, _WidgetsInTemplateMixin, FilteringSelect, _Plugin, rangeapi){\r\n\r\n\t// module:\r\n\t//\t\tdijit/_editor/plugins/FontChoice\r\n\r\n\tvar _FontDropDown = declare(\"dijit._editor.plugins._FontDropDown\",\r\n\t\t[_Widget, _TemplatedMixin, _WidgetsInTemplateMixin], {\r\n\t\t\t// summary:\r\n\t\t\t//\t\tBase class for widgets that contains a label (like \"Font:\")\r\n\t\t\t//\t\tand a FilteringSelect drop down to pick a value.\r\n\t\t\t//\t\tUsed as Toolbar entry.\r\n\r\n\t\t\t// label: [public] String\r\n\t\t\t//\t\tThe label to apply to this particular FontDropDown.\r\n\t\t\tlabel: \"\",\r\n\r\n\t\t\t// plainText: [public] boolean\r\n\t\t\t//\t\tFlag to indicate that the returned label should be plain text\r\n\t\t\t//\t\tinstead of an example.\r\n\t\t\tplainText: false,\r\n\r\n\t\t\t// templateString: [public] String\r\n\t\t\t//\t\tThe template used to construct the labeled dropdown.\r\n\t\t\ttemplateString: \"<span style='white-space: nowrap' class='dijit dijitReset dijitInline'>\" +\r\n\t\t\t\t\"<label class='dijitLeft dijitInline' for='${selectId}'>${label}</label>\" +\r\n\t\t\t\t\"<input data-dojo-type='../../form/FilteringSelect' required='false' \" +\r\n\t\t\t\t\"data-dojo-props='labelType:\\\"html\\\", labelAttr:\\\"label\\\", searchAttr:\\\"name\\\"' \" +\r\n\t\t\t\t\"class='${comboClass}' \" +\r\n\t\t\t\t\"tabIndex='-1' id='${selectId}' data-dojo-attach-point='select' value=''/>\" +\r\n\t\t\t\t\"</span>\",\r\n\r\n\t\t\t// contextRequire: [public] Function\r\n\t\t\t//\t\tThe context require that is used to resolve modules in template.\r\n\t\t\tcontextRequire: require,\r\n\r\n\t\t\tpostMixInProperties: function(){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tOver-ride to set specific properties.\r\n\t\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\t\tthis.strings = i18n.getLocalization(\"dijit._editor\", \"FontChoice\");\r\n\r\n\t\t\t\t// Set some substitution variables used in the template\r\n\t\t\t\tthis.label = this.strings[this.command];\r\n\r\n\t\t\t\t// _WidgetBase sets the id after postMixInProperties(), but we need it now.\r\n\t\t\t\t// Alternative is to have a buildRendering() method and move this.selectId setting there,\r\n\t\t\t\t// or alternately get rid of selectId variable and just access ${id} in template?\r\n\t\t\t\tthis.id = registry.getUniqueId(this.declaredClass.replace(/\\./g, \"_\"));\r\n\r\n\t\t\t\tthis.selectId = this.id + \"_select\";\t// used in template\r\n\r\n\t\t\t\tthis.inherited(arguments);\r\n\t\t\t},\r\n\r\n\t\t\tpostCreate: function(){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tOver-ride for the default postCreate action\r\n\t\t\t\t//\t\tThis establishes the filtering selects and the like.\r\n\r\n\t\t\t\t// Initialize the list of items in the drop down by creating data store with items like:\r\n\t\t\t\t// {value: 1, name: \"xx-small\", label: \"<font size=1>xx-small</font-size>\" }\r\n\t\t\t\tthis.select.set(\"store\", new MemoryStore({\r\n\t\t\t\t\tidProperty: \"value\",\r\n\t\t\t\t\tdata: array.map(this.values, function(value){\r\n\t\t\t\t\t\tvar name = this.strings[value] || value;\r\n\t\t\t\t\t\treturn {\r\n\t\t\t\t\t\t\tlabel: this.getLabel(value, name),\r\n\t\t\t\t\t\t\tname: name,\r\n\t\t\t\t\t\t\tvalue: value\r\n\t\t\t\t\t\t};\r\n\t\t\t\t\t}, this)\r\n\t\t\t\t}));\r\n\r\n\t\t\t\tthis.select.set(\"value\", \"\", false);\r\n\t\t\t\tthis.disabled = this.select.get(\"disabled\");\r\n\t\t\t},\r\n\r\n\t\t\t_setValueAttr: function(value, priorityChange){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tOver-ride for the default action of setting the\r\n\t\t\t\t//\t\twidget value, maps the input to known values\r\n\t\t\t\t// value: Object|String\r\n\t\t\t\t//\t\tThe value to set in the select.\r\n\t\t\t\t// priorityChange:\r\n\t\t\t\t//\t\tOptional parameter used to tell the select whether or not to fire\r\n\t\t\t\t//\t\tonChange event.\r\n\r\n\t\t\t\t// if the value is not a permitted value, just set empty string to prevent showing the warning icon\r\n\t\t\t\tpriorityChange = priorityChange !== false;\r\n\t\t\t\tthis.select.set('value', array.indexOf(this.values, value) < 0 ? \"\" : value, priorityChange);\r\n\t\t\t\tif(!priorityChange){\r\n\t\t\t\t\t// Clear the last state in case of updateState calls.  Ref: #10466\r\n\t\t\t\t\tthis.select._lastValueReported = null;\r\n\t\t\t\t}\r\n\t\t\t},\r\n\r\n\t\t\t_getValueAttr: function(){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tAllow retrieving the value from the composite select on\r\n\t\t\t\t//\t\tcall to button.get(\"value\");\r\n\t\t\t\treturn this.select.get('value');\r\n\t\t\t},\r\n\r\n\t\t\tfocus: function(){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tOver-ride for focus control of this widget.  Delegates focus down to the\r\n\t\t\t\t//\t\tfiltering select.\r\n\t\t\t\tthis.select.focus();\r\n\t\t\t},\r\n\r\n\t\t\t_setDisabledAttr: function(value){\r\n\t\t\t\t// summary:\r\n\t\t\t\t//\t\tOver-ride for the button's 'disabled' attribute so that it can be\r\n\t\t\t\t//\t\tdisabled programmatically.\r\n\r\n\t\t\t\t// Save off ths disabled state so the get retrieves it correctly\r\n\t\t\t\t//without needing to have a function proxy it.\r\n\t\t\t\tthis._set(\"disabled\", value);\r\n\t\t\t\tthis.select.set(\"disabled\", value);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\r\n\tvar _FontNameDropDown = declare(\"dijit._editor.plugins._FontNameDropDown\", _FontDropDown, {\r\n\t\t// summary:\r\n\t\t//\t\tDropdown to select a font; goes in editor toolbar.\r\n\r\n\t\t// generic: [const] Boolean\r\n\t\t//\t\tUse generic (web standard) font names\r\n\t\tgeneric: false,\r\n\r\n\t\t// command: [public] String\r\n\t\t//\t\tThe editor 'command' implemented by this plugin.\r\n\t\tcommand: \"fontName\",\r\n\r\n\t\tcomboClass: \"dijitFontNameCombo\",\r\n\r\n\t\tpostMixInProperties: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOver-ride for the default posr mixin control\r\n\t\t\tif(!this.values){\r\n\t\t\t\tthis.values = this.generic ?\r\n\t\t\t\t\t[\"serif\", \"sans-serif\", \"monospace\", \"cursive\", \"fantasy\"] : // CSS font-family generics\r\n\t\t\t\t\t[\"Arial\", \"Times New Roman\", \"Comic Sans MS\", \"Courier New\"];\r\n\t\t\t}\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tgetLabel: function(value, name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFunction used to generate the labels of the format dropdown\r\n\t\t\t//\t\twill return a formatted, or plain label based on the value\r\n\t\t\t//\t\tof the plainText option.\r\n\t\t\t// value: String\r\n\t\t\t//\t\tThe 'insert value' associated with a name\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe text name of the value\r\n\t\t\tif(this.plainText){\r\n\t\t\t\treturn name;\r\n\t\t\t}else{\r\n\t\t\t\treturn \"<div style='font-family: \" + value + \"'>\" + name + \"</div>\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_setValueAttr: function(value, priorityChange){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOver-ride for the default action of setting the\r\n\t\t\t//\t\twidget value, maps the input to known values\r\n\r\n\t\t\tpriorityChange = priorityChange !== false;\r\n\t\t\tif(this.generic){\r\n\t\t\t\tvar map = {\r\n\t\t\t\t\t\"Arial\": \"sans-serif\",\r\n\t\t\t\t\t\"Helvetica\": \"sans-serif\",\r\n\t\t\t\t\t\"Myriad\": \"sans-serif\",\r\n\t\t\t\t\t\"Times\": \"serif\",\r\n\t\t\t\t\t\"Times New Roman\": \"serif\",\r\n\t\t\t\t\t\"Comic Sans MS\": \"cursive\",\r\n\t\t\t\t\t\"Apple Chancery\": \"cursive\",\r\n\t\t\t\t\t\"Courier\": \"monospace\",\r\n\t\t\t\t\t\"Courier New\": \"monospace\",\r\n\t\t\t\t\t\"Papyrus\": \"fantasy\",\r\n\t\t\t\t\t\"Estrangelo Edessa\": \"cursive\", // Windows 7\r\n\t\t\t\t\t\"Gabriola\": \"fantasy\" // Windows 7\r\n\t\t\t\t};\r\n\t\t\t\tvalue = map[value] || value;\r\n\t\t\t}\r\n\t\t\tthis.inherited(arguments, [value, priorityChange]);\r\n\t\t}\r\n\t});\r\n\r\n\tvar _FontSizeDropDown = declare(\"dijit._editor.plugins._FontSizeDropDown\", _FontDropDown, {\r\n\t\t// summary:\r\n\t\t//\t\tDropdown to select a font size; goes in editor toolbar.\r\n\r\n\t\t// command: [public] String\r\n\t\t//\t\tThe editor 'command' implemented by this plugin.\r\n\t\tcommand: \"fontSize\",\r\n\r\n\t\tcomboClass: \"dijitFontSizeCombo\",\r\n\r\n\t\t// values: [public] Number[]\r\n\t\t//\t\tThe HTML font size values supported by this plugin\r\n\t\tvalues: [1, 2, 3, 4, 5, 6, 7], // sizes according to the old HTML FONT SIZE\r\n\r\n\t\tgetLabel: function(value, name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFunction used to generate the labels of the format dropdown\r\n\t\t\t//\t\twill return a formatted, or plain label based on the value\r\n\t\t\t//\t\tof the plainText option.\r\n\t\t\t//\t\tWe're stuck using the deprecated FONT tag to correspond\r\n\t\t\t//\t\twith the size measurements used by the editor\r\n\t\t\t// value: String\r\n\t\t\t//\t\tThe 'insert value' associated with a name\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe text name of the value\r\n\t\t\tif(this.plainText){\r\n\t\t\t\treturn name;\r\n\t\t\t}else{\r\n\t\t\t\treturn \"<font size=\" + value + \"'>\" + name + \"</font>\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_setValueAttr: function(value, priorityChange){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOver-ride for the default action of setting the\r\n\t\t\t//\t\twidget value, maps the input to known values\r\n\t\t\tpriorityChange = priorityChange !== false;\r\n\t\t\tif(value.indexOf && value.indexOf(\"px\") != -1){\r\n\t\t\t\tvar pixels = parseInt(value, 10);\r\n\t\t\t\tvalue = {10: 1, 13: 2, 16: 3, 18: 4, 24: 5, 32: 6, 48: 7}[pixels] || value;\r\n\t\t\t}\r\n\r\n\t\t\tthis.inherited(arguments, [value, priorityChange]);\r\n\t\t}\r\n\t});\r\n\r\n\r\n\tvar _FormatBlockDropDown = declare(\"dijit._editor.plugins._FormatBlockDropDown\", _FontDropDown, {\r\n\t\t// summary:\r\n\t\t//\t\tDropdown to select a format (like paragraph or heading); goes in editor toolbar.\r\n\r\n\t\t// command: [public] String\r\n\t\t//\t\tThe editor 'command' implemented by this plugin.\r\n\t\tcommand: \"formatBlock\",\r\n\r\n\t\tcomboClass: \"dijitFormatBlockCombo\",\r\n\r\n\t\t// values: [public] Array\r\n\t\t//\t\tThe HTML format tags supported by this plugin\r\n\t\tvalues: [\"noFormat\", \"p\", \"h1\", \"h2\", \"h3\", \"pre\"],\r\n\r\n\t\tpostCreate: function(){\r\n\t\t\t// Init and set the default value to no formatting.  Update state will adjust it\r\n\t\t\t// as needed.\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis.set(\"value\", \"noFormat\", false);\r\n\t\t},\r\n\r\n\t\tgetLabel: function(value, name){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFunction used to generate the labels of the format dropdown\r\n\t\t\t//\t\twill return a formatted, or plain label based on the value\r\n\t\t\t//\t\tof the plainText option.\r\n\t\t\t// value: String\r\n\t\t\t//\t\tThe 'insert value' associated with a name\r\n\t\t\t// name: String\r\n\t\t\t//\t\tThe text name of the value\r\n\t\t\tif(this.plainText || value == \"noFormat\"){\r\n\t\t\t\treturn name;\r\n\t\t\t}else{\r\n\t\t\t\treturn \"<\" + value + \">\" + name + \"</\" + value + \">\";\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_execCommand: function(editor, command, choice){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOver-ride for default exec-command label.\r\n\t\t\t//\t\tAllows us to treat 'none' as special.\r\n\t\t\tif(choice === \"noFormat\"){\r\n\t\t\t\tvar start;\r\n\t\t\t\tvar end;\r\n\t\t\t\tvar sel = rangeapi.getSelection(editor.window);\r\n\t\t\t\tif(sel && sel.rangeCount > 0){\r\n\t\t\t\t\tvar range = sel.getRangeAt(0);\r\n\t\t\t\t\tvar node, tag;\r\n\t\t\t\t\tif(range){\r\n\t\t\t\t\t\tstart = range.startContainer;\r\n\t\t\t\t\t\tend = range.endContainer;\r\n\r\n\t\t\t\t\t\t// find containing nodes of start/end.\r\n\t\t\t\t\t\twhile(start && start !== editor.editNode &&\r\n\t\t\t\t\t\t\tstart !== editor.document.body &&\r\n\t\t\t\t\t\t\tstart.nodeType !== 1){\r\n\t\t\t\t\t\t\tstart = start.parentNode;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\twhile(end && end !== editor.editNode &&\r\n\t\t\t\t\t\t\tend !== editor.document.body &&\r\n\t\t\t\t\t\t\tend.nodeType !== 1){\r\n\t\t\t\t\t\t\tend = end.parentNode;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\tvar processChildren = lang.hitch(this, function(node, ary){\r\n\t\t\t\t\t\t\tif(node.childNodes && node.childNodes.length){\r\n\t\t\t\t\t\t\t\tvar i;\r\n\t\t\t\t\t\t\t\tfor(i = 0; i < node.childNodes.length; i++){\r\n\t\t\t\t\t\t\t\t\tvar c = node.childNodes[i];\r\n\t\t\t\t\t\t\t\t\tif(c.nodeType == 1){\r\n\t\t\t\t\t\t\t\t\t\tif(editor.selection.inSelection(c)){\r\n\t\t\t\t\t\t\t\t\t\t\tvar tag = c.tagName ? c.tagName.toLowerCase() : \"\";\r\n\t\t\t\t\t\t\t\t\t\t\tif(array.indexOf(this.values, tag) !== -1){\r\n\t\t\t\t\t\t\t\t\t\t\t\tary.push(c);\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t\tprocessChildren(c, ary);\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tvar unformatNodes = lang.hitch(this, function(nodes){\r\n\t\t\t\t\t\t\t// summary:\r\n\t\t\t\t\t\t\t//\t\tInternal function to clear format nodes.\r\n\t\t\t\t\t\t\t// nodes:\r\n\t\t\t\t\t\t\t//\t\tThe array of nodes to strip formatting from.\r\n\t\t\t\t\t\t\tif(nodes && nodes.length){\r\n\t\t\t\t\t\t\t\teditor.beginEditing();\r\n\t\t\t\t\t\t\t\twhile(nodes.length){\r\n\t\t\t\t\t\t\t\t\tthis._removeFormat(editor, nodes.pop());\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\teditor.endEditing();\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t});\r\n\r\n\t\t\t\t\t\tvar clearNodes = [];\r\n\t\t\t\t\t\tif(start == end){\r\n\t\t\t\t\t\t\t//Contained within the same block, may be collapsed, but who cares, see if we\r\n\t\t\t\t\t\t\t// have a block element to remove.\r\n\t\t\t\t\t\t\tvar block;\r\n\t\t\t\t\t\t\tnode = start;\r\n\t\t\t\t\t\t\twhile(node && node !== editor.editNode && node !== editor.document.body){\r\n\t\t\t\t\t\t\t\tif(node.nodeType == 1){\r\n\t\t\t\t\t\t\t\t\ttag = node.tagName ? node.tagName.toLowerCase() : \"\";\r\n\t\t\t\t\t\t\t\t\tif(array.indexOf(this.values, tag) !== -1){\r\n\t\t\t\t\t\t\t\t\t\tblock = node;\r\n\t\t\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tnode = node.parentNode;\r\n\t\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t\t//Also look for all child nodes in the selection that may need to be\r\n\t\t\t\t\t\t\t//cleared of formatting\r\n\t\t\t\t\t\t\tprocessChildren(start, clearNodes);\r\n\t\t\t\t\t\t\tif(block){\r\n\t\t\t\t\t\t\t\tclearNodes = [block].concat(clearNodes);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tunformatNodes(clearNodes);\r\n\t\t\t\t\t\t}else{\r\n\t\t\t\t\t\t\t// Probably a multi select, so we have to process it.  Whee.\r\n\t\t\t\t\t\t\tnode = start;\r\n\t\t\t\t\t\t\twhile(editor.selection.inSelection(node)){\r\n\t\t\t\t\t\t\t\tif(node.nodeType == 1){\r\n\t\t\t\t\t\t\t\t\ttag = node.tagName ? node.tagName.toLowerCase() : \"\";\r\n\t\t\t\t\t\t\t\t\tif(array.indexOf(this.values, tag) !== -1){\r\n\t\t\t\t\t\t\t\t\t\tclearNodes.push(node);\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\tprocessChildren(node, clearNodes);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tnode = node.nextSibling;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tunformatNodes(clearNodes);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\teditor.onDisplayChanged();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\teditor.execCommand(command, choice);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_removeFormat: function(editor, node){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tfunction to remove the block format node.\r\n\t\t\t// node:\r\n\t\t\t//\t\tThe block format node to remove (and leave the contents behind)\r\n\t\t\tif(editor.customUndo){\r\n\t\t\t\t// So of course IE doesn't work right with paste-overs.\r\n\t\t\t\t// We have to do this manually, which is okay since IE already uses\r\n\t\t\t\t// customUndo and we turned it on for WebKit.  WebKit pasted funny,\r\n\t\t\t\t// so couldn't use the execCommand approach\r\n\t\t\t\twhile(node.firstChild){\r\n\t\t\t\t\tdomConstruct.place(node.firstChild, node, \"before\");\r\n\t\t\t\t}\r\n\t\t\t\tnode.parentNode.removeChild(node);\r\n\t\t\t}else{\r\n\t\t\t\t// Everyone else works fine this way, a paste-over and is native\r\n\t\t\t\t// undo friendly.\r\n\t\t\t\teditor.selection.selectElementChildren(node);\r\n\t\t\t\tvar html = editor.selection.getSelectedHtml();\r\n\t\t\t\teditor.selection.selectElement(node);\r\n\t\t\t\teditor.execCommand(\"inserthtml\", html || \"\");\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\t// TODO: for 2.0, split into FontChoice plugin into three separate classes,\r\n\t// one for each command (and change registry below)\r\n\tvar FontChoice = declare(\"dijit._editor.plugins.FontChoice\", _Plugin, {\r\n\t\t// summary:\r\n\t\t//\t\tThis plugin provides three drop downs for setting style in the editor\r\n\t\t//\t\t(font, font size, and format block), as controlled by command.\r\n\t\t//\r\n\t\t// description:\r\n\t\t//\t\tThe commands provided by this plugin are:\r\n\t\t//\r\n\t\t//\t\t- fontName: Provides a drop down to select from a list of font names\r\n\t\t//\t\t- fontSize: Provides a drop down to select from a list of font sizes\r\n\t\t//\t\t- formatBlock: Provides a drop down to select from a list of block styles\r\n\t\t//\t\t  which can easily be added to an editor by including one or more of the above commands\r\n\t\t//\t\t  in the `plugins` attribute as follows:\r\n\t\t//\r\n\t\t//\t|\tplugins=\"['fontName','fontSize',...]\"\r\n\t\t//\r\n\t\t//\t\tIt is possible to override the default dropdown list by providing an Array for the `custom` property when\r\n\t\t//\t\tinstantiating this plugin, e.g.\r\n\t\t//\r\n\t\t//\t|\tplugins=\"[{name:'dijit._editor.plugins.FontChoice', command:'fontName', values:['Verdana','Myriad','Garamond']},...]\"\r\n\t\t//\r\n\t\t//\t\tAlternatively, for `fontName` only, `generic:true` may be specified to provide a dropdown with\r\n\t\t//\t\t[CSS generic font families](http://www.w3.org/TR/REC-CSS2/fonts.html#generic-font-families).\r\n\t\t//\r\n\t\t//\t\tNote that the editor is often unable to properly handle font styling information defined outside\r\n\t\t//\t\tthe context of the current editor instance, such as pre-populated HTML.\r\n\r\n\t\t// useDefaultCommand: [protected] Boolean\r\n\t\t//\t\tOverride _Plugin.useDefaultCommand...\r\n\t\t//\t\tprocessing is handled by this plugin, not by dijit/Editor.\r\n\t\tuseDefaultCommand: false,\r\n\r\n\t\t_initButton: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverrides _Plugin._initButton(), to initialize the FilteringSelect+label in toolbar,\r\n\t\t\t//\t\trather than a simple button.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\r\n\t\t\t// Create the widget to go into the toolbar (the so-called \"button\")\r\n\t\t\tvar clazz = {\r\n\t\t\t\t\tfontName: _FontNameDropDown,\r\n\t\t\t\t\tfontSize: _FontSizeDropDown,\r\n\t\t\t\t\tformatBlock: _FormatBlockDropDown\r\n\t\t\t\t}[this.command],\r\n\t\t\t\tparams = this.params;\r\n\r\n\t\t\t// For back-compat reasons support setting custom values via \"custom\" parameter\r\n\t\t\t// rather than \"values\" parameter.   Remove in 2.0.\r\n\t\t\tif(this.params.custom){\r\n\t\t\t\tparams.values = this.params.custom;\r\n\t\t\t}\r\n\r\n\t\t\tvar editor = this.editor;\r\n\t\t\tthis.button = new clazz(lang.delegate({dir: editor.dir, lang: editor.lang}, params));\r\n\r\n\t\t\t// Reflect changes to the drop down in the editor\r\n\t\t\tthis.own(this.button.select.on(\"change\", lang.hitch(this, function(choice){\r\n\t\t\t\t// User invoked change, since all internal updates set priorityChange to false and will\r\n\t\t\t\t// not trigger an onChange event.\r\n\r\n\t\t\t\tif(this.editor.focused){\r\n\t\t\t\t\t// put focus back in the iframe, unless focus has somehow been shifted out of the editor completely\r\n\t\t\t\t\tthis.editor.focus();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(this.command == \"fontName\" && choice.indexOf(\" \") != -1){\r\n\t\t\t\t\tchoice = \"'\" + choice + \"'\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// Invoke, the editor already normalizes commands called through its\r\n\t\t\t\t// execCommand.\r\n\t\t\t\tif(this.button._execCommand){\r\n\t\t\t\t\tthis.button._execCommand(this.editor, this.command, choice);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis.editor.execCommand(this.command, choice);\r\n\t\t\t\t}\r\n\t\t\t})));\r\n\t\t},\r\n\r\n\t\tupdateState: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOverrides _Plugin.updateState().  This controls updating the menu\r\n\t\t\t//\t\toptions to the right values on state changes in the document (that trigger a\r\n\t\t\t//\t\ttest of the actions.)\r\n\t\t\t//\t\tIt set value of drop down in toolbar to reflect font/font size/format block\r\n\t\t\t//\t\tof text at current caret position.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t\tvar _e = this.editor;\r\n\t\t\tvar _c = this.command;\r\n\t\t\tif(!_e || !_e.isLoaded || !_c.length){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif(this.button){\r\n\t\t\t\tvar disabled = this.get(\"disabled\");\r\n\t\t\t\tthis.button.set(\"disabled\", disabled);\r\n\t\t\t\tif(disabled){\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\tvar value;\r\n\t\t\t\ttry{\r\n\t\t\t\t\tvalue = _e.queryCommandValue(_c) || \"\";\r\n\t\t\t\t}catch(e){\r\n\t\t\t\t\t//Firefox may throw error above if the editor is just loaded, ignore it\r\n\t\t\t\t\tvalue = \"\";\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// strip off single quotes, if any\r\n\t\t\t\tvar quoted = lang.isString(value) && (value.match(/'([^']*)'/) || value.match(/\"([^\"]*)\"/));\r\n\t\t\t\tif(quoted){\r\n\t\t\t\t\tvalue = quoted[1];\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif(_c === \"formatBlock\"){\r\n\t\t\t\t\tif(!value || value == \"p\"){\r\n\t\t\t\t\t\t// Some browsers (WebKit) doesn't actually get the tag info right.\r\n\t\t\t\t\t\t// and IE returns paragraph when in a DIV!, so incorrect a lot,\r\n\t\t\t\t\t\t// so we have double-check it.\r\n\t\t\t\t\t\tvalue = null;\r\n\t\t\t\t\t\tvar elem;\r\n\t\t\t\t\t\t// Try to find the current element where the caret is.\r\n\t\t\t\t\t\tvar sel = rangeapi.getSelection(this.editor.window);\r\n\t\t\t\t\t\tif(sel && sel.rangeCount > 0){\r\n\t\t\t\t\t\t\tvar range = sel.getRangeAt(0);\r\n\t\t\t\t\t\t\tif(range){\r\n\t\t\t\t\t\t\t\telem = range.endContainer;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Okay, now see if we can find one of the formatting types we're in.\r\n\t\t\t\t\t\twhile(elem && elem !== _e.editNode && elem !== _e.document){\r\n\t\t\t\t\t\t\tvar tg = elem.tagName ? elem.tagName.toLowerCase() : \"\";\r\n\t\t\t\t\t\t\tif(tg && array.indexOf(this.button.values, tg) > -1){\r\n\t\t\t\t\t\t\t\tvalue = tg;\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\telem = elem.parentNode;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(!value){\r\n\t\t\t\t\t\t\t// Still no value, so lets select 'none'.\r\n\t\t\t\t\t\t\tvalue = \"noFormat\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\t// Check that the block format is one allowed, if not,\r\n\t\t\t\t\t\t// null it so that it gets set to empty.\r\n\t\t\t\t\t\tif(array.indexOf(this.button.values, value) < 0){\r\n\t\t\t\t\t\t\tvalue = \"noFormat\";\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif(value !== this.button.get(\"value\")){\r\n\t\t\t\t\t// Set the value, but denote it is not a priority change, so no\r\n\t\t\t\t\t// onchange fires.\r\n\t\t\t\t\tthis.button.set('value', value, false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\t// Register these plugins\r\n\tarray.forEach([\"fontName\", \"fontSize\", \"formatBlock\"], function(name){\r\n\t\t_Plugin.registry[name] = function(args){\r\n\t\t\treturn new FontChoice({\r\n\t\t\t\tcommand: name,\r\n\t\t\t\tplainText: args.plainText\r\n\t\t\t});\r\n\t\t};\r\n\t});\r\n\r\n\t// Make all classes available through AMD, and return main class\r\n\tFontChoice._FontDropDown = _FontDropDown;\r\n\tFontChoice._FontNameDropDown = _FontNameDropDown;\r\n\tFontChoice._FontSizeDropDown = _FontSizeDropDown;\r\n\tFontChoice._FormatBlockDropDown = _FormatBlockDropDown;\r\n\treturn FontChoice;\r\n\r\n});\r\n"]}