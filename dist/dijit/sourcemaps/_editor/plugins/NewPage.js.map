{"version":3,"sources":["_editor/plugins/NewPage.js"],"names":["define","declare","i18n","lang","_Plugin","Button","NewPage","content","_initButton","strings","getLocalization","editor","this","button","label","ownerDocument","dir","showLabel","iconClass","iconClassPrefix","tabIndex","onClick","hitch","setEditor","updateState","set","get","_newPage","beginEditing","endEditing","focus","registry","args"],"mappings":";;;;;;;AAAAA,QACC,qBACA,YACA,kBACA,aACA,oBACA,6BACE,SAASC,EAASC,EAAMC,EAAMC,EAASC,GAKzC,IAAIC,EAAUL,EAAQ,gCAAiCG,GAQtDG,QAAS,OAETC,YAAa,WAGZ,IAAIC,EAAUP,EAAKQ,gBAAgB,gBAAiB,YACnDC,EAASC,KAAKD,OACfC,KAAKC,OAAS,IAAIR,GACjBS,MAAOL,EAAiB,QACxBM,cAAeJ,EAAOI,cACtBC,IAAKL,EAAOK,IACZb,KAAMQ,EAAOR,KACbc,WAAW,EACXC,UAAWN,KAAKO,gBAAkB,IAAMP,KAAKO,gBAAkB,UAC/DC,SAAU,KACVC,QAASlB,EAAKmB,MAAMV,KAAM,eAI5BW,UAAW,SAA0BZ,GAKpCC,KAAKD,OAASA,EACdC,KAAKJ,eAGNgB,YAAa,WAGZZ,KAAKC,OAAOY,IAAI,WAAYb,KAAKc,IAAI,cAGtCC,SAAU,WAKTf,KAAKD,OAAOiB,eACZhB,KAAKD,OAAOc,IAAI,QAASb,KAAKL,SAC9BK,KAAKD,OAAOkB,aACZjB,KAAKD,OAAOmB,WAYd,OANA1B,EAAQ2B,SAAkB,QAAI3B,EAAQ2B,SAAkB,QAAI,SAASC,GACpE,OAAO,IAAI1B,GACVC,QAAU,YAAayB,EAAQA,EAAKzB,QAAU,UAIzCD","file":"../../../_editor/plugins/NewPage.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/i18n\", // i18n.getLocalization\r\n\t\"dojo/_base/lang\", // lang.hitch\r\n\t\"../_Plugin\",\r\n\t\"../../form/Button\",\r\n\t\"dojo/i18n!../nls/commands\"\r\n], function(declare, i18n, lang, _Plugin, Button){\r\n\r\n\t// module:\r\n\t//\t\tdijit/_editor/plugins/NewPage\r\n\r\n\tvar NewPage = declare(\"dijit._editor.plugins.NewPage\", _Plugin, {\r\n\t\t// summary:\r\n\t\t//\t\tThis plugin provides a simple 'new page' capability.  In other\r\n\t\t//\t\twords, set content to some default user defined string.\r\n\r\n\t\t// content: [public] String\r\n\t\t//\t\tThe default content to insert into the editor as the new page.\r\n\t\t//\t\tThe default is the `<br>` tag, a single blank line.\r\n\t\tcontent: \"<br>\",\r\n\r\n\t\t_initButton: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOver-ride for creation of the Print button.\r\n\t\t\tvar strings = i18n.getLocalization(\"dijit._editor\", \"commands\"),\r\n\t\t\t\teditor = this.editor;\r\n\t\t\tthis.button = new Button({\r\n\t\t\t\tlabel: strings[\"newPage\"],\r\n\t\t\t\townerDocument: editor.ownerDocument,\r\n\t\t\t\tdir: editor.dir,\r\n\t\t\t\tlang: editor.lang,\r\n\t\t\t\tshowLabel: false,\r\n\t\t\t\ticonClass: this.iconClassPrefix + \" \" + this.iconClassPrefix + \"NewPage\",\r\n\t\t\t\ttabIndex: \"-1\",\r\n\t\t\t\tonClick: lang.hitch(this, \"_newPage\")\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\tsetEditor: function(/*dijit/Editor*/ editor){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTell the plugin which Editor it is associated with.\r\n\t\t\t// editor: Object\r\n\t\t\t//\t\tThe editor object to attach the newPage capability to.\r\n\t\t\tthis.editor = editor;\r\n\t\t\tthis._initButton();\r\n\t\t},\r\n\r\n\t\tupdateState: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tOver-ride for button state control for disabled to work.\r\n\t\t\tthis.button.set(\"disabled\", this.get(\"disabled\"));\r\n\t\t},\r\n\r\n\t\t_newPage: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFunction to set the content to blank.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tthis.editor.beginEditing();\r\n\t\t\tthis.editor.set(\"value\", this.content);\r\n\t\t\tthis.editor.endEditing();\r\n\t\t\tthis.editor.focus();\r\n\t\t}\r\n\t});\r\n\r\n\t// Register this plugin.\r\n\t// For back-compat accept \"newpage\" (all lowercase) too, remove in 2.0\r\n\t_Plugin.registry[\"newPage\"] = _Plugin.registry[\"newpage\"] = function(args){\r\n\t\treturn new NewPage({\r\n\t\t\tcontent: (\"content\" in args) ? args.content : \"<br>\"\r\n\t\t});\r\n\t};\r\n\r\n\treturn NewPage;\r\n});\r\n"]}