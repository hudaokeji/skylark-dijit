{"version":3,"sources":["tree/_dndSelector.js"],"names":["define","array","declare","kernel","lang","dndCommon","dom","mouse","on","touch","a11yclick","_dndContainer","constructor","this","selection","anchor","events","push","tree","domNode","press","hitch","release","move","singular","getSelectedTreeNodes","nodes","sel","i","selectNone","setSelection","destroy","inherited","arguments","addTreeNode","node","isAnchor","concat","removeTreeNode","newSelection","filter","selectedNode","isDescendant","isTreeNodeSelected","id","oldSelection","forEach","_setDifference","setSelected","_updateSelectionProperties","xs","ys","y","__exclude__","ret","x","selected","paths","ary","getTreePath","items","map","item","_set","onClickPress","e","current","isExpandable","isExpandoNode","target","type","isLeft","preventDefault","treeNode","focusedChild","copy","getCopyKeyState","shiftKey","_doDeselect","userSelect","onClickRelease","onMouseMove","onMouseDown","onMouseUp","_compareNodes","n1","n2","document","documentElement","sourceIndex","compareDocumentPosition","createRange","r1","doc","setStartBefore","r2","compareBoundaryPoints","END_TO_END","Error","multi","range","begin","end","cr","rowNode","_getNext","getItem","key","data","forInSelectedItems","f","o","global","call"],"mappings":"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","file":"../../tree/_dndSelector.js","sourcesContent":["define([\r\n\t\"dojo/_base/array\", // array.filter array.forEach array.map\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/_base/kernel\",\t// global\r\n\t\"dojo/_base/lang\", // lang.hitch\r\n\t\"dojo/dnd/common\",\r\n\t\"dojo/dom\", // isDescendant\r\n\t\"dojo/mouse\", // mouse.isLeft\r\n\t\"dojo/on\",\r\n\t\"dojo/touch\",\r\n\t\"../a11yclick\",\r\n\t\"./_dndContainer\"\r\n], function(array, declare, kernel, lang, dndCommon, dom, mouse, on, touch, a11yclick, _dndContainer){\r\n\r\n\t// module:\r\n\t//\t\tdijit/tree/_dndSelector\r\n\r\n\treturn declare(\"dijit.tree._dndSelector\", _dndContainer, {\r\n\t\t// summary:\r\n\t\t//\t\tThis is a base class for `dijit/tree/dndSource`, and isn't meant to be used directly.\r\n\t\t//\t\tIt's based on `dojo/dnd/Selector`.\r\n\t\t// tags:\r\n\t\t//\t\tprotected\r\n\r\n\t\t/*=====\r\n\t\t// selection: Object\r\n\t\t//\t\t(id to DomNode) map for every TreeNode that's currently selected.\r\n\t\t//\t\tThe DOMNode is the TreeNode.rowNode.\r\n\t\tselection: {},\r\n\t\t=====*/\r\n\r\n\t\tconstructor: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInitialization\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\r\n\t\t\tthis.selection={};\r\n\t\t\tthis.anchor = null;\r\n\r\n\t\t\tthis.events.push(\r\n\t\t\t\t// listeners setup here but no longer used (left for backwards compatibility\r\n\t\t\t\ton(this.tree.domNode, touch.press, lang.hitch(this,\"onMouseDown\")),\r\n\t\t\t\ton(this.tree.domNode, touch.release, lang.hitch(this,\"onMouseUp\")),\r\n\r\n\t\t\t\t// listeners used in this module\r\n\t\t\t\ton(this.tree.domNode, touch.move, lang.hitch(this,\"onMouseMove\")),\r\n\t\t\t\ton(this.tree.domNode, a11yclick.press, lang.hitch(this,\"onClickPress\")),\r\n\t\t\t\ton(this.tree.domNode, a11yclick.release, lang.hitch(this,\"onClickRelease\"))\r\n\t\t\t);\r\n\t\t},\r\n\r\n\t\t// singular: Boolean\r\n\t\t//\t\tAllows selection of only one element, if true.\r\n\t\t//\t\tTree hasn't been tested in singular=true mode, unclear if it works.\r\n\t\tsingular: false,\r\n\r\n\t\t// methods\r\n\t\tgetSelectedTreeNodes: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns a list of selected node(s).\r\n\t\t\t//\t\tUsed by dndSource on the start of a drag.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t\tvar nodes=[], sel = this.selection;\r\n\t\t\tfor(var i in sel){\r\n\t\t\t\tnodes.push(sel[i]);\r\n\t\t\t}\r\n\t\t\treturn nodes;\r\n\t\t},\r\n\r\n\t\tselectNone: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUnselects all items\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\r\n\t\t\tthis.setSelection([]);\r\n\t\t\treturn this;\t// self\r\n\t\t},\r\n\r\n\t\tdestroy: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tPrepares the object to be garbage-collected\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis.selection = this.anchor = null;\r\n\t\t},\r\n\t\taddTreeNode: function(/*dijit/Tree._TreeNode*/ node, /*Boolean?*/isAnchor){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tadd node to current selection\r\n\t\t\t// node: Node\r\n\t\t\t//\t\tnode to add\r\n\t\t\t// isAnchor: Boolean\r\n\t\t\t//\t\tWhether the node should become anchor.\r\n\r\n\t\t\tthis.setSelection(this.getSelectedTreeNodes().concat( [node] ));\r\n\t\t\tif(isAnchor){ this.anchor = node; }\r\n\t\t\treturn node;\r\n\t\t},\r\n\t\tremoveTreeNode: function(/*dijit/Tree._TreeNode*/ node){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tremove node and it's descendants from current selection\r\n\t\t\t// node: Node\r\n\t\t\t//\t\tnode to remove\r\n\t\t\tvar newSelection = array.filter(this.getSelectedTreeNodes(), function(selectedNode){\r\n\t\t\t\treturn !dom.isDescendant(selectedNode.domNode, node.domNode); // also matches when selectedNode == node\r\n\t\t\t});\r\n\t\t\tthis.setSelection(newSelection);\r\n\t\t\treturn node;\r\n\t\t},\r\n\t\tisTreeNodeSelected: function(/*dijit/Tree._TreeNode*/ node){\r\n\t\t\t// summary:\r\n\t\t\t//\t\treturn true if node is currently selected\r\n\t\t\t// node: Node\r\n\t\t\t//\t\tthe node to check whether it's in the current selection\r\n\r\n\t\t\treturn node.id && !!this.selection[node.id];\r\n\t\t},\r\n\t\tsetSelection: function(/*dijit/Tree._TreeNode[]*/ newSelection){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tset the list of selected nodes to be exactly newSelection. All changes to the\r\n\t\t\t//\t\tselection should be passed through this function, which ensures that derived\r\n\t\t\t//\t\tattributes are kept up to date. Anchor will be deleted if it has been removed\r\n\t\t\t//\t\tfrom the selection, but no new anchor will be added by this function.\r\n\t\t\t// newSelection: Node[]\r\n\t\t\t//\t\tlist of tree nodes to make selected\r\n\t\t\tvar oldSelection = this.getSelectedTreeNodes();\r\n\t\t\tarray.forEach(this._setDifference(oldSelection, newSelection), lang.hitch(this, function(node){\r\n\t\t\t\tnode.setSelected(false);\r\n\t\t\t\tif(this.anchor == node){\r\n\t\t\t\t\tdelete this.anchor;\r\n\t\t\t\t}\r\n\t\t\t\tdelete this.selection[node.id];\r\n\t\t\t}));\r\n\t\t\tarray.forEach(this._setDifference(newSelection, oldSelection), lang.hitch(this, function(node){\r\n\t\t\t\tnode.setSelected(true);\r\n\t\t\t\tthis.selection[node.id] = node;\r\n\t\t\t}));\r\n\t\t\tthis._updateSelectionProperties();\r\n\t\t},\r\n\t\t_setDifference: function(xs,ys){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns a copy of xs which lacks any objects\r\n\t\t\t//\t\toccurring in ys. Checks for membership by\r\n\t\t\t//\t\tmodifying and then reading the object, so it will\r\n\t\t\t//\t\tnot properly handle sets of numbers or strings.\r\n\r\n\t\t\tarray.forEach(ys, function(y){ y.__exclude__ = true; });\r\n\t\t\tvar ret = array.filter(xs, function(x){ return !x.__exclude__; });\r\n\r\n\t\t\t// clean up after ourselves.\r\n\t\t\tarray.forEach(ys, function(y){ delete y['__exclude__'] });\r\n\t\t\treturn ret;\r\n\t\t},\r\n\t\t_updateSelectionProperties: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUpdate the following tree properties from the current selection:\r\n\t\t\t//\t\tpath[s], selectedItem[s], selectedNode[s]\r\n\r\n\t\t\tvar selected = this.getSelectedTreeNodes();\r\n\t\t\tvar paths = [], nodes = [];\r\n\t\t\tarray.forEach(selected, function(node){\r\n\t\t\t\tvar ary = node.getTreePath();\r\n\t\t\t\tnodes.push(node);\r\n\t\t\t\tpaths.push(ary);\r\n\t\t\t}, this);\r\n\t\t\tvar items = array.map(nodes,function(node){ return node.item; });\r\n\t\t\tthis.tree._set(\"paths\", paths);\r\n\t\t\tthis.tree._set(\"path\", paths[0] || []);\r\n\t\t\tthis.tree._set(\"selectedNodes\", nodes);\r\n\t\t\tthis.tree._set(\"selectedNode\", nodes[0] || null);\r\n\t\t\tthis.tree._set(\"selectedItems\", items);\r\n\t\t\tthis.tree._set(\"selectedItem\", items[0] || null);\r\n\t\t},\r\n\r\n\t\t// selection related events\r\n\t\tonClickPress: function(e){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tEvent processor for onmousedown/ontouchstart/onkeydown corresponding to a click event\r\n\t\t\t// e: Event\r\n\t\t\t//\t\tonmousedown/ontouchstart/onkeydown event\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\r\n\t\t\t// ignore mouse or touch on expando node\r\n\t\t\tif(this.current && this.current.isExpandable && this.tree.isExpandoNode(e.target, this.current)){ return; }\r\n\r\n\t\t\tif(e.type == \"mousedown\" && mouse.isLeft(e)){\r\n\t\t\t\t// Prevent text selection while dragging on desktop, see #16328.   But don't call preventDefault()\r\n\t\t\t\t// for mobile because it will break things completely, see #15838.  Also, don't preventDefault() on\r\n\t\t\t\t// MSPointerDown or pointerdown events, because that stops the mousedown event from being generated,\r\n\t\t\t\t// see #17709.\r\n\t\t\t\t// TODO: remove this completely in 2.0.  It shouldn't be needed since dojo/dnd/Manager already\r\n\t\t\t\t// calls preventDefault() for the \"selectstart\" event.  It can also be achieved via CSS:\r\n\t\t\t\t// http://stackoverflow.com/questions/826782/css-rule-to-disable-text-selection-highlighting\r\n\t\t\t\te.preventDefault();\r\n\t\t\t}\r\n\r\n\t\t\tvar treeNode = e.type == \"keydown\" ? this.tree.focusedChild : this.current;\r\n\r\n\t\t\tif(!treeNode){\r\n\t\t\t\t// Click must be on the Tree but not on a TreeNode, happens especially when Tree is stretched to fill\r\n\t\t\t\t// a pane of a BorderContainer, etc.\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar copy = dndCommon.getCopyKeyState(e), id = treeNode.id;\r\n\r\n\t\t\t// if shift key is not pressed, and the node is already in the selection,\r\n\t\t\t// delay deselection until onmouseup so in the case of DND, deselection\r\n\t\t\t// will be canceled by onmousemove.\r\n\t\t\tif(!this.singular && !e.shiftKey && this.selection[id]){\r\n\t\t\t\tthis._doDeselect = true;\r\n\t\t\t\treturn;\r\n\t\t\t}else{\r\n\t\t\t\tthis._doDeselect = false;\r\n\t\t\t}\r\n\t\t\tthis.userSelect(treeNode, copy, e.shiftKey);\r\n\t\t},\r\n\r\n\t\tonClickRelease: function(e){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tEvent processor for onmouseup/ontouchend/onkeyup corresponding to a click event\r\n\t\t\t// e: Event\r\n\t\t\t//\t\tonmouseup/ontouchend/onkeyup event\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\r\n\t\t\t// _doDeselect is the flag to indicate that the user wants to either ctrl+click on\r\n\t\t\t// an already selected item (to deselect the item), or click on a not-yet selected item\r\n\t\t\t// (which should remove all current selection, and add the clicked item). This can not\r\n\t\t\t// be done in onMouseDown, because the user may start a drag after mousedown. By moving\r\n\t\t\t// the deselection logic here, the user can drag an already selected item.\r\n\t\t\tif(!this._doDeselect){ return; }\r\n\t\t\tthis._doDeselect = false;\r\n\t\t\tthis.userSelect(e.type == \"keyup\" ? this.tree.focusedChild : this.current, dndCommon.getCopyKeyState(e), e.shiftKey);\r\n\t\t},\r\n\t\tonMouseMove: function(/*===== e =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tevent processor for onmousemove/ontouchmove\r\n\t\t\t// e: Event\r\n\t\t\t//\t\tonmousemove/ontouchmove event\r\n\t\t\tthis._doDeselect = false;\r\n\t\t},\r\n\r\n\t\t// mouse/touch events that are no longer used\r\n\t\tonMouseDown: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tEvent processor for onmousedown/ontouchstart\r\n\t\t\t// e: Event\r\n\t\t\t//\t\tonmousedown/ontouchstart event\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t},\r\n\t\tonMouseUp: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tEvent processor for onmouseup/ontouchend\r\n\t\t\t// e: Event\r\n\t\t\t//\t\tonmouseup/ontouchend event\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t},\r\n\r\n\t\t_compareNodes: function(n1, n2){\r\n\t\t\tif(n1 === n2){\r\n\t\t\t\treturn 0;\r\n\t\t\t}\r\n\r\n\t\t\tif('sourceIndex' in document.documentElement){ //IE\r\n\t\t\t\t//TODO: does not yet work if n1 and/or n2 is a text node\r\n\t\t\t\treturn n1.sourceIndex - n2.sourceIndex;\r\n\t\t\t}else if('compareDocumentPosition' in document.documentElement){ //FF, Opera\r\n\t\t\t\treturn n1.compareDocumentPosition(n2) & 2 ? 1: -1;\r\n\t\t\t}else if(document.createRange){ //Webkit\r\n\t\t\t\tvar r1 = doc.createRange();\r\n\t\t\t\tr1.setStartBefore(n1);\r\n\r\n\t\t\t\tvar r2 = doc.createRange();\r\n\t\t\t\tr2.setStartBefore(n2);\r\n\r\n\t\t\t\treturn r1.compareBoundaryPoints(r1.END_TO_END, r2);\r\n\t\t\t}else{\r\n\t\t\t\tthrow Error(\"dijit.tree._compareNodes don't know how to compare two different nodes in this browser\");\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tuserSelect: function(node, multi, range){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdd or remove the given node from selection, responding\r\n\t\t\t//\t\tto a user action such as a click or keypress.\r\n\t\t\t// multi: Boolean\r\n\t\t\t//\t\tIndicates whether this is meant to be a multi-select action (e.g. ctrl-click)\r\n\t\t\t// range: Boolean\r\n\t\t\t//\t\tIndicates whether this is meant to be a ranged action (e.g. shift-click)\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\r\n\t\t\tif(this.singular){\r\n\t\t\t\tif(this.anchor == node && multi){\r\n\t\t\t\t\tthis.selectNone();\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis.setSelection([node]);\r\n\t\t\t\t\tthis.anchor = node;\r\n\t\t\t\t}\r\n\t\t\t}else{\r\n\t\t\t\tif(range && this.anchor){\r\n\t\t\t\t\tvar cr = this._compareNodes(this.anchor.rowNode, node.rowNode),\r\n\t\t\t\t\tbegin, end, anchor = this.anchor;\r\n\r\n\t\t\t\t\tif(cr < 0){ //current is after anchor\r\n\t\t\t\t\t\tbegin = anchor;\r\n\t\t\t\t\t\tend = node;\r\n\t\t\t\t\t}else{ //current is before anchor\r\n\t\t\t\t\t\tbegin = node;\r\n\t\t\t\t\t\tend = anchor;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar nodes = [];\r\n\t\t\t\t\t//add everything betweeen begin and end inclusively\r\n\t\t\t\t\twhile(begin != end){\r\n\t\t\t\t\t\tnodes.push(begin);\r\n\t\t\t\t\t\tbegin = this.tree._getNext(begin);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tnodes.push(end);\r\n\r\n\t\t\t\t\tthis.setSelection(nodes);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tif( this.selection[ node.id ] && multi ){\r\n\t\t\t\t\t\tthis.removeTreeNode( node );\r\n\t\t\t\t\t}else if(multi){\r\n\t\t\t\t\t\tthis.addTreeNode(node, true);\r\n\t\t\t\t\t}else{\r\n\t\t\t\t\t\tthis.setSelection([node]);\r\n\t\t\t\t\t\tthis.anchor = node;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tgetItem: function(/*String*/ key){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns the dojo/dnd/Container._Item (representing a dragged node) by it's key (id).\r\n\t\t\t//\t\tCalled by dojo/dnd/Source.checkAcceptance().\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\r\n\t\t\tvar widget = this.selection[key];\r\n\t\t\treturn {\r\n\t\t\t\tdata: widget,\r\n\t\t\t\ttype: [\"treeNode\"]\r\n\t\t\t}; // dojo/dnd/Container._Item\r\n\t\t},\r\n\r\n\t\tforInSelectedItems: function(/*Function*/ f, /*Object?*/ o){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tIterates over selected items;\r\n\t\t\t//\t\tsee `dojo/dnd/Container.forInItems()` for details\r\n\t\t\to = o || kernel.global;\r\n\t\t\tfor(var id in this.selection){\r\n\t\t\t\t// console.log(\"selected item id: \" + id);\r\n\t\t\t\tf.call(o, this.getItem(id), id, this);\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n});\r\n"]}