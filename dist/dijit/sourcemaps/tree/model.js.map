{"version":3,"sources":["tree/model.js"],"names":["define","declare","destroy","getRoot","onItem","mayHaveChildren","item","getChildren","parentItem","onComplete","isItem","something","getIdentity","getLabel","newItem","args","parent","insertIndex","before","pasteItem","childItem","oldParentItem","newParentItem","bCopy","onChange","onChildrenChange","newChildrenList"],"mappings":";;;;;;;AAAAA,QAAQ,sBAAuB,SAASC,GAEvC,OAAOA,EAAQ,mBAAoB,MAUlCC,QAAS,aAUTC,QAAS,SAASC,KAQlBC,gBAAiB,SAASC,KAW1BC,YAAa,SAASC,EAAYC,KAalCC,OAAQ,SAASC,KASjBC,YAAa,SAASN,KAOtBO,SAAU,SAASP,KAUnBQ,QAAS,SAASC,EAAMC,EAAQC,EAAaC,KAa7CC,UAAW,SAASC,EAAWC,EAAeC,EAAeC,EAAON,EAAaC,KAqBjFM,SAAU,SAASlB,KAWnBmB,iBAAkB,SAAST,EAAQU","file":"../../tree/model.js","sourcesContent":["define([\"dojo/_base/declare\"], function(declare){\r\n\r\n\treturn declare(\"dijit.tree.model\", null, {\r\n\t\t// summary:\r\n\t\t//\t\tContract for any data provider object for the tree.\r\n\t\t// description:\r\n\t\t//\t\tTree passes in values to the constructor to specify the callbacks.\r\n\t\t//\t\t\"item\" is typically a dojo/data/Item but it's just a black box so\r\n\t\t//\t\tit could be anything.\r\n\t\t//\r\n\t\t//\t\tThis (like `dojo/data/api/Read`) is just documentation, and not meant to be used.\r\n\r\n\t\tdestroy: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDestroys this object, releasing connections to the store\r\n\t\t\t// tags:\r\n\t\t\t//\t\textension\r\n\t\t},\r\n\r\n\t\t// =======================================================================\r\n\t\t// Methods for traversing hierarchy\r\n\r\n\t\tgetRoot: function(onItem){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalls onItem with the root item for the tree, possibly a fabricated item.\r\n\t\t\t//\t\tThrows exception on error.\r\n\t\t\t// tags:\r\n\t\t\t//\t\textension\r\n\t\t},\r\n\r\n\t\tmayHaveChildren: function(item){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tTells if an item has or may have children.  Implementing logic here\r\n\t\t\t//\t\tavoids showing +/- expando icon for nodes that we know don't have children.\r\n\t\t\t//\t\t(For efficiency reasons we may not want to check if an element actually\r\n\t\t\t//\t\thas children until user clicks the expando node)\r\n\t\t\t// item: dojo/data/Item\r\n\t\t\t// tags:\r\n\t\t\t//\t\textension\r\n\t\t},\r\n\r\n\t\tgetChildren: function(parentItem, onComplete){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalls onComplete() with array of child items of given parent item, all loaded.\r\n\t\t\t//\t\tThrows exception on error.\r\n\t\t\t// parentItem: dojo/data/Item\r\n\t\t\t// onComplete: function(items)\r\n\t\t\t// tags:\r\n\t\t\t//\t\textension\r\n\t\t},\r\n\r\n\t\t// =======================================================================\r\n\t\t// Inspecting items\r\n\r\n\t\tisItem: function(something){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns true if *something* is an item and came from this model instance.\r\n\t\t\t//\t\tReturns false if *something* is a literal, an item from another model instance,\r\n\t\t\t//\t\tor is any object other than an item.\r\n\t\t\t// tags:\r\n\t\t\t//\t\textension\r\n\t\t},\r\n\r\n\t\tgetIdentity: function(item){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturns identity for an item\r\n\t\t\t// tags:\r\n\t\t\t//\t\textension\r\n\t\t},\r\n\r\n\t\tgetLabel: function(item){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGet the label for an item\r\n\t\t\t// tags:\r\n\t\t\t//\t\textension\r\n\t\t},\r\n\r\n\t\t// =======================================================================\r\n\t\t// Write interface\r\n\r\n\t\tnewItem: function(args, parent, insertIndex, before){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreates a new item.   See `dojo/data/api/Write` for details on args.\r\n\t\t\t// args: dijit/tree/dndSource.__Item\r\n\t\t\t// parent: Item\r\n\t\t\t// insertIndex: int?\r\n\t\t\t//\t\tAllows to insert the new item as the n'th child of `parent`.\r\n\t\t\t// before: Item?\r\n\t\t\t//\t\tInsert the new item as the previous sibling of this item.  `before` must be a child of `parent`.\r\n\t\t\t// tags:\r\n\t\t\t//\t\textension\r\n\t\t},\r\n\r\n\t\tpasteItem: function(childItem, oldParentItem, newParentItem, bCopy, insertIndex, before){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tMove or copy an item from one parent item to another.\r\n\t\t\t//\t\tUsed in drag & drop.\r\n\t\t\t//\t\tIf oldParentItem is specified and bCopy is false, childItem is removed from oldParentItem.\r\n\t\t\t//\t\tIf newParentItem is specified, childItem is attached to newParentItem.\r\n\t\t\t// childItem: Item\r\n\t\t\t// oldParentItem: Item\r\n\t\t\t// newParentItem: Item\r\n\t\t\t// bCopy: Boolean\r\n\t\t\t// insertIndex: int?\r\n\t\t\t//\t\tAllows to insert the new item as the n'th child of `parent`.\r\n\t\t\t// before: Item?\r\n\t\t\t//\t\tInsert the new item as the previous sibling of this item.  `before` must be a child of `parent`.\r\n\t\t\t// tags:\r\n\t\t\t//\t\textension\r\n\t\t},\r\n\r\n\t\t// =======================================================================\r\n\t\t// Callbacks\r\n\r\n\t\tonChange: function(item){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCallback whenever an item has changed, so that Tree\r\n\t\t\t//\t\tcan update the label, icon, etc.   Note that changes\r\n\t\t\t//\t\tto an item's children or parent(s) will trigger an\r\n\t\t\t//\t\tonChildrenChange() so you can ignore those changes here.\r\n\t\t\t// item: dojo/data/Item\r\n\t\t\t// tags:\r\n\t\t\t//\t\tcallback\r\n\t\t},\r\n\r\n\t\tonChildrenChange: function(parent, newChildrenList){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCallback to do notifications about new, updated, or deleted items.\r\n\t\t\t// parent: dojo/data/Item\r\n\t\t\t// newChildrenList: dojo/data/Item[]\r\n\t\t\t// tags:\r\n\t\t\t//\t\tcallback\r\n\t\t}\r\n\t});\r\n});"]}