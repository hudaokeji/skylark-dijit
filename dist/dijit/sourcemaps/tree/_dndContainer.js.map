{"version":3,"sources":["tree/_dndContainer.js"],"names":["define","aspect","declare","domClass","lang","on","touch","constructor","tree","params","this","node","domNode","mixin","containerState","add","events","enter","hitch","leave","after","evt","preventDefault","destroy","h","pop","remove","parent","onMouseOver","widget","current","onMouseOut","_changeState","type","newState","prefix","state","toLowerCase","replace","_addItemClass","_removeItemClass","onOverEvent","onOutEvent"],"mappings":";;;;;;;AAAAA,QACC,cACA,qBACA,iBACA,kBACA,UACA,cACE,SAASC,EAAQC,EAASC,EAAUC,EAAMC,EAAIC,GAuBhD,OAAOJ,EAAQ,2BAA4B,MAc1CK,YAAa,SAASC,EAAMC,GAS3BC,KAAKF,KAAOA,EACZE,KAAKC,KAAOH,EAAKI,QACjBR,EAAKS,MAAMH,KAAMD,GAGjBC,KAAKI,eAAiB,GACtBX,EAASY,IAAIL,KAAKC,KAAM,oBAGxBD,KAAKM,QAEJX,EAAGK,KAAKC,KAAML,EAAMW,MAAOb,EAAKc,MAAMR,KAAM,gBAC5CL,EAAGK,KAAKC,KAAML,EAAMa,MAAOf,EAAKc,MAAMR,KAAM,eAG5CT,EAAOmB,MAAMV,KAAKF,KAAM,oBAAqBJ,EAAKc,MAAMR,KAAM,gBAAgB,GAC9ET,EAAOmB,MAAMV,KAAKF,KAAM,oBAAqBJ,EAAKc,MAAMR,KAAM,eAAe,GAG7EL,EAAGK,KAAKC,KAAM,yBAA0B,SAASU,GAChDA,EAAIC,qBAKPC,QAAS,WAKR,IADA,IAAIC,EACEA,EAAId,KAAKM,OAAOS,OACrBD,EAAEE,SAIHhB,KAAKC,KAAOD,KAAKiB,OAAS,MAI3BC,YAAa,SAASC,GAOrBnB,KAAKoB,QAAUD,GAGhBE,WAAY,WAOXrB,KAAKoB,QAAU,MAGhBE,aAAc,SAASC,EAAMC,GAO5B,IAAIC,EAAS,UAAYF,EACrBG,EAAQH,EAAKI,cAAgB,QAEjClC,EAASmC,QAAQ5B,KAAKC,KAAMwB,EAASD,EAAUC,EAASzB,KAAK0B,IAC7D1B,KAAK0B,GAASF,GAGfK,cAAe,SAAS5B,EAAMsB,GAO7B9B,EAASY,IAAIJ,EAAM,cAAgBsB,IAGpCO,iBAAkB,SAAS7B,EAAMsB,GAOhC9B,EAASuB,OAAOf,EAAM,cAAgBsB,IAGvCQ,YAAa,WAKZ/B,KAAKsB,aAAa,YAAa,SAGhCU,WAAY,WAKXhC,KAAKsB,aAAa,YAAa","file":"../../tree/_dndContainer.js","sourcesContent":["define([\r\n\t\"dojo/aspect\", // aspect.after\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom-class\", // domClass.add domClass.remove domClass.replace\r\n\t\"dojo/_base/lang\", // lang.mixin lang.hitch\r\n\t\"dojo/on\",\r\n\t\"dojo/touch\"\r\n], function(aspect, declare, domClass, lang, on, touch){\r\n\r\n\t// module:\r\n\t//\t\tdijit/tree/_dndContainer\r\n\r\n\t/*=====\r\n\t var __Args = {\r\n\t // summary:\r\n\t //\t\tA dict of parameters for Tree source configuration.\r\n\t // isSource: Boolean?\r\n\t //\t\tCan be used as a DnD source. Defaults to true.\r\n\t // accept: String[]\r\n\t //\t\tList of accepted types (text strings) for a target; defaults to\r\n\t //\t\t[\"text\", \"treeNode\"]\r\n\t // copyOnly: Boolean?\r\n\t //\t\tCopy items, if true, use a state of Ctrl key otherwise,\r\n\t // dragThreshold: Number\r\n\t //\t\tThe move delay in pixels before detecting a drag; 0 by default\r\n\t // betweenThreshold: Integer\r\n\t //\t\tDistance from upper/lower edge of node to allow drop to reorder nodes\r\n\t };\r\n\t =====*/\r\n\r\n\treturn declare(\"dijit.tree._dndContainer\", null, {\r\n\r\n\t\t// summary:\r\n\t\t//\t\tThis is a base class for `dijit/tree/_dndSelector`, and isn't meant to be used directly.\r\n\t\t//\t\tIt's modeled after `dojo/dnd/Container`.\r\n\t\t// tags:\r\n\t\t//\t\tprotected\r\n\r\n\t\t/*=====\r\n\t\t // current: TreeNode\r\n\t\t //\t\tThe currently hovered TreeNode.  Not set to anything for keyboard operation.  (TODO: change?)\r\n\t\t current: null,\r\n\t\t =====*/\r\n\r\n\t\tconstructor: function(tree, params){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tA constructor of the Container\r\n\t\t\t// tree: Node\r\n\t\t\t//\t\tNode or node's id to build the container on\r\n\t\t\t// params: __Args\r\n\t\t\t//\t\tA dict of parameters, which gets mixed into the object\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tthis.tree = tree;\r\n\t\t\tthis.node = tree.domNode;\t// TODO: rename; it's not a TreeNode but the whole Tree\r\n\t\t\tlang.mixin(this, params);\r\n\r\n\t\t\t// states\r\n\t\t\tthis.containerState = \"\";\r\n\t\t\tdomClass.add(this.node, \"dojoDndContainer\");\r\n\r\n\t\t\t// set up events\r\n\t\t\tthis.events = [\r\n\t\t\t\t// Mouse (or touch) enter/leave on Tree itself\r\n\t\t\t\ton(this.node, touch.enter, lang.hitch(this, \"onOverEvent\")),\r\n\t\t\t\ton(this.node, touch.leave, lang.hitch(this, \"onOutEvent\")),\r\n\r\n\t\t\t\t// switching between TreeNodes\r\n\t\t\t\taspect.after(this.tree, \"_onNodeMouseEnter\", lang.hitch(this, \"onMouseOver\"), true),\r\n\t\t\t\taspect.after(this.tree, \"_onNodeMouseLeave\", lang.hitch(this, \"onMouseOut\"), true),\r\n\r\n\t\t\t\t// cancel text selection and text dragging\r\n\t\t\t\ton(this.node, \"dragstart, selectstart\", function(evt){\r\n\t\t\t\t\tevt.preventDefault();\r\n\t\t\t\t})\r\n\t\t\t];\r\n\t\t},\r\n\r\n\t\tdestroy: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tPrepares this object to be garbage-collected\r\n\r\n\t\t\tvar h;\r\n\t\t\twhile(h = this.events.pop()){\r\n\t\t\t\th.remove();\r\n\t\t\t}\r\n\r\n\t\t\t// this.clearItems();\r\n\t\t\tthis.node = this.parent = null;\r\n\t\t},\r\n\r\n\t\t// mouse events\r\n\t\tonMouseOver: function(widget /*===== , evt =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when mouse is moved over a TreeNode\r\n\t\t\t// widget: TreeNode\r\n\t\t\t// evt: Event\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t\tthis.current = widget;\r\n\t\t},\r\n\r\n\t\tonMouseOut: function(/*===== widget, evt =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when mouse is moved away from a TreeNode\r\n\t\t\t// widget: TreeNode\r\n\t\t\t// evt: Event\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t\tthis.current = null;\r\n\t\t},\r\n\r\n\t\t_changeState: function(type, newState){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tChanges a named state to new state value\r\n\t\t\t// type: String\r\n\t\t\t//\t\tA name of the state to change\r\n\t\t\t// newState: String\r\n\t\t\t//\t\tnew state\r\n\t\t\tvar prefix = \"dojoDnd\" + type;\r\n\t\t\tvar state = type.toLowerCase() + \"State\";\r\n\t\t\t//domClass.replace(this.node, prefix + newState, prefix + this[state]);\r\n\t\t\tdomClass.replace(this.node, prefix + newState, prefix + this[state]);\r\n\t\t\tthis[state] = newState;\r\n\t\t},\r\n\r\n\t\t_addItemClass: function(node, type){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdds a class with prefix \"dojoDndItem\"\r\n\t\t\t// node: Node\r\n\t\t\t//\t\tA node\r\n\t\t\t// type: String\r\n\t\t\t//\t\tA variable suffix for a class name\r\n\t\t\tdomClass.add(node, \"dojoDndItem\" + type);\r\n\t\t},\r\n\r\n\t\t_removeItemClass: function(node, type){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRemoves a class with prefix \"dojoDndItem\"\r\n\t\t\t// node: Node\r\n\t\t\t//\t\tA node\r\n\t\t\t// type: String\r\n\t\t\t//\t\tA variable suffix for a class name\r\n\t\t\tdomClass.remove(node, \"dojoDndItem\" + type);\r\n\t\t},\r\n\r\n\t\tonOverEvent: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tThis function is called once, when mouse is over our container\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t\tthis._changeState(\"Container\", \"Over\");\r\n\t\t},\r\n\r\n\t\tonOutEvent: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tThis function is called once, when mouse is out of our container\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t\tthis._changeState(\"Container\", \"\");\r\n\t\t}\r\n\t});\r\n});\r\n"]}