{"version":3,"sources":["ProgressBar.js"],"names":["define","require","declare","domClass","lang","number","_Widget","_TemplatedMixin","template","progress","value","maximum","places","indeterminate","label","name","templateString","_indeterminateHighContrastImagePath","toUrl","postMixInProperties","this","inherited","arguments","params","Infinity","buildRendering","indeterminateHighContrastImage","setAttribute","toString","update","_setDirAttr","val","rtl","toLowerCase","toggle","domNode","attributes","mixin","tip","internalProgress","ap","percent","removeAttribute","String","indexOf","Math","min","parseFloat","labelNode","id","innerHTML","report","isLeftToRight","style","width","onChange","_setValueAttr","v","_set","_setLabelAttr","_setIndeterminateAttr","format","type","locale"],"mappings":";;;;;;;AAAAA,QACC,UACA,qBACA,iBACA,kBACA,cACA,YACA,oBACA,0CACE,SAASC,QAASC,EAASC,EAAUC,EAAMC,EAAQC,EAASC,EAAiBC,GAK/E,OAAON,EAAQ,qBAAsBI,EAASC,IAQ7CE,SAAU,IAOVC,MAAO,GAIPC,QAAS,IAITC,OAAQ,EAMRC,eAAe,EAKfC,MAAO,GAKPC,KAAM,GAENC,eAAgBR,EAIhBS,oCAAqChB,QAAQiB,MAAM,4CAEnDC,oBAAqB,WACpBC,KAAKC,UAAUC,WAGVF,KAAKG,QAAU,UAAWH,KAAKG,SACnCH,KAAKV,MAAQU,KAAKP,cAAgBW,EAAAA,EAAWJ,KAAKX,WAIpDgB,eAAgB,WACfL,KAAKC,UAAUC,WACfF,KAAKM,+BAA+BC,aAAa,MAChDP,KAAKH,oCAAoCW,YAC1CR,KAAKS,UAGNC,YAAa,SAASC,GAErB,IAAIC,EAA2B,OAArBD,EAAIE,cACd9B,EAAS+B,OAAOd,KAAKe,QAAS,sBAAuBH,GACrD7B,EAAS+B,OAAOd,KAAKe,QAAS,mCAAoCf,KAAKP,eAAiBmB,GACxFZ,KAAKC,UAAUC,YAGhBO,OAAQ,SAAoBO,GAgB3BhC,EAAKiC,MAAMjB,KAAMgB,OACjB,IAAIE,EAAMlB,KAAKmB,iBAAkBC,EAAKpB,KAAKe,QACvCM,EAAU,EACXrB,KAAKP,cACP2B,EAAGE,gBAAgB,mBAEuB,GAAvCC,OAAOvB,KAAKX,UAAUmC,QAAQ,MAChCH,EAAUI,KAAKC,IAAIC,WAAW3B,KAAKX,UAAY,IAAK,GACpDW,KAAKX,SAAWgC,EAAUrB,KAAKT,UAE/BS,KAAKX,SAAWoC,KAAKC,IAAI1B,KAAKX,SAAUW,KAAKT,SAC7C8B,EAAUrB,KAAKT,QAAUS,KAAKX,SAAWW,KAAKT,QAAU,GAEzD6B,EAAGb,aAAa,gBAAiBP,KAAKX,WAIvC+B,EAAGb,aAAa,kBAAmBP,KAAK4B,UAAUC,IAClDT,EAAGb,aAAa,gBAAiB,GACjCa,EAAGb,aAAa,gBAAiBP,KAAKT,SAEtCS,KAAK4B,UAAUE,UAAY9B,KAAK+B,OAAOV,GAEvCtC,EAAS+B,OAAOd,KAAKe,QAAS,gCAAiCf,KAAKP,eACpEV,EAAS+B,OAAOd,KAAKe,QAAS,mCAAoCf,KAAKP,gBAAkBO,KAAKgC,iBAE9Fd,EAAIe,MAAMC,MAAmB,IAAVb,EAAiB,IACpCrB,KAAKmC,YAGNC,cAAe,SAASC,GACvBrC,KAAKsC,KAAK,QAASD,GAChBA,GAAKjC,EAAAA,EACPJ,KAAKS,QAAQhB,eAAe,IAE5BO,KAAKS,QAAQhB,eAAe,EAAOJ,SAAUgD,KAI/CE,cAAe,SAAS7C,GACvBM,KAAKsC,KAAK,QAAS5C,GACnBM,KAAKS,UAGN+B,sBAAuB,SAAS/C,GAE/BO,KAAKsC,KAAK,gBAAiB7C,GAC3BO,KAAKS,UAGNsB,OAAQ,SAAkBV,GAOzB,OAAOrB,KAAKN,MAAQM,KAAKN,MACvBM,KAAKP,cAAgB,SAAWR,EAAOwD,OAAOpB,GAAWqB,KAAM,UAAWlD,OAAQQ,KAAKR,OAAQmD,OAAQ3C,KAAKhB,QAG/GmD,SAAU","file":"../ProgressBar.js","sourcesContent":["define([\r\n\t\"require\", // require.toUrl\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom-class\", // domClass.toggle\r\n\t\"dojo/_base/lang\", // lang.mixin\r\n\t\"dojo/number\", // number.format\r\n\t\"./_Widget\",\r\n\t\"./_TemplatedMixin\",\r\n\t\"dojo/text!./templates/ProgressBar.html\"\r\n], function(require, declare, domClass, lang, number, _Widget, _TemplatedMixin, template){\r\n\r\n\t// module:\r\n\t//\t\tdijit/ProgressBar\r\n\r\n\treturn declare(\"dijit.ProgressBar\", [_Widget, _TemplatedMixin], {\r\n\t\t// summary:\r\n\t\t//\t\tA progress indication widget, showing the amount completed\r\n\t\t//\t\t(often the percentage completed) of a task.\r\n\r\n\t\t// progress: [const] String (Percentage or Number)\r\n\t\t//\t\tNumber or percentage indicating amount of task completed.\r\n\t\t//\t\tDeprecated.   Use \"value\" instead.\r\n\t\tprogress: \"0\",\r\n\r\n\t\t// value: String (Percentage or Number)\r\n\t\t//\t\tNumber or percentage indicating amount of task completed.\r\n\t\t//\t\tWith \"%\": percentage value, 0% <= progress <= 100%, or\r\n\t\t//\t\twithout \"%\": absolute value, 0 <= progress <= maximum.\r\n\t\t//\t\tInfinity means that the progress bar is indeterminate.\r\n\t\tvalue: \"\",\r\n\r\n\t\t// maximum: [const] Float\r\n\t\t//\t\tMax sample number\r\n\t\tmaximum: 100,\r\n\r\n\t\t// places: [const] Number\r\n\t\t//\t\tNumber of places to show in values; 0 by default\r\n\t\tplaces: 0,\r\n\r\n\t\t// indeterminate: [const] Boolean\r\n\t\t//\t\tIf false: show progress value (number or percentage).\r\n\t\t//\t\tIf true: show that a process is underway but that the amount completed is unknown.\r\n\t\t//\t\tDeprecated.   Use \"value\" instead.\r\n\t\tindeterminate: false,\r\n\r\n\t\t// label: String?\r\n\t\t//\t\tHTML label on progress bar.   Defaults to percentage for determinate progress bar and\r\n\t\t//\t\tblank for indeterminate progress bar.\r\n\t\tlabel: \"\",\r\n\r\n\t\t// name: String\r\n\t\t//\t\tthis is the field name (for a form) if set. This needs to be set if you want to use\r\n\t\t//\t\tthis widget in a dijit/form/Form widget (such as dijit/Dialog)\r\n\t\tname: '',\r\n\r\n\t\ttemplateString: template,\r\n\r\n\t\t// _indeterminateHighContrastImagePath: [private] URL\r\n\t\t//\t\tURL to image to use for indeterminate progress bar when display is in high contrast mode\r\n\t\t_indeterminateHighContrastImagePath: require.toUrl(\"./themes/a11y/indeterminate_progress.gif\"),\r\n\r\n\t\tpostMixInProperties: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\t// Back-compat for when constructor specifies indeterminate or progress, rather than value.   Remove for 2.0.\r\n\t\t\tif(!(this.params && \"value\" in this.params)){\r\n\t\t\t\tthis.value = this.indeterminate ? Infinity : this.progress;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tbuildRendering: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis.indeterminateHighContrastImage.setAttribute(\"src\",\r\n\t\t\t\tthis._indeterminateHighContrastImagePath.toString());\r\n\t\t\tthis.update();\r\n\t\t},\r\n\r\n\t\t_setDirAttr: function(val){\r\n\t\t\t// Normally _CssStateMixin takes care of this, but we aren't extending it\r\n\t\t\tvar rtl = val.toLowerCase() == \"rtl\";\r\n\t\t\tdomClass.toggle(this.domNode, \"dijitProgressBarRtl\", rtl);\r\n\t\t\tdomClass.toggle(this.domNode, \"dijitProgressBarIndeterminateRtl\", this.indeterminate && rtl);\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tupdate: function(/*Object?*/attributes){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tInternal method to change attributes of ProgressBar, similar to set(hash).  Users should call\r\n\t\t\t//\t\tset(\"value\", ...) rather than calling this method directly.\r\n\t\t\t// attributes:\r\n\t\t\t//\t\tMay provide progress and/or maximum properties on this parameter;\r\n\t\t\t//\t\tsee attribute specs for details.\r\n\t\t\t// example:\r\n\t\t\t//\t|\tmyProgressBar.update({'indeterminate': true});\r\n\t\t\t//\t|\tmyProgressBar.update({'progress': 80});\r\n\t\t\t//\t|\tmyProgressBar.update({'indeterminate': true, label:\"Loading ...\" })\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\r\n\t\t\t// TODO: deprecate this method and use set() instead\r\n\r\n\t\t\tlang.mixin(this, attributes || {});\r\n\t\t\tvar tip = this.internalProgress, ap = this.domNode;\r\n\t\t\tvar percent = 1;\r\n\t\t\tif(this.indeterminate){\r\n\t\t\t\tap.removeAttribute(\"aria-valuenow\");\r\n\t\t\t}else{\r\n\t\t\t\tif(String(this.progress).indexOf(\"%\") != -1){\r\n\t\t\t\t\tpercent = Math.min(parseFloat(this.progress) / 100, 1);\r\n\t\t\t\t\tthis.progress = percent * this.maximum;\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis.progress = Math.min(this.progress, this.maximum);\r\n\t\t\t\t\tpercent = this.maximum ? this.progress / this.maximum : 0;\r\n\t\t\t\t}\r\n\t\t\t\tap.setAttribute(\"aria-valuenow\", this.progress);\r\n\t\t\t}\r\n\r\n\t\t\t// Even indeterminate ProgressBars should have these attributes\r\n\t\t\tap.setAttribute(\"aria-labelledby\", this.labelNode.id);\r\n\t\t\tap.setAttribute(\"aria-valuemin\", 0);\r\n\t\t\tap.setAttribute(\"aria-valuemax\", this.maximum);\r\n\r\n\t\t\tthis.labelNode.innerHTML = this.report(percent);\r\n\r\n\t\t\tdomClass.toggle(this.domNode, \"dijitProgressBarIndeterminate\", this.indeterminate);\r\n\t\t\tdomClass.toggle(this.domNode, \"dijitProgressBarIndeterminateRtl\", this.indeterminate && !this.isLeftToRight());\r\n\r\n\t\t\ttip.style.width = (percent * 100) + \"%\";\r\n\t\t\tthis.onChange();\r\n\t\t},\r\n\r\n\t\t_setValueAttr: function(v){\r\n\t\t\tthis._set(\"value\", v);\r\n\t\t\tif(v == Infinity){\r\n\t\t\t\tthis.update({indeterminate: true});\r\n\t\t\t}else{\r\n\t\t\t\tthis.update({indeterminate: false, progress: v});\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_setLabelAttr: function(label){\r\n\t\t\tthis._set(\"label\", label);\r\n\t\t\tthis.update();\r\n\t\t},\r\n\r\n\t\t_setIndeterminateAttr: function(indeterminate){\r\n\t\t\t// Deprecated, use set(\"value\", ...) instead\r\n\t\t\tthis._set(\"indeterminate\", indeterminate);\r\n\t\t\tthis.update();\r\n\t\t},\r\n\r\n\t\treport: function(/*float*/percent){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGenerates HTML message to show inside progress bar (normally indicating amount of task completed).\r\n\t\t\t//\t\tMay be overridden.\r\n\t\t\t// tags:\r\n\t\t\t//\t\textension\r\n\r\n\t\t\treturn this.label ? this.label :\r\n\t\t\t\t(this.indeterminate ? \"&#160;\" : number.format(percent, { type: \"percent\", places: this.places, locale: this.lang }));\r\n\t\t},\r\n\r\n\t\tonChange: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCallback fired when progress updates.\r\n\t\t\t// tags:\r\n\t\t\t//\t\textension\r\n\t\t}\r\n\t});\r\n});\r\n"]}