{"version":3,"sources":["_Widget.js"],"names":["define","aspect","config","connect","declare","has","kernel","lang","query","ready","registry","_WidgetBase","_OnDijitClickMixin","_FocusMixin","connectToDomNode","aroundAdvice","originalConnect","obj","event","scope","method","on","substring","toLowerCase","hitch","apply","arguments","around","_Widget","onClick","onDblClick","onKeyDown","onKeyPress","onKeyUp","onMouseDown","onMouseMove","onMouseOut","onMouseOver","onMouseLeave","onMouseEnter","onMouseUp","constructor","params","name","this","_toConnect","replace","postCreate","inherited","type","func","_onMap","domNode","_setFocusedAttr","val","_focused","_set","setAttribute","attr","value","deprecated","declaredClass","set","length","get","getDescendants","containerNode","map","byNode","_onShow","onShow","onHide","onClose","require"],"mappings":";;;;;;;AAAAA,QACC,cACA,oBACA,qBACA,qBACA,WACA,oBACA,kBACA,aACA,aACA,aACA,gBACA,uBACA,gBACA,aACA,WACE,SAASC,EAAQC,EAAQC,EAASC,EAASC,EAAKC,EAAQC,EAAMC,EAAOC,EACrEC,EAAUC,EAAaC,EAAoBC,GAO9C,SAASC,KAOT,SAASC,EAAaC,GACrB,OAAO,SAASC,EAAKC,EAAOC,EAAOC,GAClC,OAAGH,GAAuB,iBAATC,GAAqBD,EAAIC,IAAUJ,EAC5CG,EAAII,GAAGH,EAAMI,UAAU,GAAGC,cAAehB,EAAKiB,MAAML,EAAOC,IAE5DJ,EAAgBS,MAAMtB,EAASuB,YAGxCzB,EAAO0B,OAAOxB,EAAS,UAAWY,GAC/BT,EAAOH,SACTF,EAAO0B,OAAOrB,EAAQ,UAAWS,GAGlC,IAAIa,EAAUxB,EAAQ,iBAAkBO,EAAaC,EAAoBC,IA0BxEgB,QAASf,EAWTgB,WAAYhB,EAWZiB,UAAWjB,EAWXkB,WAAYlB,EAWZmB,QAASnB,EAWToB,YAAapB,EAWbqB,YAAarB,EAWbsB,WAAYtB,EAWZuB,YAAavB,EAWbwB,aAAcxB,EAWdyB,aAAczB,EAWd0B,UAAW1B,EAYX2B,YAAa,SAASC,GAgBrB,IAAI,IAAIC,KADRC,KAAKC,cACWH,EACZE,KAAKD,KAAU7B,IACjB8B,KAAKC,WAAWF,EAAKG,QAAQ,MAAO,IAAIvB,eAAiBmB,EAAOC,UACzDD,EAAOC,KAKjBI,WAAY,WAIX,IAAI,IAAIJ,KAHRC,KAAKI,UAAUtB,WAGCkB,KAAKC,WACpBD,KAAKvB,GAAGsB,EAAMC,KAAKC,WAAWF,WAExBC,KAAKC,YAGbxB,GAAI,SAA6B4B,EAAmBC,GACnD,OAAGN,KAAKA,KAAKO,OAAOF,MAAWnC,EAKvBX,EAAQA,QAAQyC,KAAKQ,QAASH,EAAK1B,cAAeqB,KAAMM,GAEzDN,KAAKI,UAAUtB,YAGvB2B,gBAAiB,SAASC,GAGzBV,KAAKW,SAAWD,EAChBV,KAAKY,KAAK,UAAWF,IAKtBG,aAAc,SAAoBC,EAAmBC,GAKpDrD,EAAOsD,WAAWhB,KAAKiB,cAAc,gEAAiE,GAAI,OAC1GjB,KAAKkB,IAAIJ,EAAMC,IAGhBD,KAAM,SAA0Bf,EAAiBgB,GAchD,OADWjC,UAAUqC,QACV,GAAqB,iBAATpB,EACfC,KAAKkB,IAAIrC,MAAMmB,KAAMlB,WAErBkB,KAAKoB,IAAIrB,IAIlBsB,eAAgB,WAOf,OADA3D,EAAOsD,WAAWhB,KAAKiB,cAAc,+DAAgE,GAAI,OAClGjB,KAAKsB,cAAgB1D,EAAM,aAAcoC,KAAKsB,eAAeC,IAAIzD,EAAS0D,YAKlFC,QAAS,WAIRzB,KAAK0B,UAGNA,OAAQ,aAWRC,OAAQ,aAWRC,QAAS,WAWR,OAAO,KAWT,OANGnE,EAAI,0BACNI,EAAM,EAAG,WAERgE,SADgB,kBAIX7C","file":"../_Widget.js","sourcesContent":["define([\r\n\t\"dojo/aspect\",\t// aspect.around\r\n\t\"dojo/_base/config\",\t// config.isDebug\r\n\t\"dojo/_base/connect\",\t// connect.connect\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/has\",\r\n\t\"dojo/_base/kernel\", // kernel.deprecated\r\n\t\"dojo/_base/lang\", // lang.hitch\r\n\t\"dojo/query\",\r\n\t\"dojo/ready\",\r\n\t\"./registry\",\t// registry.byNode\r\n\t\"./_WidgetBase\",\r\n\t\"./_OnDijitClickMixin\",\r\n\t\"./_FocusMixin\",\r\n\t\"dojo/uacss\",\t\t// browser sniffing (included for back-compat; subclasses may be using)\r\n\t\"./hccss\"\t\t// high contrast mode sniffing (included to set CSS classes on <body>, module ret value unused)\r\n], function(aspect, config, connect, declare, has, kernel, lang, query, ready,\r\n\t\t\tregistry, _WidgetBase, _OnDijitClickMixin, _FocusMixin){\r\n\r\n\r\n// module:\r\n//\t\tdijit/_Widget\r\n\r\n\r\nfunction connectToDomNode(){\r\n\t// summary:\r\n\t//\t\tIf user connects to a widget method === this function, then they will\r\n\t//\t\tinstead actually be connecting the equivalent event on this.domNode\r\n}\r\n\r\n// Trap dojo.connect() calls to connectToDomNode methods, and redirect to _Widget.on()\r\nfunction aroundAdvice(originalConnect){\r\n\treturn function(obj, event, scope, method){\r\n\t\tif(obj && typeof event == \"string\" && obj[event] == connectToDomNode){\r\n\t\t\treturn obj.on(event.substring(2).toLowerCase(), lang.hitch(scope, method));\r\n\t\t}\r\n\t\treturn originalConnect.apply(connect, arguments);\r\n\t};\r\n}\r\naspect.around(connect, \"connect\", aroundAdvice);\r\nif(kernel.connect){\r\n\taspect.around(kernel, \"connect\", aroundAdvice);\r\n}\r\n\r\nvar _Widget = declare(\"dijit._Widget\", [_WidgetBase, _OnDijitClickMixin, _FocusMixin], {\r\n\t// summary:\r\n\t//\t\tOld base class for widgets.   New widgets should extend `dijit/_WidgetBase` instead\r\n\t// description:\r\n\t//\t\tOld Base class for Dijit widgets.\r\n\t//\r\n\t//\t\tExtends _WidgetBase, adding support for:\r\n\t//\r\n\t//\t\t- declaratively/programatically specifying widget initialization parameters like\r\n\t//\t\t\tonMouseMove=\"foo\" that call foo when this.domNode gets a mousemove event\r\n\t//\t\t- ondijitclick:\r\n\t//\t\t\tSupport new data-dojo-attach-event=\"ondijitclick: ...\" that is triggered by a mouse click or a SPACE/ENTER keypress\r\n\t//\t\t- focus related functions:\r\n\t//\t\t\tIn particular, the onFocus()/onBlur() callbacks.   Driven internally by\r\n\t//\t\t\tdijit/_base/focus.js.\r\n\t//\t\t- deprecated methods\r\n\t//\t\t- onShow(), onHide(), onClose()\r\n\t//\r\n\t//\t\tAlso, by loading code in dijit/_base, turns on:\r\n\t//\r\n\t//\t\t- browser sniffing (putting browser class like `dj_ie` on `<html>` node)\r\n\t//\t\t- high contrast mode sniffing (add `dijit_a11y` class to `<body>` if machine is in high contrast mode)\r\n\r\n\r\n\t////////////////// DEFERRED CONNECTS ///////////////////\r\n\r\n\tonClick: connectToDomNode,\r\n\t/*=====\r\n\tonClick: function(event){\r\n\t\t// summary:\r\n\t\t//\t\tConnect to this function to receive notifications of mouse click events.\r\n\t\t// event:\r\n\t\t//\t\tmouse Event\r\n\t\t// tags:\r\n\t\t//\t\tcallback\r\n\t},\r\n\t=====*/\r\n\tonDblClick: connectToDomNode,\r\n\t/*=====\r\n\tonDblClick: function(event){\r\n\t\t// summary:\r\n\t\t//\t\tConnect to this function to receive notifications of mouse double click events.\r\n\t\t// event:\r\n\t\t//\t\tmouse Event\r\n\t\t// tags:\r\n\t\t//\t\tcallback\r\n\t},\r\n\t=====*/\r\n\tonKeyDown: connectToDomNode,\r\n\t/*=====\r\n\tonKeyDown: function(event){\r\n\t\t// summary:\r\n\t\t//\t\tConnect to this function to receive notifications of keys being pressed down.\r\n\t\t// event:\r\n\t\t//\t\tkey Event\r\n\t\t// tags:\r\n\t\t//\t\tcallback\r\n\t},\r\n\t=====*/\r\n\tonKeyPress: connectToDomNode,\r\n\t/*=====\r\n\tonKeyPress: function(event){\r\n\t\t// summary:\r\n\t\t//\t\tConnect to this function to receive notifications of printable keys being typed.\r\n\t\t// event:\r\n\t\t//\t\tkey Event\r\n\t\t// tags:\r\n\t\t//\t\tcallback\r\n\t},\r\n\t=====*/\r\n\tonKeyUp: connectToDomNode,\r\n\t/*=====\r\n\tonKeyUp: function(event){\r\n\t\t// summary:\r\n\t\t//\t\tConnect to this function to receive notifications of keys being released.\r\n\t\t// event:\r\n\t\t//\t\tkey Event\r\n\t\t// tags:\r\n\t\t//\t\tcallback\r\n\t},\r\n\t=====*/\r\n\tonMouseDown: connectToDomNode,\r\n\t/*=====\r\n\tonMouseDown: function(event){\r\n\t\t// summary:\r\n\t\t//\t\tConnect to this function to receive notifications of when the mouse button is pressed down.\r\n\t\t// event:\r\n\t\t//\t\tmouse Event\r\n\t\t// tags:\r\n\t\t//\t\tcallback\r\n\t},\r\n\t=====*/\r\n\tonMouseMove: connectToDomNode,\r\n\t/*=====\r\n\tonMouseMove: function(event){\r\n\t\t// summary:\r\n\t\t//\t\tConnect to this function to receive notifications of when the mouse moves over nodes contained within this widget.\r\n\t\t// event:\r\n\t\t//\t\tmouse Event\r\n\t\t// tags:\r\n\t\t//\t\tcallback\r\n\t},\r\n\t=====*/\r\n\tonMouseOut: connectToDomNode,\r\n\t/*=====\r\n\tonMouseOut: function(event){\r\n\t\t// summary:\r\n\t\t//\t\tConnect to this function to receive notifications of when the mouse moves off of nodes contained within this widget.\r\n\t\t// event:\r\n\t\t//\t\tmouse Event\r\n\t\t// tags:\r\n\t\t//\t\tcallback\r\n\t},\r\n\t=====*/\r\n\tonMouseOver: connectToDomNode,\r\n\t/*=====\r\n\tonMouseOver: function(event){\r\n\t\t// summary:\r\n\t\t//\t\tConnect to this function to receive notifications of when the mouse moves onto nodes contained within this widget.\r\n\t\t// event:\r\n\t\t//\t\tmouse Event\r\n\t\t// tags:\r\n\t\t//\t\tcallback\r\n\t},\r\n\t=====*/\r\n\tonMouseLeave: connectToDomNode,\r\n\t/*=====\r\n\tonMouseLeave: function(event){\r\n\t\t// summary:\r\n\t\t//\t\tConnect to this function to receive notifications of when the mouse moves off of this widget.\r\n\t\t// event:\r\n\t\t//\t\tmouse Event\r\n\t\t// tags:\r\n\t\t//\t\tcallback\r\n\t},\r\n\t=====*/\r\n\tonMouseEnter: connectToDomNode,\r\n\t/*=====\r\n\tonMouseEnter: function(event){\r\n\t\t// summary:\r\n\t\t//\t\tConnect to this function to receive notifications of when the mouse moves onto this widget.\r\n\t\t// event:\r\n\t\t//\t\tmouse Event\r\n\t\t// tags:\r\n\t\t//\t\tcallback\r\n\t},\r\n\t=====*/\r\n\tonMouseUp: connectToDomNode,\r\n\t/*=====\r\n\tonMouseUp: function(event){\r\n\t\t// summary:\r\n\t\t//\t\tConnect to this function to receive notifications of when the mouse button is released.\r\n\t\t// event:\r\n\t\t//\t\tmouse Event\r\n\t\t// tags:\r\n\t\t//\t\tcallback\r\n\t},\r\n\t=====*/\r\n\r\n\tconstructor: function(params /*===== ,srcNodeRef =====*/){\r\n\t\t// summary:\r\n\t\t//\t\tCreate the widget.\r\n\t\t// params: Object|null\r\n\t\t//\t\tHash of initialization parameters for widget, including scalar values (like title, duration etc.)\r\n\t\t//\t\tand functions, typically callbacks like onClick.\r\n\t\t//\t\tThe hash can contain any of the widget's properties, excluding read-only properties.\r\n\t\t// srcNodeRef: DOMNode|String?\r\n\t\t//\t\tIf a srcNodeRef (DOM node) is specified:\r\n\t\t//\r\n\t\t//\t\t- use srcNodeRef.innerHTML as my contents\r\n\t\t//\t\t- if this is a behavioral widget then apply behavior to that srcNodeRef\r\n\t\t//\t\t- otherwise, replace srcNodeRef with my generated DOM tree\r\n\r\n\t\t// extract parameters like onMouseMove that should connect directly to this.domNode\r\n\t\tthis._toConnect = {};\r\n\t\tfor(var name in params){\r\n\t\t\tif(this[name] === connectToDomNode){\r\n\t\t\t\tthis._toConnect[name.replace(/^on/, \"\").toLowerCase()] = params[name];\r\n\t\t\t\tdelete params[name];\r\n\t\t\t}\r\n\t\t}\r\n\t},\r\n\r\n\tpostCreate: function(){\r\n\t\tthis.inherited(arguments);\r\n\r\n\t\t// perform connection from this.domNode to user specified handlers (ex: onMouseMove)\r\n\t\tfor(var name in this._toConnect){\r\n\t\t\tthis.on(name, this._toConnect[name]);\r\n\t\t}\r\n\t\tdelete this._toConnect;\r\n\t},\r\n\r\n\ton: function(/*String|Function*/ type, /*Function*/ func){\r\n\t\tif(this[this._onMap(type)] === connectToDomNode){\r\n\t\t\t// Use connect.connect() rather than on() to get handling for \"onmouseenter\" on non-IE,\r\n\t\t\t// normalization of onkeypress/onkeydown to behave like firefox, etc.\r\n\t\t\t// Also, need to specify context as \"this\" rather than the default context of the DOMNode\r\n\t\t\t// Remove in 2.0.\r\n\t\t\treturn connect.connect(this.domNode, type.toLowerCase(), this, func);\r\n\t\t}\r\n\t\treturn this.inherited(arguments);\r\n\t},\r\n\r\n\t_setFocusedAttr: function(val){\r\n\t\t// Remove this method in 2.0 (or sooner), just here to set _focused == focused, for back compat\r\n\t\t// (but since it's a private variable we aren't required to keep supporting it).\r\n\t\tthis._focused = val;\r\n\t\tthis._set(\"focused\", val);\r\n\t},\r\n\r\n\t////////////////// DEPRECATED METHODS ///////////////////\r\n\r\n\tsetAttribute: function(/*String*/ attr, /*anything*/ value){\r\n\t\t// summary:\r\n\t\t//\t\tDeprecated.  Use set() instead.\r\n\t\t// tags:\r\n\t\t//\t\tdeprecated\r\n\t\tkernel.deprecated(this.declaredClass+\"::setAttribute(attr, value) is deprecated. Use set() instead.\", \"\", \"2.0\");\r\n\t\tthis.set(attr, value);\r\n\t},\r\n\r\n\tattr: function(/*String|Object*/name, /*Object?*/value){\r\n\t\t// summary:\r\n\t\t//\t\tThis method is deprecated, use get() or set() directly.\r\n\t\t// name:\r\n\t\t//\t\tThe property to get or set. If an object is passed here and not\r\n\t\t//\t\ta string, its keys are used as names of attributes to be set\r\n\t\t//\t\tand the value of the object as values to set in the widget.\r\n\t\t// value:\r\n\t\t//\t\tOptional. If provided, attr() operates as a setter. If omitted,\r\n\t\t//\t\tthe current value of the named property is returned.\r\n\t\t// tags:\r\n\t\t//\t\tdeprecated\r\n\r\n\t\tvar args = arguments.length;\r\n\t\tif(args >= 2 || typeof name === \"object\"){ // setter\r\n\t\t\treturn this.set.apply(this, arguments);\r\n\t\t}else{ // getter\r\n\t\t\treturn this.get(name);\r\n\t\t}\r\n\t},\r\n\r\n\tgetDescendants: function(){\r\n\t\t// summary:\r\n\t\t//\t\tReturns all the widgets contained by this, i.e., all widgets underneath this.containerNode.\r\n\t\t//\t\tThis method should generally be avoided as it returns widgets declared in templates, which are\r\n\t\t//\t\tsupposed to be internal/hidden, but it's left here for back-compat reasons.\r\n\r\n\t\tkernel.deprecated(this.declaredClass+\"::getDescendants() is deprecated. Use getChildren() instead.\", \"\", \"2.0\");\r\n\t\treturn this.containerNode ? query('[widgetId]', this.containerNode).map(registry.byNode) : []; // dijit/_WidgetBase[]\r\n\t},\r\n\r\n\t////////////////// MISCELLANEOUS METHODS ///////////////////\r\n\r\n\t_onShow: function(){\r\n\t\t// summary:\r\n\t\t//\t\tInternal method called when this widget is made visible.\r\n\t\t//\t\tSee `onShow` for details.\r\n\t\tthis.onShow();\r\n\t},\r\n\r\n\tonShow: function(){\r\n\t\t// summary:\r\n\t\t//\t\tCalled when this widget becomes the selected pane in a\r\n\t\t//\t\t`dijit/layout/TabContainer`, `dijit/layout/StackContainer`,\r\n\t\t//\t\t`dijit/layout/AccordionContainer`, etc.\r\n\t\t//\r\n\t\t//\t\tAlso called to indicate display of a `dijit.Dialog`, `dijit.TooltipDialog`, or `dijit.TitlePane`.\r\n\t\t// tags:\r\n\t\t//\t\tcallback\r\n\t},\r\n\r\n\tonHide: function(){\r\n\t\t// summary:\r\n\t\t//\t\tCalled when another widget becomes the selected pane in a\r\n\t\t//\t\t`dijit/layout/TabContainer`, `dijit/layout/StackContainer`,\r\n\t\t//\t\t`dijit/layout/AccordionContainer`, etc.\r\n\t\t//\r\n\t\t//\t\tAlso called to indicate hide of a `dijit.Dialog`, `dijit.TooltipDialog`, or `dijit.TitlePane`.\r\n\t\t// tags:\r\n\t\t//\t\tcallback\r\n\t},\r\n\r\n\tonClose: function(){\r\n\t\t// summary:\r\n\t\t//\t\tCalled when this widget is being displayed as a popup (ex: a Calendar popped\r\n\t\t//\t\tup from a DateTextBox), and it is hidden.\r\n\t\t//\t\tThis is called from the dijit.popup code, and should not be called directly.\r\n\t\t//\r\n\t\t//\t\tAlso used as a parameter for children of `dijit/layout/StackContainer` or subclasses.\r\n\t\t//\t\tCallback if a user tries to close the child.   Child will be closed if this function returns true.\r\n\t\t// tags:\r\n\t\t//\t\textension\r\n\r\n\t\treturn true;\t\t// Boolean\r\n\t}\r\n});\r\n\r\n// For back-compat, remove in 2.0.\r\nif(has(\"dijit-legacy-requires\")){\r\n\tready(0, function(){\r\n\t\tvar requires = [\"dijit/_base\"];\r\n\t\trequire(requires);\t// use indirection so modules not rolled into a build\r\n\t});\r\n}\r\nreturn _Widget;\r\n});\r\n"]}