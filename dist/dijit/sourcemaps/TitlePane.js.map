{"version":3,"sources":["TitlePane.js"],"names":["define","array","declare","dom","domAttr","domClass","domGeometry","fxUtils","has","kernel","keys","_CssStateMixin","_TemplatedMixin","ContentPane","template","manager","TitlePane","title","_setTitleAttr","node","type","open","toggleable","tabIndex","duration","defaultDuration","baseClass","templateString","doLayout","_setTooltipAttr","attribute","buildRendering","this","inherited","arguments","setSelectable","titleNode","postCreate","_trackMouseState","titleBarNode","hideNode","wipeNode","_wipeIn","wipeIn","beforeBegin","style","display","_wipeOut","wipeOut","onEnd","_setOpenAttr","animate","forEach","animation","status","stop","play","_started","_onShow","onHide","containerNode","setAttribute","focusNode","_set","_setCss","_setToggleableAttr","canToggle","id","remove","_setContentAttr","content","setMarginBox","h","getMarginBox","toggle","oldCls","_titleBarClass","replace","arrowNodeInner","innerHTML","_onTitleKey","e","keyCode","DOWN_ARROW","focus","preventDefault","_onTitleClick","setTitle","deprecated","set","extend","applyTextDir","tooltip","textDir","enforceTextDirWithUcc","_setTextDirAttr","_created"],"mappings":"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","file":"../TitlePane.js","sourcesContent":["define([\r\n\t\"dojo/_base/array\", // array.forEach\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom\", // dom.setSelectable\r\n\t\"dojo/dom-attr\", // domAttr.set or get domAttr.remove\r\n\t\"dojo/dom-class\", // domClass.replace\r\n\t\"dojo/dom-geometry\", // domGeometry.setMarginBox domGeometry.getMarginBox\r\n\t\"dojo/fx\", // fxUtils.wipeIn fxUtils.wipeOut\r\n\t\"dojo/has\",\r\n\t\"dojo/_base/kernel\", // kernel.deprecated\r\n\t\"dojo/keys\", // keys.DOWN_ARROW keys.ENTER\r\n\t\"./_CssStateMixin\",\r\n\t\"./_TemplatedMixin\",\r\n\t\"./layout/ContentPane\",\r\n\t\"dojo/text!./templates/TitlePane.html\",\r\n\t\"./_base/manager\",    // defaultDuration\r\n\t\"./a11yclick\"\t// template uses ondijitclick\r\n], function(array, declare, dom, domAttr, domClass, domGeometry, fxUtils, has, kernel, keys,\r\n\t\t\t_CssStateMixin, _TemplatedMixin, ContentPane, template, manager){\r\n\r\n\t// module:\r\n\t//\t\tdijit/TitlePane\r\n\r\n\tvar TitlePane = declare(\"dijit.TitlePane\", [ContentPane, _TemplatedMixin, _CssStateMixin], {\r\n\t\t// summary:\r\n\t\t//\t\tA pane with a title on top, that can be expanded or collapsed.\r\n\t\t//\r\n\t\t// description:\r\n\t\t//\t\tAn accessible container with a title Heading, and a content\r\n\t\t//\t\tsection that slides open and closed. TitlePane is an extension to\r\n\t\t//\t\t`dijit/layout/ContentPane`, providing all the useful content-control aspects from it.\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t|\t// load a TitlePane from remote file:\r\n\t\t//\t|\tvar foo = new dijit.TitlePane({ href: \"foobar.html\", title:\"Title\" });\r\n\t\t//\t|\tfoo.startup();\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t|\t<!-- markup href example: -->\r\n\t\t//\t|\t<div data-dojo-type=\"dijit/TitlePane\" data-dojo-props=\"href: 'foobar.html', title: 'Title'\"></div>\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t|\t<!-- markup with inline data -->\r\n\t\t//\t|\t<div data-dojo-type=\"dijit/TitlePane\" title=\"Title\">\r\n\t\t//\t|\t\t<p>I am content</p>\r\n\t\t//\t|\t</div>\r\n\r\n\t\t// title: String\r\n\t\t//\t\tTitle of the pane\r\n\t\ttitle: \"\",\r\n\t\t_setTitleAttr: { node: \"titleNode\", type: \"innerHTML\" }, // override default where title becomes a hover tooltip\r\n\r\n\t\t// open: Boolean\r\n\t\t//\t\tWhether pane is opened or closed.\r\n\t\topen: true,\r\n\r\n\t\t// toggleable: Boolean\r\n\t\t//\t\tWhether pane can be opened or closed by clicking the title bar.\r\n\t\ttoggleable: true,\r\n\r\n\t\t// tabIndex: String\r\n\t\t//\t\tTabindex setting for the title (so users can tab to the title then\r\n\t\t//\t\tuse space/enter to open/close the title pane)\r\n\t\ttabIndex: \"0\",\r\n\r\n\t\t// duration: Integer\r\n\t\t//\t\tTime in milliseconds to fade in/fade out\r\n\t\tduration: manager.defaultDuration,\r\n\r\n\t\t// baseClass: [protected] String\r\n\t\t//\t\tThe root className to be placed on this widget's domNode.\r\n\t\tbaseClass: \"dijitTitlePane\",\r\n\r\n\t\ttemplateString: template,\r\n\r\n\t\t// doLayout: [protected] Boolean\r\n\t\t//\t\tDon't change this parameter from the default value.\r\n\t\t//\t\tThis ContentPane parameter doesn't make sense for TitlePane, since TitlePane\r\n\t\t//\t\tis never a child of a layout container, nor should TitlePane try to control\r\n\t\t//\t\tthe size of an inner widget.\r\n\t\tdoLayout: false,\r\n\r\n\t\t// Tooltip is defined in _WidgetBase but we need to handle the mapping to DOM here\r\n\t\t_setTooltipAttr: {node: \"focusNode\", type: \"attribute\", attribute: \"title\"}, // focusNode spans the entire width, titleNode doesn't\r\n\r\n\t\tbuildRendering: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tdom.setSelectable(this.titleNode, false);\r\n\t\t},\r\n\r\n\t\tpostCreate: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\t// Hover and focus effect on title bar, except for non-toggleable TitlePanes\r\n\t\t\t// This should really be controlled from _setToggleableAttr() but _CssStateMixin\r\n\t\t\t// doesn't provide a way to disconnect a previous _trackMouseState() call\r\n\t\t\tif(this.toggleable){\r\n\t\t\t\tthis._trackMouseState(this.titleBarNode, this.baseClass + \"Title\");\r\n\t\t\t}\r\n\r\n\t\t\t// setup open/close animations\r\n\t\t\tvar hideNode = this.hideNode, wipeNode = this.wipeNode;\r\n\t\t\tthis._wipeIn = fxUtils.wipeIn({\r\n\t\t\t\tnode: wipeNode,\r\n\t\t\t\tduration: this.duration,\r\n\t\t\t\tbeforeBegin: function(){\r\n\t\t\t\t\thideNode.style.display = \"\";\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t\tthis._wipeOut = fxUtils.wipeOut({\r\n\t\t\t\tnode: wipeNode,\r\n\t\t\t\tduration: this.duration,\r\n\t\t\t\tonEnd: function(){\r\n\t\t\t\t\thideNode.style.display = \"none\";\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t},\r\n\r\n\t\t_setOpenAttr: function(/*Boolean*/ open, /*Boolean*/ animate){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHook to make set(\"open\", boolean) control the open/closed state of the pane.\r\n\t\t\t// open: Boolean\r\n\t\t\t//\t\tTrue if you want to open the pane, false if you want to close it.\r\n\r\n\t\t\tarray.forEach([this._wipeIn, this._wipeOut], function(animation){\r\n\t\t\t\tif(animation && animation.status() == \"playing\"){\r\n\t\t\t\t\tanimation.stop();\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\tif(animate){\r\n\t\t\t\tvar anim = this[open ? \"_wipeIn\" : \"_wipeOut\"];\r\n\t\t\t\tanim.play();\r\n\t\t\t}else{\r\n\t\t\t\tthis.hideNode.style.display = this.wipeNode.style.display = open ? \"\" : \"none\";\r\n\t\t\t}\r\n\r\n\t\t\t// load content (if this is the first time we are opening the TitlePane\r\n\t\t\t// and content is specified as an href, or href was set when hidden)\r\n\t\t\tif(this._started){\r\n\t\t\t\tif(open){\r\n\t\t\t\t\tthis._onShow();\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis.onHide();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tthis.containerNode.setAttribute(\"aria-hidden\", open ? \"false\" : \"true\");\r\n\t\t\tthis.focusNode.setAttribute(\"aria-pressed\", open ? \"true\" : \"false\");\r\n\r\n\t\t\tthis._set(\"open\", open);\r\n\r\n\t\t\tthis._setCss();\r\n\t\t},\r\n\r\n\t\t_setToggleableAttr: function(/*Boolean*/ canToggle){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHook to make set(\"toggleable\", boolean) work.\r\n\t\t\t// canToggle: Boolean\r\n\t\t\t//\t\tTrue to allow user to open/close pane by clicking title bar.\r\n\r\n\t\t\tthis.focusNode.setAttribute(\"role\", canToggle ? \"button\" : \"heading\");\r\n\t\t\tif(canToggle){\r\n\t\t\t\tthis.focusNode.setAttribute(\"aria-controls\", this.id + \"_pane\");\r\n\t\t\t\tthis.focusNode.setAttribute(\"tabIndex\", this.tabIndex);\r\n\t\t\t\tthis.focusNode.setAttribute(\"aria-pressed\", this.open);\r\n\t\t\t}else{\r\n\t\t\t\tdomAttr.remove(this.focusNode, \"aria-controls\");\r\n\t\t\t\tdomAttr.remove(this.focusNode, \"tabIndex\");\r\n\t\t\t\tdomAttr.remove(this.focusNode, \"aria-pressed\");\r\n\t\t\t}\r\n\r\n\t\t\tthis._set(\"toggleable\", canToggle);\r\n\r\n\t\t\tthis._setCss();\r\n\t\t},\r\n\r\n\t\t_setContentAttr: function(/*String|DomNode|Nodelist*/ content){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHook to make set(\"content\", ...) work.\r\n\t\t\t//\t\tTypically called when an href is loaded.  Our job is to make the animation smooth.\r\n\r\n\t\t\tif(!this.open || !this._wipeOut || this._wipeOut.status() == \"playing\"){\r\n\t\t\t\t// we are currently *closing* the pane (or the pane is closed), so just let that continue\r\n\t\t\t\tthis.inherited(arguments);\r\n\t\t\t}else{\r\n\t\t\t\tif(this._wipeIn && this._wipeIn.status() == \"playing\"){\r\n\t\t\t\t\tthis._wipeIn.stop();\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// freeze container at current height so that adding new content doesn't make it jump\r\n\t\t\t\tdomGeometry.setMarginBox(this.wipeNode, { h: domGeometry.getMarginBox(this.wipeNode).h });\r\n\r\n\t\t\t\t// add the new content (erasing the old content, if any)\r\n\t\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\t\t// call _wipeIn.play() to animate from current height to new height\r\n\t\t\t\tif(this._wipeIn){\r\n\t\t\t\t\tthis._wipeIn.play();\r\n\t\t\t\t}else{\r\n\t\t\t\t\tthis.hideNode.style.display = \"\";\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\ttoggle: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSwitches between opened and closed state\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\r\n\t\t\tthis._setOpenAttr(!this.open, true);\r\n\t\t},\r\n\r\n\t\t_setCss: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSet the open/close css state for the TitlePane\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\r\n\t\t\tvar node = this.titleBarNode || this.focusNode;\r\n\t\t\tvar oldCls = this._titleBarClass;\r\n\t\t\tthis._titleBarClass = this.baseClass + \"Title\" + (this.toggleable ? \"\" : \"Fixed\") + (this.open ? \"Open\" : \"Closed\");\r\n\t\t\tdomClass.replace(node, this._titleBarClass, oldCls || \"\");\r\n\r\n\t\t\t// Back compat, remove for 2.0\r\n\t\t\tdomClass.replace(node, this._titleBarClass.replace(\"TitlePaneTitle\", \"\"), (oldCls || \"\").replace(\"TitlePaneTitle\", \"\"));\r\n\r\n\t\t\tthis.arrowNodeInner.innerHTML = this.open ? \"-\" : \"+\";\r\n\t\t},\r\n\r\n\t\t_onTitleKey: function(/*Event*/ e){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHandler for when user hits a key\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\r\n\t\t\tif(e.keyCode == keys.DOWN_ARROW && this.open){\r\n\t\t\t\tthis.containerNode.focus();\r\n\t\t\t\te.preventDefault();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_onTitleClick: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHandler when user clicks the title bar\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tif(this.toggleable){\r\n\t\t\t\tthis.toggle();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tsetTitle: function(/*String*/ title){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDeprecated.  Use set('title', ...) instead.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tdeprecated\r\n\t\t\tkernel.deprecated(\"dijit.TitlePane.setTitle() is deprecated.  Use set('title', ...) instead.\", \"\", \"2.0\");\r\n\t\t\tthis.set(\"title\", title);\r\n\t\t}\r\n\t});\r\n\r\n\tif(has(\"dojo-bidi\")){\r\n\t\tTitlePane.extend({\r\n\t\t\t_setTitleAttr: function(/*String*/ title){\r\n\t\t\t\t// Override default where title becomes a hover tooltip\r\n\t\t\t\tthis._set(\"title\", title);\r\n\t\t\t\tthis.titleNode.innerHTML = title;\r\n\t\t\t\tthis.applyTextDir(this.titleNode);\r\n\t\t\t},\r\n\r\n\t\t\t_setTooltipAttr: function(/*String*/ tooltip){\r\n\t\t\t\tthis._set(\"tooltip\", tooltip);\r\n\t\t\t\tif(this.textDir){\r\n\t\t\t\t\ttooltip = this.enforceTextDirWithUcc(null, tooltip);\r\n\t\t\t\t}\r\n\t\t\t\tdomAttr.set(this.focusNode, \"title\", tooltip);\t\t\t// focusNode spans the entire width, titleNode doesn't\r\n\t\t\t},\r\n\r\n\t\t\t_setTextDirAttr: function(textDir){\r\n\t\t\t\tif(this._created && this.textDir != textDir){\r\n\t\t\t\t\tthis._set(\"textDir\", textDir);\r\n\t\t\t\t\tthis.set(\"title\", this.title);\r\n\t\t\t\t\tthis.set(\"tooltip\", this.tooltip);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\treturn TitlePane;\r\n});\r\n"]}