{"version":3,"sources":["WidgetSet.js"],"names":["define","array","declare","kernel","registry","WidgetSet","constructor","this","_hash","length","add","widget","id","Error","remove","forEach","func","thisObj","global","i","call","filter","res","w","byId","byClass","cls","declaredClass","toArray","ar","push","map","every","x","some","prototype"],"mappings":";;;;;;;AAAAA,QACC,mBACA,qBACA,oBACA,cACE,SAASC,EAAOC,EAASC,EAAQC,GAKnC,IAAIC,EAAYH,EAAQ,kBAAmB,MAgB1CI,YAAa,WACZC,KAAKC,SACLD,KAAKE,OAAS,GAGfC,IAAK,SAA+BC,GAMnC,GAAGJ,KAAKC,MAAMG,EAAOC,IACpB,MAAM,IAAIC,MAAM,qCAAuCF,EAAOC,GAAK,sCAEpEL,KAAKC,MAAMG,EAAOC,IAAMD,EACxBJ,KAAKE,UAGNK,OAAQ,SAAoBF,GAIxBL,KAAKC,MAAMI,YACNL,KAAKC,MAAMI,GAClBL,KAAKE,WAIPM,QAAS,SAAsBC,EAAmBC,GAuBjDA,EAAUA,GAAWd,EAAOe,OAC5B,IAAWN,EAAPO,EAAI,EACR,IAAIP,KAAML,KAAKC,MACdQ,EAAKI,KAAKH,EAASV,KAAKC,MAAMI,GAAKO,IAAKZ,KAAKC,OAE9C,OAAOD,MAGRc,OAAQ,SAAsBA,EAAqBJ,GAwBlDA,EAAUA,GAAWd,EAAOe,OAC5B,IAAkCN,EAA9BU,EAAM,IAAIjB,EAAac,EAAI,EAC/B,IAAIP,KAAML,KAAKC,MAAM,CACpB,IAAIe,EAAIhB,KAAKC,MAAMI,GAChBS,EAAOD,KAAKH,EAASM,EAAGJ,IAAKZ,KAAKC,QACpCc,EAAIZ,IAAIa,GAGV,OAAOD,GAGRE,KAAM,SAAoBZ,GAazB,OAAOL,KAAKC,MAAMI,IAGnBa,QAAS,SAAoBC,GAc5B,IAA2Bd,EAAID,EAA3BW,EAAM,IAAIjB,EACd,IAAIO,KAAML,KAAKC,OACdG,EAASJ,KAAKC,MAAMI,IACVe,eAAiBD,GAC1BJ,EAAIZ,IAAIC,GAGT,OAAOW,GAGTM,QAAS,WAYR,IAAIC,KACJ,IAAI,IAAIjB,KAAML,KAAKC,MAClBqB,EAAGC,KAAKvB,KAAKC,MAAMI,IAEpB,OAAOiB,GAGRE,IAAK,SAAuBf,EAAmBC,GAW9C,OAAOhB,EAAM8B,IAAIxB,KAAKqB,UAAWZ,EAAMC,IAGxCe,MAAO,SAAShB,EAAMC,GAWrBA,EAAUA,GAAWd,EAAOe,OAC5B,IAAWC,EAAPc,EAAI,EACR,IAAId,KAAKZ,KAAKC,MACb,IAAIQ,EAAKI,KAAKH,EAASV,KAAKC,MAAMW,GAAIc,IAAK1B,KAAKC,OAC/C,OAAO,EAGT,OAAO,GAGR0B,KAAM,SAASlB,EAAMC,GAWpBA,EAAUA,GAAWd,EAAOe,OAC5B,IAAWC,EAAPc,EAAI,EACR,IAAId,KAAKZ,KAAKC,MACb,GAAGQ,EAAKI,KAAKH,EAASV,KAAKC,MAAMW,GAAIc,IAAK1B,KAAKC,OAC9C,OAAO,EAGT,OAAO,KAaT,OALAP,EAAMc,SAAS,UAAW,SAAU,UAAW,MAAO,QAAS,QAAS,SAASC,GAChFZ,EAASY,GAAQX,EAAU8B,UAAUnB,KAI/BX","file":"../WidgetSet.js","sourcesContent":["define([\r\n\t\"dojo/_base/array\", // array.forEach array.map\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/_base/kernel\", // kernel.global\r\n\t\"./registry\"\t// to add functions to dijit.registry\r\n], function(array, declare, kernel, registry){\r\n\r\n\t// module:\r\n\t//\t\tdijit/WidgetSet\r\n\r\n\tvar WidgetSet = declare(\"dijit.WidgetSet\", null, {\r\n\t\t// summary:\r\n\t\t//\t\tA set of widgets indexed by id.\r\n\t\t//\t\tDeprecated, will be removed in 2.0.\r\n\t\t//\r\n\t\t// example:\r\n\t\t//\t\tCreate a small list of widgets:\r\n\t\t//\t\t|\trequire([\"dijit/WidgetSet\", \"dijit/registry\"],\r\n\t\t//\t\t|\t\tfunction(WidgetSet, registry){\r\n\t\t//\t\t|\t\tvar ws = new WidgetSet();\r\n\t\t//\t\t|\t\tws.add(registry.byId(\"one\"));\r\n\t\t//\t\t|\t\tws.add(registry.byId(\"two\"));\r\n\t\t//\t\t|\t\t// destroy both:\r\n\t\t//\t\t|\t\tws.forEach(function(w){ w.destroy(); });\r\n\t\t//\t\t|\t});\r\n\r\n\t\tconstructor: function(){\r\n\t\t\tthis._hash = {};\r\n\t\t\tthis.length = 0;\r\n\t\t},\r\n\r\n\t\tadd: function(/*dijit/_WidgetBase*/ widget){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdd a widget to this list. If a duplicate ID is detected, a error is thrown.\r\n\t\t\t//\r\n\t\t\t// widget: dijit/_WidgetBase\r\n\t\t\t//\t\tAny dijit/_WidgetBase subclass.\r\n\t\t\tif(this._hash[widget.id]){\r\n\t\t\t\tthrow new Error(\"Tried to register widget with id==\" + widget.id + \" but that id is already registered\");\r\n\t\t\t}\r\n\t\t\tthis._hash[widget.id] = widget;\r\n\t\t\tthis.length++;\r\n\t\t},\r\n\r\n\t\tremove: function(/*String*/ id){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRemove a widget from this WidgetSet. Does not destroy the widget; simply\r\n\t\t\t//\t\tremoves the reference.\r\n\t\t\tif(this._hash[id]){\r\n\t\t\t\tdelete this._hash[id];\r\n\t\t\t\tthis.length--;\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tforEach: function(/*Function*/ func, /* Object? */thisObj){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCall specified function for each widget in this set.\r\n\t\t\t//\r\n\t\t\t// func:\r\n\t\t\t//\t\tA callback function to run for each item. Is passed the widget, the index\r\n\t\t\t//\t\tin the iteration, and the full hash, similar to `array.forEach`.\r\n\t\t\t//\r\n\t\t\t// thisObj:\r\n\t\t\t//\t\tAn optional scope parameter\r\n\t\t\t//\r\n\t\t\t// example:\r\n\t\t\t//\t\tUsing the default `dijit.registry` instance:\r\n\t\t\t//\t\t|\trequire([\"dijit/WidgetSet\", \"dijit/registry\"],\r\n\t\t\t//\t\t|\t\tfunction(WidgetSet, registry){\r\n\t\t\t//\t\t|\t\tregistry.forEach(function(widget){\r\n\t\t\t//\t\t|\t\t\tconsole.log(widget.declaredClass);\r\n\t\t\t//\t\t|\t\t});\r\n\t\t\t//\t\t|\t});\r\n\t\t\t//\r\n\t\t\t// returns:\r\n\t\t\t//\t\tReturns self, in order to allow for further chaining.\r\n\r\n\t\t\tthisObj = thisObj || kernel.global;\r\n\t\t\tvar i = 0, id;\r\n\t\t\tfor(id in this._hash){\r\n\t\t\t\tfunc.call(thisObj, this._hash[id], i++, this._hash);\r\n\t\t\t}\r\n\t\t\treturn this;\t// dijit/WidgetSet\r\n\t\t},\r\n\r\n\t\tfilter: function(/*Function*/ filter, /* Object? */thisObj){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFilter down this WidgetSet to a smaller new WidgetSet\r\n\t\t\t//\t\tWorks the same as `array.filter` and `NodeList.filter`\r\n\t\t\t//\r\n\t\t\t// filter:\r\n\t\t\t//\t\tCallback function to test truthiness. Is passed the widget\r\n\t\t\t//\t\treference and the pseudo-index in the object.\r\n\t\t\t//\r\n\t\t\t// thisObj: Object?\r\n\t\t\t//\t\tOption scope to use for the filter function.\r\n\t\t\t//\r\n\t\t\t// example:\r\n\t\t\t//\t\tArbitrary: select the odd widgets in this list\r\n\t\t\t//\t\t|\t\r\n\t\t\t//\t\t|\t\t\r\n\t\t\t//\t\t|\t\r\n\t\t\t//\t\t|\trequire([\"dijit/WidgetSet\", \"dijit/registry\"],\r\n\t\t\t//\t\t|\t\tfunction(WidgetSet, registry){\r\n\t\t\t//\t\t|\t\tregistry.filter(function(w, i){\r\n\t\t\t//\t\t|\t\t\treturn i % 2 == 0;\r\n\t\t\t//\t\t|\t\t}).forEach(function(w){ /* odd ones */ });\r\n\t\t\t//\t\t|\t});\r\n\r\n\t\t\tthisObj = thisObj || kernel.global;\r\n\t\t\tvar res = new WidgetSet(), i = 0, id;\r\n\t\t\tfor(id in this._hash){\r\n\t\t\t\tvar w = this._hash[id];\r\n\t\t\t\tif(filter.call(thisObj, w, i++, this._hash)){\r\n\t\t\t\t\tres.add(w);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn res; // dijit/WidgetSet\r\n\t\t},\r\n\r\n\t\tbyId: function(/*String*/ id){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFind a widget in this list by it's id.\r\n\t\t\t// example:\r\n\t\t\t//\t\tTest if an id is in a particular WidgetSet\r\n\t\t\t//\t\t|\trequire([\"dijit/WidgetSet\", \"dijit/registry\"],\r\n\t\t\t//\t\t|\t\tfunction(WidgetSet, registry){\r\n\t\t\t//\t\t|\t\tvar ws = new WidgetSet();\r\n\t\t\t//\t\t|\t\tws.add(registry.byId(\"bar\"));\r\n\t\t\t//\t\t|\t\tvar t = ws.byId(\"bar\") // returns a widget\r\n\t\t\t//\t\t|\t\tvar x = ws.byId(\"foo\"); // returns undefined\r\n\t\t\t//\t\t|\t});\r\n\r\n\t\t\treturn this._hash[id];\t// dijit/_WidgetBase\r\n\t\t},\r\n\r\n\t\tbyClass: function(/*String*/ cls){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReduce this widgetset to a new WidgetSet of a particular `declaredClass`\r\n\t\t\t//\r\n\t\t\t// cls: String\r\n\t\t\t//\t\tThe Class to scan for. Full dot-notated string.\r\n\t\t\t//\r\n\t\t\t// example:\r\n\t\t\t//\t\tFind all `dijit.TitlePane`s in a page:\r\n\t\t\t//\t\t|\trequire([\"dijit/WidgetSet\", \"dijit/registry\"],\r\n\t\t\t//\t\t|\t\tfunction(WidgetSet, registry){\r\n\t\t\t//\t\t|\t\tregistry.byClass(\"dijit.TitlePane\").forEach(function(tp){ tp.close(); });\r\n\t\t\t//\t\t|\t});\r\n\r\n\t\t\tvar res = new WidgetSet(), id, widget;\r\n\t\t\tfor(id in this._hash){\r\n\t\t\t\twidget = this._hash[id];\r\n\t\t\t\tif(widget.declaredClass == cls){\r\n\t\t\t\t\tres.add(widget);\r\n\t\t\t\t}\r\n\t\t\t }\r\n\t\t\t return res; // dijit/WidgetSet\r\n\t\t},\r\n\r\n\t\ttoArray: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConvert this WidgetSet into a true Array\r\n\t\t\t//\r\n\t\t\t// example:\r\n\t\t\t//\t\tWork with the widget .domNodes in a real Array\r\n\t\t\t//\t\t|\trequire([\"dijit/WidgetSet\", \"dijit/registry\"],\r\n\t\t\t//\t\t|\t\tfunction(WidgetSet, registry){\r\n\t\t\t//\t\t|\t\tarray.map(registry.toArray(), function(w){ return w.domNode; });\r\n\t\t\t//\t\t|\t});\r\n\r\n\r\n\t\t\tvar ar = [];\r\n\t\t\tfor(var id in this._hash){\r\n\t\t\t\tar.push(this._hash[id]);\r\n\t\t\t}\r\n\t\t\treturn ar;\t// dijit/_WidgetBase[]\r\n\t\t},\r\n\r\n\t\tmap: function(/* Function */func, /* Object? */thisObj){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate a new Array from this WidgetSet, following the same rules as `array.map`\r\n\t\t\t// example:\r\n\t\t\t//\t\t|\trequire([\"dijit/WidgetSet\", \"dijit/registry\"],\r\n\t\t\t//\t\t|\t\tfunction(WidgetSet, registry){\r\n\t\t\t//\t\t|\t\tvar nodes = registry.map(function(w){ return w.domNode; });\r\n\t\t\t//\t\t|\t});\r\n\t\t\t//\r\n\t\t\t// returns:\r\n\t\t\t//\t\tA new array of the returned values.\r\n\t\t\treturn array.map(this.toArray(), func, thisObj); // Array\r\n\t\t},\r\n\r\n\t\tevery: function(func, thisObj){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tA synthetic clone of `array.every` acting explicitly on this WidgetSet\r\n\t\t\t//\r\n\t\t\t// func: Function\r\n\t\t\t//\t\tA callback function run for every widget in this list. Exits loop\r\n\t\t\t//\t\twhen the first false return is encountered.\r\n\t\t\t//\r\n\t\t\t// thisObj: Object?\r\n\t\t\t//\t\tOptional scope parameter to use for the callback\r\n\r\n\t\t\tthisObj = thisObj || kernel.global;\r\n\t\t\tvar x = 0, i;\r\n\t\t\tfor(i in this._hash){\r\n\t\t\t\tif(!func.call(thisObj, this._hash[i], x++, this._hash)){\r\n\t\t\t\t\treturn false; // Boolean\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true; // Boolean\r\n\t\t},\r\n\r\n\t\tsome: function(func, thisObj){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tA synthetic clone of `array.some` acting explicitly on this WidgetSet\r\n\t\t\t//\r\n\t\t\t// func: Function\r\n\t\t\t//\t\tA callback function run for every widget in this list. Exits loop\r\n\t\t\t//\t\twhen the first true return is encountered.\r\n\t\t\t//\r\n\t\t\t// thisObj: Object?\r\n\t\t\t//\t\tOptional scope parameter to use for the callback\r\n\r\n\t\t\tthisObj = thisObj || kernel.global;\r\n\t\t\tvar x = 0, i;\r\n\t\t\tfor(i in this._hash){\r\n\t\t\t\tif(func.call(thisObj, this._hash[i], x++, this._hash)){\r\n\t\t\t\t\treturn true; // Boolean\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false; // Boolean\r\n\t\t}\r\n\r\n\t});\r\n\r\n\t// Add in 1.x compatibility methods to dijit/registry.\r\n\t// These functions won't show up in the API doc but since they are deprecated anyway,\r\n\t// that's probably for the best.\r\n\tarray.forEach([\"forEach\", \"filter\", \"byClass\", \"map\", \"every\", \"some\"], function(func){\r\n\t\tregistry[func] = WidgetSet.prototype[func];\r\n\t});\r\n\r\n\r\n\treturn WidgetSet;\r\n});\r\n"]}