{"version":3,"sources":["_PaletteMixin.js"],"names":["define","declare","domAttr","domClass","domConstruct","keys","lang","on","_CssStateMixin","a11yclick","focus","typematic","defaultTimeout","timeoutChangeRate","value","_selectedCell","tabIndex","cellClass","dyeClass","_dyeFactory","this","getObject","_preparePalette","choices","titles","_cells","url","_blankGif","own","gridNode","hitch","row","length","rowNode","create","role","col","cellObject","cellNode","class","title","fillCell","idx","push","node","dye","_xDim","_yDim","keyIncrementMap","UP_ARROW","DOWN_ARROW","RIGHT_ARROW","isLeftToRight","LEFT_ARROW","key","addKeyListener","domNode","keyCode","ctrlKey","altKey","shiftKey","increment","count","_navigateByKey","postCreate","inherited","arguments","_setCurrent","_currentFocus","_onCellClick","evt","target","tagName","parentNode","_getDye","getValue","_setValueAttr","stopPropagation","preventDefault","set","priorityChange","remove","i","add","_set","undefined","onChange","typeCount","newFocusIndex","focusNode","defer","cell"],"mappings":"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","file":"../_PaletteMixin.js","sourcesContent":["define([\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom-attr\", // domAttr.set\r\n\t\"dojo/dom-class\", // domClass.add domClass.remove\r\n\t\"dojo/dom-construct\", // domConstruct.create domConstruct.place\r\n\t\"dojo/keys\", // keys\r\n\t\"dojo/_base/lang\", // lang.getObject\r\n\t\"dojo/on\",\r\n\t\"./_CssStateMixin\",\r\n\t\"./a11yclick\",\r\n\t\"./focus\",\r\n\t\"./typematic\"\r\n], function(declare, domAttr, domClass, domConstruct, keys, lang, on, _CssStateMixin, a11yclick, focus, typematic){\r\n\r\n\t// module:\r\n\t//\t\tdijit/_PaletteMixin\r\n\r\n\tvar PaletteMixin = declare(\"dijit._PaletteMixin\", _CssStateMixin, {\r\n\t\t// summary:\r\n\t\t//\t\tA keyboard accessible palette, for picking a color/emoticon/etc.\r\n\t\t// description:\r\n\t\t//\t\tA mixin for a grid showing various entities, so the user can pick a certain entity.\r\n\r\n\t\t// defaultTimeout: Number\r\n\t\t//\t\tNumber of milliseconds before a held key or button becomes typematic\r\n\t\tdefaultTimeout: 500,\r\n\r\n\t\t// timeoutChangeRate: Number\r\n\t\t//\t\tFraction of time used to change the typematic timer between events\r\n\t\t//\t\t1.0 means that each typematic event fires at defaultTimeout intervals\r\n\t\t//\t\tLess than 1.0 means that each typematic event fires at an increasing faster rate\r\n\t\ttimeoutChangeRate: 0.90,\r\n\r\n\t\t// value: String\r\n\t\t//\t\tCurrently selected color/emoticon/etc.\r\n\t\tvalue: \"\",\r\n\r\n\t\t// _selectedCell: [private] Integer\r\n\t\t//\t\tIndex of the currently selected cell. Initially, none selected\r\n\t\t_selectedCell: -1,\r\n\r\n\t\t/*=====\r\n\t\t // _currentFocus: [private] DomNode\r\n\t\t //\t\tThe currently focused cell (if the palette itself has focus), or otherwise\r\n\t\t //\t\tthe cell to be focused when the palette itself gets focus.\r\n\t\t //\t\tDifferent from value, which represents the selected (i.e. clicked) cell.\r\n\t\t _currentFocus: null,\r\n\t\t =====*/\r\n\r\n\t\t/*=====\r\n\t\t // _xDim: [protected] Integer\r\n\t\t //\t\tThis is the number of cells horizontally across.\r\n\t\t _xDim: null,\r\n\t\t =====*/\r\n\r\n\t\t/*=====\r\n\t\t // _yDim: [protected] Integer\r\n\t\t //\t\tThis is the number of cells vertically down.\r\n\t\t _yDim: null,\r\n\t\t =====*/\r\n\r\n\t\t// tabIndex: String\r\n\t\t//\t\tWidget tab index.\r\n\t\ttabIndex: \"0\",\r\n\r\n\t\t// cellClass: [protected] String\r\n\t\t//\t\tCSS class applied to each cell in the palette\r\n\t\tcellClass: \"dijitPaletteCell\",\r\n\r\n\t\t// dyeClass: [protected] Constructor\r\n\t\t//\t\tConstructor for Object created for each cell of the palette.\r\n\t\t//\t\tdyeClass should implement the dijit/_PaletteMixin.__Dye interface.\r\n\t\tdyeClass: null,\r\n\r\n\t\t_dyeFactory: function(value /*===== , row, col, title =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturn instance of dijit.Dye for specified cell of palette\r\n\t\t\t// tags:\r\n\t\t\t//\t\textension\r\n\r\n\t\t\t// Remove string support for 2.0\r\n\t\t\tvar dyeClassObj = typeof this.dyeClass == \"string\" ? lang.getObject(this.dyeClass) : this.dyeClass;\r\n\t\t\treturn new dyeClassObj(value);\r\n\t\t},\r\n\r\n\t\t_preparePalette: function(choices, titles){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSubclass must call _preparePalette() from postCreate(), passing in the tooltip\r\n\t\t\t//\t\tfor each cell\r\n\t\t\t// choices: String[][]\r\n\t\t\t//\t\tid's for each cell of the palette, used to create Dye JS object for each cell\r\n\t\t\t// titles: String[]\r\n\t\t\t//\t\tLocalized tooltip for each cell\r\n\r\n\t\t\tthis._cells = [];\r\n\t\t\tvar url = this._blankGif;\r\n\r\n\t\t\tthis.own(on(this.gridNode, a11yclick, lang.hitch(this, \"_onCellClick\")));\r\n\r\n\t\t\tfor(var row = 0; row < choices.length; row++){\r\n\t\t\t\tvar rowNode = domConstruct.create(\"tr\", {tabIndex: \"-1\", role: \"row\"}, this.gridNode);\r\n\t\t\t\tfor(var col = 0; col < choices[row].length; col++){\r\n\t\t\t\t\tvar value = choices[row][col];\r\n\t\t\t\t\tif(value){\r\n\t\t\t\t\t\tvar cellObject = this._dyeFactory(value, row, col, titles[value]);\r\n\r\n\t\t\t\t\t\tvar cellNode = domConstruct.create(\"td\", {\r\n\t\t\t\t\t\t\t\"class\": this.cellClass,\r\n\t\t\t\t\t\t\ttabIndex: \"-1\",\r\n\t\t\t\t\t\t\ttitle: titles[value],\r\n\t\t\t\t\t\t\trole: \"gridcell\"\r\n\t\t\t\t\t\t}, rowNode);\r\n\r\n\t\t\t\t\t\t// prepare cell inner structure\r\n\t\t\t\t\t\tcellObject.fillCell(cellNode, url);\r\n\r\n\t\t\t\t\t\tcellNode.idx = this._cells.length;\r\n\r\n\t\t\t\t\t\t// save cell info into _cells\r\n\t\t\t\t\t\tthis._cells.push({node: cellNode, dye: cellObject});\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis._xDim = choices[0].length;\r\n\t\t\tthis._yDim = choices.length;\r\n\r\n\t\t\t// Now set all events\r\n\t\t\t// The palette itself is navigated to with the tab key on the keyboard\r\n\t\t\t// Keyboard navigation within the Palette is with the arrow keys\r\n\t\t\t// Spacebar selects the cell.\r\n\t\t\t// For the up key the index is changed by negative the x dimension.\r\n\r\n\t\t\tvar keyIncrementMap = {\r\n\t\t\t\tUP_ARROW: -this._xDim,\r\n\t\t\t\t// The down key the index is increase by the x dimension.\r\n\t\t\t\tDOWN_ARROW: this._xDim,\r\n\t\t\t\t// Right and left move the index by 1.\r\n\t\t\t\tRIGHT_ARROW: this.isLeftToRight() ? 1 : -1,\r\n\t\t\t\tLEFT_ARROW: this.isLeftToRight() ? -1 : 1\r\n\t\t\t};\r\n\t\t\tfor(var key in keyIncrementMap){\r\n\t\t\t\tthis.own(\r\n\t\t\t\t\ttypematic.addKeyListener(\r\n\t\t\t\t\t\tthis.domNode,\r\n\t\t\t\t\t\t{keyCode: keys[key], ctrlKey: false, altKey: false, shiftKey: false},\r\n\t\t\t\t\t\tthis,\r\n\t\t\t\t\t\tfunction(){\r\n\t\t\t\t\t\t\tvar increment = keyIncrementMap[key];\r\n\t\t\t\t\t\t\treturn function(count){\r\n\t\t\t\t\t\t\t\tthis._navigateByKey(increment, count);\r\n\t\t\t\t\t\t\t};\r\n\t\t\t\t\t\t}(),\r\n\t\t\t\t\t\tthis.timeoutChangeRate,\r\n\t\t\t\t\t\tthis.defaultTimeout\r\n\t\t\t\t\t)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tpostCreate: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\t// Set initial navigable node.\r\n\t\t\tthis._setCurrent(this._cells[0].node);\r\n\t\t},\r\n\r\n\t\tfocus: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFocus this widget.  Puts focus on the most recently focused cell.\r\n\r\n\t\t\t// The cell already has tabIndex set, just need to set CSS and focus it\r\n\t\t\tfocus.focus(this._currentFocus);\r\n\t\t},\r\n\r\n\t\t_onCellClick: function(/*Event*/ evt){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHandler for click, enter key & space key. Selects the cell.\r\n\t\t\t// evt:\r\n\t\t\t//\t\tThe event.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\r\n\t\t\tvar target = evt.target;\r\n\r\n\t\t\t// Find TD associated with click event.   For ColorPalette user likely clicked IMG inside of TD\r\n\t\t\twhile(target.tagName != \"TD\"){\r\n\t\t\t\tif(!target.parentNode || target == this.gridNode){    // probably can never happen, but just in case\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\ttarget = target.parentNode;\r\n\t\t\t}\r\n\r\n\t\t\tvar value = this._getDye(target).getValue();\r\n\r\n\t\t\t// First focus the clicked cell, and then send onChange() notification.\r\n\t\t\t// onChange() (via _setValueAttr) must be after the focus call, because\r\n\t\t\t// it may trigger a refocus to somewhere else (like the Editor content area), and that\r\n\t\t\t// second focus should win.\r\n\t\t\tthis._setCurrent(target);\r\n\t\t\tfocus.focus(target);\r\n\t\t\tthis._setValueAttr(value, true);\r\n\r\n\t\t\tevt.stopPropagation();\r\n\t\t\tevt.preventDefault();\r\n\t\t},\r\n\r\n\t\t_setCurrent: function(/*DomNode*/ node){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSets which node is the focused cell.\r\n\t\t\t// description:\r\n\t\t\t//\t\tAt any point in time there's exactly one\r\n\t\t\t//\t\tcell with tabIndex != -1.   If focus is inside the palette then\r\n\t\t\t//\t\tfocus is on that cell.\r\n\t\t\t//\r\n\t\t\t//\t\tAfter calling this method, arrow key handlers and mouse click handlers\r\n\t\t\t//\t\tshould focus the cell in a setTimeout().\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t\tif(\"_currentFocus\" in this){\r\n\t\t\t\t// Remove tabIndex on old cell\r\n\t\t\t\tdomAttr.set(this._currentFocus, \"tabIndex\", \"-1\");\r\n\t\t\t}\r\n\r\n\t\t\t// Set tabIndex of new cell\r\n\t\t\tthis._currentFocus = node;\r\n\t\t\tif(node){\r\n\t\t\t\tdomAttr.set(node, \"tabIndex\", this.tabIndex);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_setValueAttr: function(value, priorityChange){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tThis selects a cell. It triggers the onChange event.\r\n\t\t\t// value: String\r\n\t\t\t//\t\tValue of the cell to select\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\t\t\t// priorityChange: Boolean?\r\n\t\t\t//\t\tOptional parameter used to tell the select whether or not to fire\r\n\t\t\t//\t\tonChange event.\r\n\r\n\t\t\t// clear old selected cell\r\n\t\t\tif(this._selectedCell >= 0){\r\n\t\t\t\tdomClass.remove(this._cells[this._selectedCell].node, this.cellClass + \"Selected\");\r\n\t\t\t}\r\n\t\t\tthis._selectedCell = -1;\r\n\r\n\t\t\t// search for cell matching specified value\r\n\t\t\tif(value){\r\n\t\t\t\tfor(var i = 0; i < this._cells.length; i++){\r\n\t\t\t\t\tif(value == this._cells[i].dye.getValue()){\r\n\t\t\t\t\t\tthis._selectedCell = i;\r\n\t\t\t\t\t\tdomClass.add(this._cells[i].node, this.cellClass + \"Selected\");\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// record new value, or null if no matching cell\r\n\t\t\tthis._set(\"value\", this._selectedCell >= 0 ? value : null);\r\n\r\n\t\t\tif(priorityChange || priorityChange === undefined){\r\n\t\t\t\tthis.onChange(value);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tonChange: function(/*===== value =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCallback when a cell is selected.\r\n\t\t\t// value: String\r\n\t\t\t//\t\tValue corresponding to cell.\r\n\t\t},\r\n\r\n\t\t_navigateByKey: function(increment, typeCount){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tThis is the callback for typematic.\r\n\t\t\t//\t\tIt changes the focus and the highlighed cell.\r\n\t\t\t// increment:\r\n\t\t\t//\t\tHow much the key is navigated.\r\n\t\t\t// typeCount:\r\n\t\t\t//\t\tHow many times typematic has fired.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\r\n\t\t\t// typecount == -1 means the key is released.\r\n\t\t\tif(typeCount == -1){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar newFocusIndex = this._currentFocus.idx + increment;\r\n\t\t\tif(newFocusIndex < this._cells.length && newFocusIndex > -1){\r\n\t\t\t\tvar focusNode = this._cells[newFocusIndex].node;\r\n\t\t\t\tthis._setCurrent(focusNode);\r\n\r\n\t\t\t\t// Actually focus the node, for the benefit of screen readers.\r\n\t\t\t\t// Use defer because IE doesn't like changing focus inside of an event handler\r\n\t\t\t\tthis.defer(lang.hitch(focus, \"focus\", focusNode));\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_getDye: function(/*DomNode*/ cell){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGet JS object for given cell DOMNode\r\n\r\n\t\t\treturn this._cells[cell.idx].dye;\r\n\t\t}\r\n\t});\r\n\r\n\t/*=====\r\n\t PaletteMixin.__Dye = declare(\"dijit.Dye\", null, {\r\n\t\t // summary:\r\n\t\t //\t\tInterface for the JS Object associated with a palette cell (i.e. DOMNode)\r\n\r\n\t\t constructor: function(alias, row, col){\r\n\t\t\t // summary:\r\n\t\t\t //\t\tInitialize according to value or alias like \"white\"\r\n\t\t\t // alias: String\r\n\t\t },\r\n\r\n\t\t getValue: function(){\r\n\t\t\t // summary:\r\n\t\t\t //\t\tReturn \"value\" of cell; meaning of \"value\" varies by subclass.\r\n\t\t\t // description:\r\n\t\t\t //\t\tFor example color hex value, emoticon ascii value etc, entity hex value.\r\n\t\t },\r\n\r\n\t\t fillCell: function(cell, blankGif){\r\n\t\t\t // summary:\r\n\t\t\t //\t\tAdd cell DOMNode inner structure\r\n\t\t\t // cell: DomNode\r\n\t\t\t //\t\tThe surrounding cell\r\n\t\t\t // blankGif: String\r\n\t\t\t //\t\tURL for blank cell image\r\n\t\t }\r\n\t });\r\n\t =====*/\r\n\r\n\treturn PaletteMixin;\r\n});\r\n"]}