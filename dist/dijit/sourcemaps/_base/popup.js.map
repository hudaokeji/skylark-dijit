{"version":3,"sources":["_base/popup.js"],"names":["define","domClass","win","popup","origCreateWrapper","_createWrapper","widget","declaredClass","_popupWrapper","parentNode","contains","domNode","destroy","ownerDocument","ownerDocumentBody","body","call","this","origOpen","open","args","orient","ary","key","push","aroundCorner","corner"],"mappings":";;;;;;;AAAAA,QACC,iBACA,oBACA,WACA,uBACE,SAASC,EAAUC,EAAKC,GAc3B,IAAIC,EAAoBD,EAAME,eAC9BF,EAAME,eAAiB,SAASC,GAY/B,OAXIA,EAAOC,gBAEVD,GACCE,cAAgBF,EAAOG,YAAcR,EAASS,SAASJ,EAAOG,WAAY,cACzEH,EAAOG,WAAa,KACrBE,QAASL,EACTM,QAAS,aACTC,cAAeP,EAAOO,cACtBC,kBAAmBZ,EAAIa,KAAKT,EAAOO,iBAG9BT,EAAkBY,KAAKC,KAAMX,IAIrC,IAAIY,EAAWf,EAAMgB,KAoBrB,OAnBAhB,EAAMgB,KAAO,SAAwBC,GAQpC,GAAGA,EAAKC,QAAgC,iBAAfD,EAAKC,UAAwB,WAAYD,EAAKC,QAAQ,CAC9E,IAAIC,KACJ,IAAI,IAAIC,KAAOH,EAAKC,OACnBC,EAAIE,MAAMC,aAAcF,EAAKG,OAAQN,EAAKC,OAAOE,KAElDH,EAAKC,OAASC,EAGf,OAAOJ,EAASF,KAAKC,KAAMG,IAGrBjB","file":"../../_base/popup.js","sourcesContent":["define([\r\n\t\"dojo/dom-class\", // domClass.contains\r\n\t\"dojo/_base/window\",\r\n\t\"../popup\",\r\n\t\"../BackgroundIframe\"\t// just loading for back-compat, in case client code is referencing it\r\n], function(domClass, win, popup){\r\n\r\n// module:\r\n//\t\tdijit/_base/popup\r\n\r\n/*=====\r\nreturn {\r\n\t// summary:\r\n\t//\t\tDeprecated.   Old module for popups, new code should use dijit/popup directly.\r\n};\r\n=====*/\r\n\r\n\r\n// Hack support for old API passing in node instead of a widget (to various methods)\r\nvar origCreateWrapper = popup._createWrapper;\r\npopup._createWrapper = function(widget){\r\n\tif(!widget.declaredClass){\r\n\t\t// make fake widget to pass to new API\r\n\t\twidget = {\r\n\t\t\t_popupWrapper: (widget.parentNode && domClass.contains(widget.parentNode, \"dijitPopup\")) ?\r\n\t\t\t\twidget.parentNode : null,\r\n\t\t\tdomNode: widget,\r\n\t\t\tdestroy: function(){},\r\n\t\t\townerDocument: widget.ownerDocument,\r\n\t\t\townerDocumentBody: win.body(widget.ownerDocument)\r\n\t\t};\r\n\t}\r\n\treturn origCreateWrapper.call(this, widget);\r\n};\r\n\r\n// Support old format of orient parameter\r\nvar origOpen = popup.open;\r\npopup.open = function(/*__OpenArgs*/ args){\r\n\t// Convert old hash structure (ex: {\"BL\": \"TL\", ...}) of orient to format compatible w/new popup.open() API.\r\n\t// Don't do conversion for:\r\n\t//\t\t- null parameter (that means to use the default positioning)\r\n\t//\t\t- \"R\" or \"L\" strings used to indicate positioning for context menus (when there is no around node)\r\n\t//\t\t- new format, ex: [\"below\", \"above\"]\r\n\t//\t\t- return value from deprecated dijit.getPopupAroundAlignment() method,\r\n\t//\t\t\tex: [\"below\", \"above\"]\r\n\tif(args.orient && typeof args.orient != \"string\" && !(\"length\" in args.orient)){\r\n\t\tvar ary = [];\r\n\t\tfor(var key in args.orient){\r\n\t\t\tary.push({aroundCorner: key, corner: args.orient[key]});\r\n\t\t}\r\n\t\targs.orient = ary;\r\n\t}\r\n\r\n\treturn origOpen.call(this, args);\r\n};\r\n\r\nreturn popup;\r\n});\r\n"]}