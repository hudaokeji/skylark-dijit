{"version":3,"sources":["ColorPalette.js"],"names":["define","require","template","_Widget","_TemplatedMixin","_PaletteMixin","has","i18n","Color","declare","domConstruct","string","ColorPalette","palette","_palettes","7x10","3x4","templateString","baseClass","_dyeFactory","value","row","col","title","this","_dyeClass","buildRendering","inherited","arguments","_Color","_preparePalette","getLocalization","lang","hcTemplate","_imagePaths","toUrl","constructor","alias","_title","_row","_col","setColor","named","getValue","toHex","fillCell","cell","blankGif","html","substitute","color","alt","image","toString","left","top","size","place"],"mappings":";;;;;;;AAAAA,QACC,UACA,0CACA,YACA,oBACA,kBACA,UACA,YACA,mBACA,qBACA,qBACA,cACA,4BACA,eACE,SAASC,QAASC,EAAUC,EAASC,EAAiBC,EAAeC,EAAKC,EAAMC,EAClFC,EAASC,EAAcC,GAKvB,IAAIC,EAAeH,EAAQ,sBAAuBN,EAASC,EAAiBC,IAiB3EQ,QAAS,OAMTC,WACCC,SACE,QAAS,WAAY,WAAY,eAAgB,cAAe,YAAa,gBAAiB,YAAa,WAAY,SACvH,YAAa,OAAQ,SAAU,WAAY,QAAS,aAAc,gBAAiB,eAAgB,iBAAkB,WACrH,SAAU,aAAc,aAAc,SAAU,gBAAiB,aAAc,kBAAmB,UAAW,kBAAmB,WAChI,OAAQ,MAAO,YAAa,aAAc,SAAU,YAAa,eAAgB,YAAa,YAAa,iBAC3G,UAAW,UAAW,YAAa,QAAS,OAAQ,cAAe,WAAY,OAAQ,aAAc,eACrG,gBAAiB,YAAa,cAAe,SAAU,QAAS,QAAS,WAAY,aAAc,gBAAiB,gBACpH,QAAS,UAAW,SAAU,QAAS,iBAAkB,YAAa,eAAgB,OAAQ,SAAU,WAG1GC,QACE,QAAS,OAAQ,QAAS,SAC1B,SAAU,SAAU,UAAW,SAC/B,OAAQ,MAAO,SAAU,WAM5BC,eAAgBf,EAEhBgB,UAAW,oBAEXC,YAAa,SAASC,EAAOC,EAAKC,EAAKC,GAEtC,OAAO,IAAIC,KAAKC,UAAUL,EAAOC,EAAKC,EAAKC,IAG5CG,eAAgB,WAGfF,KAAKG,UAAUC,WAIfJ,KAAKC,UAAYhB,EAAQG,EAAaiB,QACrChB,QAASW,KAAKX,UAIfW,KAAKM,gBACJN,KAAKV,UAAUU,KAAKX,SACpBN,EAAKwB,gBAAgB,OAAQ,SAAUP,KAAKQ,UAwE/C,OApEApB,EAAaiB,OAASpB,EAAQ,eAAgBD,GAQ7CN,SAAU,6KAMV+B,WAAY,oPAMZC,aACCnB,OAAQd,QAAQkC,MAAM,gCACtBnB,MAAOf,QAAQkC,MAAM,gCAGtBC,YAAa,SAASC,EAAOhB,EAAKC,EAAKC,GAWtCC,KAAKc,OAASf,EACdC,KAAKe,KAAOlB,EACZG,KAAKgB,KAAOlB,EACZE,KAAKiB,SAASjC,EAAMkC,MAAML,KAG3BM,SAAU,WAIT,OAAOnB,KAAKoB,SAGbC,SAAU,SAAqBC,EAAiBC,GAC/C,IAAIC,EAAOrC,EAAOsC,WAAW3C,EAAI,gBAAkBkB,KAAKS,WAAaT,KAAKtB,UAEzEgD,MAAO1B,KAAKoB,QACZG,SAAUA,EACVI,IAAK3B,KAAKc,OACVf,MAAOC,KAAKc,OAGZc,MAAO5B,KAAKU,YAAYV,KAAKX,SAASwC,WACtCC,MAAmB,GAAb9B,KAAKgB,KAAa,EACxBe,KAAkB,GAAb/B,KAAKe,KAAa,EACvBiB,KAAsB,QAAhBhC,KAAKX,QAAoB,8BAAgC,8BAGhEH,EAAa+C,MAAMT,EAAMF,MAIpBlC","file":"../ColorPalette.js","sourcesContent":["define([\r\n\t\"require\", // require.toUrl\r\n\t\"dojo/text!./templates/ColorPalette.html\",\r\n\t\"./_Widget\", // used also to load dijit/hccss for setting has(\"highcontrast\")\r\n\t\"./_TemplatedMixin\",\r\n\t\"./_PaletteMixin\",\r\n\t\"./hccss\", // has(\"highcontrast\")\r\n\t\"dojo/i18n\", // i18n.getLocalization\r\n\t\"dojo/_base/Color\", // dojo.Color dojo.Color.named\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom-construct\", // domConstruct.place\r\n\t\"dojo/string\", // string.substitute\r\n\t\"dojo/i18n!dojo/nls/colors\", // translations\r\n\t\"dojo/colors\"    // extend dojo.Color w/names of other colors\r\n], function(require, template, _Widget, _TemplatedMixin, _PaletteMixin, has, i18n, Color,\r\n\tdeclare, domConstruct, string){\r\n\r\n\t// module:\r\n\t//\t\tdijit/ColorPalette\r\n\r\n\tvar ColorPalette = declare(\"dijit.ColorPalette\", [_Widget, _TemplatedMixin, _PaletteMixin], {\r\n\t\t// summary:\r\n\t\t//\t\tA keyboard accessible color-picking widget\r\n\t\t// description:\r\n\t\t//\t\tGrid showing various colors, so the user can pick a certain color.\r\n\t\t//\t\tCan be used standalone, or as a popup.\r\n\t\t//\r\n\t\t// example:\r\n\t\t// |\t<div data-dojo-type=\"dijit/ColorPalette\"></div>\r\n\t\t//\r\n\t\t// example:\r\n\t\t// |\tvar picker = new dijit.ColorPalette({ },srcNode);\r\n\t\t// |\tpicker.startup();\r\n\r\n\r\n\t\t// palette: [const] String\r\n\t\t//\t\tSize of grid, either \"7x10\" or \"3x4\".\r\n\t\tpalette: \"7x10\",\r\n\r\n\t\t// _palettes: [protected] Map\r\n\t\t//\t\tThis represents the value of the colors.\r\n\t\t//\t\tThe first level is a hashmap of the different palettes available.\r\n\t\t//\t\tThe next two dimensions represent the columns and rows of colors.\r\n\t\t_palettes: {\r\n\t\t\t\"7x10\": [\r\n\t\t\t\t[\"white\", \"seashell\", \"cornsilk\", \"lemonchiffon\", \"lightyellow\", \"palegreen\", \"paleturquoise\", \"lightcyan\", \"lavender\", \"plum\"],\r\n\t\t\t\t[\"lightgray\", \"pink\", \"bisque\", \"moccasin\", \"khaki\", \"lightgreen\", \"lightseagreen\", \"lightskyblue\", \"cornflowerblue\", \"violet\"],\r\n\t\t\t\t[\"silver\", \"lightcoral\", \"sandybrown\", \"orange\", \"palegoldenrod\", \"chartreuse\", \"mediumturquoise\", \"skyblue\", \"mediumslateblue\", \"orchid\"],\r\n\t\t\t\t[\"gray\", \"red\", \"orangered\", \"darkorange\", \"yellow\", \"limegreen\", \"darkseagreen\", \"royalblue\", \"slateblue\", \"mediumorchid\"],\r\n\t\t\t\t[\"dimgray\", \"crimson\", \"chocolate\", \"coral\", \"gold\", \"forestgreen\", \"seagreen\", \"blue\", \"blueviolet\", \"darkorchid\"],\r\n\t\t\t\t[\"darkslategray\", \"firebrick\", \"saddlebrown\", \"sienna\", \"olive\", \"green\", \"darkcyan\", \"mediumblue\", \"darkslateblue\", \"darkmagenta\" ],\r\n\t\t\t\t[\"black\", \"darkred\", \"maroon\", \"brown\", \"darkolivegreen\", \"darkgreen\", \"midnightblue\", \"navy\", \"indigo\", \"purple\"]\r\n\t\t\t],\r\n\r\n\t\t\t\"3x4\": [\r\n\t\t\t\t[\"white\", \"lime\", \"green\", \"blue\"],\r\n\t\t\t\t[\"silver\", \"yellow\", \"fuchsia\", \"navy\"],\r\n\t\t\t\t[\"gray\", \"red\", \"purple\", \"black\"]\r\n\t\t\t]\r\n\t\t},\r\n\r\n\t\t// templateString: String\r\n\t\t//\t\tThe template of this widget.\r\n\t\ttemplateString: template,\r\n\r\n\t\tbaseClass: \"dijitColorPalette\",\r\n\r\n\t\t_dyeFactory: function(value, row, col, title){\r\n\t\t\t// Overrides _PaletteMixin._dyeFactory().\r\n\t\t\treturn new this._dyeClass(value, row, col, title);\r\n\t\t},\r\n\r\n\t\tbuildRendering: function(){\r\n\t\t\t// Instantiate the template, which makes a skeleton into which we'll insert a bunch of\r\n\t\t\t// <img> nodes\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\t//\tCreates customized constructor for dye class (color of a single cell) for\r\n\t\t\t//\tspecified palette and high-contrast vs. normal mode.   Used in _getDye().\r\n\t\t\tthis._dyeClass = declare(ColorPalette._Color, {\r\n\t\t\t\tpalette: this.palette\r\n\t\t\t});\r\n\r\n\t\t\t// Creates <img> nodes in each cell of the template.\r\n\t\t\tthis._preparePalette(\r\n\t\t\t\tthis._palettes[this.palette],\r\n\t\t\t\ti18n.getLocalization(\"dojo\", \"colors\", this.lang));\r\n\t\t}\r\n\t});\r\n\r\n\tColorPalette._Color = declare(\"dijit._Color\", Color, {\r\n\t\t// summary:\r\n\t\t//\t\tObject associated with each cell in a ColorPalette palette.\r\n\t\t//\t\tImplements dijit/Dye.\r\n\r\n\t\t// Template for each cell in normal (non-high-contrast mode).  Each cell contains a wrapper\r\n\t\t// node for showing the border (called dijitPaletteImg for back-compat), and dijitColorPaletteSwatch\r\n\t\t// for showing the color.\r\n\t\ttemplate: \"<span class='dijitInline dijitPaletteImg'>\" +\r\n\t\t\t\"<img src='${blankGif}' alt='${alt}' title='${title}' class='dijitColorPaletteSwatch' style='background-color: ${color}'/>\" +\r\n\t\t\t\"</span>\",\r\n\r\n\t\t// Template for each cell in high contrast mode.  Each cell contains an image with the whole palette,\r\n\t\t// but scrolled and clipped to show the correct color only\r\n\t\thcTemplate: \"<span class='dijitInline dijitPaletteImg' style='position: relative; overflow: hidden; height: 12px; width: 14px;'>\" +\r\n\t\t\t\"<img src='${image}' alt='${alt}' title='${title}' style='position: absolute; left: ${left}px; top: ${top}px; ${size}'/>\" +\r\n\t\t\t\"</span>\",\r\n\r\n\t\t// _imagePaths: [protected] Map\r\n\t\t//\t\tThis is stores the path to the palette images used for high-contrast mode display\r\n\t\t_imagePaths: {\r\n\t\t\t\"7x10\": require.toUrl(\"./themes/a11y/colors7x10.png\"),\r\n\t\t\t\"3x4\": require.toUrl(\"./themes/a11y/colors3x4.png\")\r\n\t\t},\r\n\r\n\t\tconstructor: function(alias, row, col, title){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tConstructor for ColorPalette._Color\r\n\t\t\t// alias: String\r\n\t\t\t//\t\tEnglish name of the color.\r\n\t\t\t// row: Number\r\n\t\t\t//\t\tVertical position in grid.\r\n\t\t\t// column: Number\r\n\t\t\t//\t\tHorizontal position in grid.\r\n\t\t\t// title: String\r\n\t\t\t//\t\tLocalized name of the color.\r\n\t\t\tthis._title = title;\r\n\t\t\tthis._row = row;\r\n\t\t\tthis._col = col;\r\n\t\t\tthis.setColor(Color.named[alias]);\r\n\t\t},\r\n\r\n\t\tgetValue: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tNote that although dijit._Color is initialized with a value like \"white\" getValue() always\r\n\t\t\t//\t\treturns a hex value\r\n\t\t\treturn this.toHex();\r\n\t\t},\r\n\r\n\t\tfillCell: function(/*DOMNode*/ cell, /*String*/ blankGif){\r\n\t\t\tvar html = string.substitute(has(\"highcontrast\") ? this.hcTemplate : this.template, {\r\n\t\t\t\t// substitution variables for normal mode\r\n\t\t\t\tcolor: this.toHex(),\r\n\t\t\t\tblankGif: blankGif,\r\n\t\t\t\talt: this._title,\r\n\t\t\t\ttitle: this._title,\r\n\r\n\t\t\t\t// variables used for high contrast mode\r\n\t\t\t\timage: this._imagePaths[this.palette].toString(),\r\n\t\t\t\tleft: this._col * -20 - 5,\r\n\t\t\t\ttop: this._row * -20 - 5,\r\n\t\t\t\tsize: this.palette == \"7x10\" ? \"height: 145px; width: 206px\" : \"height: 64px; width: 86px\"\r\n\t\t\t});\r\n\r\n\t\t\tdomConstruct.place(html, cell);\r\n\t\t}\r\n\t});\r\n\r\n\treturn ColorPalette;\r\n});\r\n"]}