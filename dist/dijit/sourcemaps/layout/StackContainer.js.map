{"version":3,"sources":["layout/StackContainer.js"],"names":["define","array","cookie","declare","domClass","domConstruct","has","lang","on","ready","topic","when","registry","_WidgetBase","_LayoutWidget","require","StackContainer","doLayout","persist","baseClass","buildRendering","this","inherited","arguments","add","domNode","postCreate","own","hitch","startup","_started","children","getChildren","forEach","_setupChild","selectedChildWidget","byId","id","some","child","selected","publish","textDir","resize","_hasBeenShown","_showChild","childNode","wrapper","place","label","title","setAttribute","_wrapper","style","display","removeAttribute","addChild","insertIndex","layout","selectChild","removeChild","page","idx","indexOf","destroy","_descendantsBeingDestroyed","undefined","length","Math","max","animate","d","_transition","_set","newWidget","oldWidget","_hideChild","_containerContentBox","_contentBox","_adjacent","forward","index","back","_onKeyDown","e","isFirstChild","isLastChild","replace","_onShow","onHide","closeChild","onClose","destroyRecursive","destroyDescendants","preserveDom","ChildWidgetProperties","disabled","closable","iconClass","showTitle","extend"],"mappings":"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","file":"../../layout/StackContainer.js","sourcesContent":["define([\r\n\t\"dojo/_base/array\", // array.forEach array.indexOf array.some\r\n\t\"dojo/cookie\", // cookie\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom-class\", // domClass.add domClass.replace\r\n\t\"dojo/dom-construct\",\r\n\t\"dojo/has\", // has(\"dijit-legacy-requires\")\r\n\t\"dojo/_base/lang\", // lang.extend\r\n\t\"dojo/on\",\r\n\t\"dojo/ready\",\r\n\t\"dojo/topic\", // publish\r\n\t\"dojo/when\",\r\n\t\"../registry\", // registry.byId\r\n\t\"../_WidgetBase\",\r\n\t\"./_LayoutWidget\"\r\n], function(array, cookie, declare, domClass, domConstruct, has, lang, on, ready, topic, when, registry, _WidgetBase, _LayoutWidget){\r\n\r\n\t// module:\r\n\t//\t\tdijit/layout/StackContainer\r\n\r\n\t// Back compat w/1.6, remove for 2.0\r\n\tif(has(\"dijit-legacy-requires\")){\r\n\t\tready(0, function(){\r\n\t\t\tvar requires = [\"dijit/layout/StackController\"];\r\n\t\t\trequire(requires);\t// use indirection so modules not rolled into a build\r\n\t\t});\r\n\t}\r\n\r\n\tvar StackContainer = declare(\"dijit.layout.StackContainer\", _LayoutWidget, {\r\n\t\t// summary:\r\n\t\t//\t\tA container that has multiple children, but shows only\r\n\t\t//\t\tone child at a time\r\n\t\t//\r\n\t\t// description:\r\n\t\t//\t\tA container for widgets (ContentPanes, for example) That displays\r\n\t\t//\t\tonly one Widget at a time.\r\n\t\t//\r\n\t\t//\t\tPublishes topics [widgetId]-addChild, [widgetId]-removeChild, and [widgetId]-selectChild\r\n\t\t//\r\n\t\t//\t\tCan be base class for container, Wizard, Show, etc.\r\n\t\t//\r\n\t\t//\t\tSee `StackContainer.ChildWidgetProperties` for details on the properties that can be set on\r\n\t\t//\t\tchildren of a `StackContainer`.\r\n\r\n\t\t// doLayout: Boolean\r\n\t\t//\t\tIf true, change the size of my currently displayed child to match my size\r\n\t\tdoLayout: true,\r\n\r\n\t\t// persist: Boolean\r\n\t\t//\t\tRemembers the selected child across sessions\r\n\t\tpersist: false,\r\n\r\n\t\tbaseClass: \"dijitStackContainer\",\r\n\r\n\t\t/*=====\r\n\t\t// selectedChildWidget: [readonly] dijit._Widget\r\n\t\t//\t\tReferences the currently selected child widget, if any.\r\n\t\t//\t\tAdjust selected child with selectChild() method.\r\n\t\tselectedChildWidget: null,\r\n\t\t=====*/\r\n\r\n\t\tbuildRendering: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tdomClass.add(this.domNode, \"dijitLayoutContainer\");\r\n\t\t},\r\n\r\n\t\tpostCreate: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis.own(\r\n\t\t\t\ton(this.domNode, \"keydown\", lang.hitch(this, \"_onKeyDown\"))\r\n\t\t\t);\r\n\t\t},\r\n\r\n\t\tstartup: function(){\r\n\t\t\tif(this._started){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tvar children = this.getChildren();\r\n\r\n\t\t\t// Setup each page panel to be initially hidden\r\n\t\t\tarray.forEach(children, this._setupChild, this);\r\n\r\n\t\t\t// Figure out which child to initially display, defaulting to first one\r\n\t\t\tif(this.persist){\r\n\t\t\t\tthis.selectedChildWidget = registry.byId(cookie(this.id + \"_selectedChild\"));\r\n\t\t\t}else{\r\n\t\t\t\tarray.some(children, function(child){\r\n\t\t\t\t\tif(child.selected){\r\n\t\t\t\t\t\tthis.selectedChildWidget = child;\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn child.selected;\r\n\t\t\t\t}, this);\r\n\t\t\t}\r\n\t\t\tvar selected = this.selectedChildWidget;\r\n\t\t\tif(!selected && children[0]){\r\n\t\t\t\tselected = this.selectedChildWidget = children[0];\r\n\t\t\t\tselected.selected = true;\r\n\t\t\t}\r\n\r\n\t\t\t// Publish information about myself so any StackControllers can initialize.\r\n\t\t\t// This needs to happen before this.inherited(arguments) so that for\r\n\t\t\t// TabContainer, this._contentBox doesn't include the space for the tab labels.\r\n\t\t\ttopic.publish(this.id + \"-startup\", {children: children, selected: selected, textDir: this.textDir});\r\n\r\n\t\t\t// Startup each child widget, and do initial layout like setting this._contentBox,\r\n\t\t\t// then calls this.resize() which does the initial sizing on the selected child.\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tresize: function(){\r\n\t\t\t// Overrides _LayoutWidget.resize()\r\n\t\t\t// Resize is called when we are first made visible (it's called from startup()\r\n\t\t\t// if we are initially visible). If this is the first time we've been made\r\n\t\t\t// visible then show our first child.\r\n\t\t\tif(!this._hasBeenShown){\r\n\t\t\t\tthis._hasBeenShown = true;\r\n\t\t\t\tvar selected = this.selectedChildWidget;\r\n\t\t\t\tif(selected){\r\n\t\t\t\t\tthis._showChild(selected);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\t_setupChild: function(/*dijit/_WidgetBase*/ child){\r\n\t\t\t// Overrides _LayoutWidget._setupChild()\r\n\r\n\t\t\t// For aria support, wrap child widget in a <div role=\"tabpanel\">\r\n\t\t\tvar childNode = child.domNode,\r\n\t\t\t\twrapper = domConstruct.place(\r\n\t\t\t\t\t\"<div role='tabpanel' class='\" + this.baseClass + \"ChildWrapper dijitHidden'>\",\r\n\t\t\t\t\tchild.domNode,\r\n\t\t\t\t\t\"replace\"),\r\n\t\t\t\tlabel = child[\"aria-label\"] || child.title || child.label;\r\n\t\t\tif(label){\r\n\t\t\t\t// setAttribute() escapes special chars, and if() statement avoids setting aria-label=\"undefined\"\r\n\t\t\t\twrapper.setAttribute(\"aria-label\", label);\r\n\t\t\t}\r\n\t\t\tdomConstruct.place(childNode, wrapper);\r\n\t\t\tchild._wrapper = wrapper;\t// to set the aria-labelledby in StackController\r\n\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\t// child may have style=\"display: none\" (at least our test cases do), so remove that\r\n\t\t\tif(childNode.style.display == \"none\"){\r\n\t\t\t\tchildNode.style.display = \"block\";\r\n\t\t\t}\r\n\r\n\t\t\t// remove the title attribute so it doesn't show up when i hover over a node\r\n\t\t\tchild.domNode.removeAttribute(\"title\");\r\n\t\t},\r\n\r\n\t\taddChild: function(/*dijit/_WidgetBase*/ child, /*Integer?*/ insertIndex){\r\n\t\t\t// Overrides _Container.addChild() to do layout and publish events\r\n\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\tif(this._started){\r\n\t\t\t\ttopic.publish(this.id + \"-addChild\", child, insertIndex);\t// publish\r\n\r\n\t\t\t\t// in case the tab titles have overflowed from one line to two lines\r\n\t\t\t\t// (or, if this if first child, from zero lines to one line)\r\n\t\t\t\t// TODO: w/ScrollingTabController this is no longer necessary, although\r\n\t\t\t\t// ScrollTabController.resize() does need to get called to show/hide\r\n\t\t\t\t// the navigation buttons as appropriate, but that's handled in ScrollingTabController.onAddChild().\r\n\t\t\t\t// If this is updated to not layout [except for initial child added / last child removed], update\r\n\t\t\t\t// \"childless startup\" test in StackContainer.html to check for no resize event after second addChild()\r\n\t\t\t\tthis.layout();\r\n\r\n\t\t\t\t// if this is the first child, then select it\r\n\t\t\t\tif(!this.selectedChildWidget){\r\n\t\t\t\t\tthis.selectChild(child);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tremoveChild: function(/*dijit/_WidgetBase*/ page){\r\n\t\t\t// Overrides _Container.removeChild() to do layout and publish events\r\n\r\n\t\t\tvar idx = array.indexOf(this.getChildren(), page);\r\n\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\t// Remove the child widget wrapper we use to set aria roles.  This won't affect the page itself since it's\r\n\t\t\t// already been detached from page._wrapper via the this.inherited(arguments) call above.\r\n\t\t\tdomConstruct.destroy(page._wrapper);\r\n\t\t\tdelete page._wrapper;\r\n\r\n\t\t\tif(this._started){\r\n\t\t\t\t// This will notify any tablists to remove a button; do this first because it may affect sizing.\r\n\t\t\t\ttopic.publish(this.id + \"-removeChild\", page);\r\n\t\t\t}\r\n\r\n\t\t\t// If all our children are being destroyed than don't run the code below (to select another page),\r\n\t\t\t// because we are deleting every page one by one\r\n\t\t\tif(this._descendantsBeingDestroyed){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// Select new page to display, also updating TabController to show the respective tab.\r\n\t\t\t// Do this before layout call because it can affect the height of the TabController.\r\n\t\t\tif(this.selectedChildWidget === page){\r\n\t\t\t\tthis.selectedChildWidget = undefined;\r\n\t\t\t\tif(this._started){\r\n\t\t\t\t\tvar children = this.getChildren();\r\n\t\t\t\t\tif(children.length){\r\n\t\t\t\t\t\tthis.selectChild(children[Math.max(idx - 1, 0)]);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif(this._started){\r\n\t\t\t\t// In case the tab titles now take up one line instead of two lines\r\n\t\t\t\t// (note though that ScrollingTabController never overflows to multiple lines),\r\n\t\t\t\t// or the height has changed slightly because of addition/removal of tab which close icon\r\n\t\t\t\tthis.layout();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tselectChild: function(/*dijit/_WidgetBase|String*/ page, /*Boolean*/ animate){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tShow the given widget (which must be one of my children)\r\n\t\t\t// page:\r\n\t\t\t//\t\tReference to child widget or id of child widget\r\n\r\n\t\t\tvar d;\r\n\r\n\t\t\tpage = registry.byId(page);\r\n\r\n\t\t\tif(this.selectedChildWidget != page){\r\n\t\t\t\t// Deselect old page and select new one\r\n\t\t\t\td = this._transition(page, this.selectedChildWidget, animate);\r\n\t\t\t\tthis._set(\"selectedChildWidget\", page);\r\n\t\t\t\ttopic.publish(this.id + \"-selectChild\", page);\t// publish\r\n\r\n\t\t\t\tif(this.persist){\r\n\t\t\t\t\tcookie(this.id + \"_selectedChild\", this.selectedChildWidget.id);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// d may be null, or a scalar like true.  Return a promise in all cases\r\n\t\t\treturn when(d || true);\t\t// Promise\r\n\t\t},\r\n\r\n\t\t_transition: function(newWidget, oldWidget /*===== ,  animate =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHide the old widget and display the new widget.\r\n\t\t\t//\t\tSubclasses should override this.\r\n\t\t\t// newWidget: dijit/_WidgetBase\r\n\t\t\t//\t\tThe newly selected widget.\r\n\t\t\t// oldWidget: dijit/_WidgetBase\r\n\t\t\t//\t\tThe previously selected widget.\r\n\t\t\t// animate: Boolean\r\n\t\t\t//\t\tUsed by AccordionContainer to turn on/off slide effect.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected extension\r\n\t\t\tif(oldWidget){\r\n\t\t\t\tthis._hideChild(oldWidget);\r\n\t\t\t}\r\n\t\t\tvar d = this._showChild(newWidget);\r\n\r\n\t\t\t// Size the new widget, in case this is the first time it's being shown,\r\n\t\t\t// or I have been resized since the last time it was shown.\r\n\t\t\t// Note that page must be visible for resizing to work.\r\n\t\t\tif(newWidget.resize){\r\n\t\t\t\tif(this.doLayout){\r\n\t\t\t\t\tnewWidget.resize(this._containerContentBox || this._contentBox);\r\n\t\t\t\t}else{\r\n\t\t\t\t\t// the child should pick it's own size but we still need to call resize()\r\n\t\t\t\t\t// (with no arguments) to let the widget lay itself out\r\n\t\t\t\t\tnewWidget.resize();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn d;\t// If child has an href, promise that fires when the child's href finishes loading\r\n\t\t},\r\n\r\n\t\t_adjacent: function(/*Boolean*/ forward){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGets the next/previous child widget in this container from the current selection.\r\n\r\n\t\t\t// TODO: remove for 2.0 if this isn't being used.   Otherwise, fix to skip disabled tabs.\r\n\r\n\t\t\tvar children = this.getChildren();\r\n\t\t\tvar index = array.indexOf(children, this.selectedChildWidget);\r\n\t\t\tindex += forward ? 1 : children.length - 1;\r\n\t\t\treturn children[ index % children.length ]; // dijit/_WidgetBase\r\n\t\t},\r\n\r\n\t\tforward: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tAdvance to next page.\r\n\t\t\treturn this.selectChild(this._adjacent(true), true);\r\n\t\t},\r\n\r\n\t\tback: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tGo back to previous page.\r\n\t\t\treturn this.selectChild(this._adjacent(false), true);\r\n\t\t},\r\n\r\n\t\t_onKeyDown: function(e){\r\n\t\t\ttopic.publish(this.id + \"-containerKeyDown\", { e: e, page: this});\t// publish\r\n\t\t},\r\n\r\n\t\tlayout: function(){\r\n\t\t\t// Implement _LayoutWidget.layout() virtual method.\r\n\t\t\tvar child = this.selectedChildWidget;\r\n\t\t\tif(child && child.resize){\r\n\t\t\t\tif(this.doLayout){\r\n\t\t\t\t\tchild.resize(this._containerContentBox || this._contentBox);\r\n\t\t\t\t}else{\r\n\t\t\t\t\tchild.resize();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_showChild: function(/*dijit/_WidgetBase*/ page){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tShow the specified child by changing it's CSS, and call _onShow()/onShow() so\r\n\t\t\t//\t\tit can do any updates it needs regarding loading href's etc.\r\n\t\t\t// returns:\r\n\t\t\t//\t\tPromise that fires when page has finished showing, or true if there's no href\r\n\t\t\tvar children = this.getChildren();\r\n\t\t\tpage.isFirstChild = (page == children[0]);\r\n\t\t\tpage.isLastChild = (page == children[children.length - 1]);\r\n\t\t\tpage._set(\"selected\", true);\r\n\r\n\t\t\tif(page._wrapper){\t// false if not started yet\r\n\t\t\t\tdomClass.replace(page._wrapper, \"dijitVisible\", \"dijitHidden\");\r\n\t\t\t}\r\n\r\n\t\t\treturn (page._onShow && page._onShow()) || true;\r\n\t\t},\r\n\r\n\t\t_hideChild: function(/*dijit/_WidgetBase*/ page){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHide the specified child by changing it's CSS, and call _onHide() so\r\n\t\t\t//\t\tit's notified.\r\n\t\t\tpage._set(\"selected\", false);\r\n\r\n\t\t\tif(page._wrapper){\t// false if not started yet\r\n\t\t\t\tdomClass.replace(page._wrapper, \"dijitHidden\", \"dijitVisible\");\r\n\t\t\t}\r\n\r\n\t\t\tpage.onHide && page.onHide();\r\n\t\t},\r\n\r\n\t\tcloseChild: function(/*dijit/_WidgetBase*/ page){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCallback when user clicks the [X] to remove a page.\r\n\t\t\t//\t\tIf onClose() returns true then remove and destroy the child.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tvar remove = page.onClose && page.onClose(this, page);\r\n\t\t\tif(remove){\r\n\t\t\t\tthis.removeChild(page);\r\n\t\t\t\t// makes sure we can clean up executeScripts in ContentPane onUnLoad\r\n\t\t\t\tpage.destroyRecursive();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tdestroyDescendants: function(/*Boolean*/ preserveDom){\r\n\t\t\tthis._descendantsBeingDestroyed = true;\r\n\t\t\tthis.selectedChildWidget = undefined;\r\n\t\t\tarray.forEach(this.getChildren(), function(child){\r\n\t\t\t\tif(!preserveDom){\r\n\t\t\t\t\tthis.removeChild(child);\r\n\t\t\t\t}\r\n\t\t\t\tchild.destroyRecursive(preserveDom);\r\n\t\t\t}, this);\r\n\t\t\tthis._descendantsBeingDestroyed = false;\r\n\t\t}\r\n\t});\r\n\r\n\tStackContainer.ChildWidgetProperties = {\r\n\t\t// summary:\r\n\t\t//\t\tThese properties can be specified for the children of a StackContainer.\r\n\r\n\t\t// selected: Boolean\r\n\t\t//\t\tSpecifies that this widget should be the initially displayed pane.\r\n\t\t//\t\tNote: to change the selected child use `dijit/layout/StackContainer.selectChild`\r\n\t\tselected: false,\r\n\r\n\t\t// disabled: Boolean\r\n\t\t//\t\tSpecifies that the button to select this pane should be disabled.\r\n\t\t//\t\tDoesn't affect programmatic selection of the pane, nor does it deselect the pane if it is currently selected.\r\n\t\tdisabled: false,\r\n\r\n\t\t// closable: Boolean\r\n\t\t//\t\tTrue if user can close (destroy) this child, such as (for example) clicking the X on the tab.\r\n\t\tclosable: false,\r\n\r\n\t\t// iconClass: String\r\n\t\t//\t\tCSS Class specifying icon to use in label associated with this pane.\r\n\t\ticonClass: \"dijitNoIcon\",\r\n\r\n\t\t// showTitle: Boolean\r\n\t\t//\t\tWhen true, display title of this widget as tab label etc., rather than just using\r\n\t\t//\t\ticon specified in iconClass\r\n\t\tshowTitle: true\r\n\t};\r\n\r\n\t// Since any widget can be specified as a StackContainer child, mix them\r\n\t// into the base widget class.  (This is a hack, but it's effective.)\r\n\t// This is for the benefit of the parser.   Remove for 2.0.  Also, hide from doc viewer.\r\n\tlang.extend(_WidgetBase, /*===== {} || =====*/ StackContainer.ChildWidgetProperties);\r\n\r\n\treturn StackContainer;\r\n});\r\n"]}