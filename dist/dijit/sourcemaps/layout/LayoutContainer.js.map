{"version":3,"sources":["layout/LayoutContainer.js"],"names":["define","array","declare","domClass","domStyle","lang","_WidgetBase","_LayoutWidget","layoutUtils","LayoutContainer","design","baseClass","startup","this","_started","forEach","getChildren","_setupChild","inherited","arguments","child","region","add","domNode","_getOrderedChildren","wrappers","map","idx","pane","weight","Infinity","layoutPriority","test","sort","a","b","aw","bw","i","length","w","layout","layoutChildren","_contentBox","addChild","insertIndex","removeChild","remove","set","top","bottom","left","right","position","ChildWidgetProperties","layoutAlign","extend"],"mappings":";;;;;;;AAAAA,QACC,mBACA,qBACA,iBACA,iBACA,kBACA,iBACA,kBACA,WACE,SAASC,EAAOC,EAASC,EAAUC,EAAUC,EAAMC,EAAaC,EAAeC,GAKjF,IAAIC,EAAkBP,EAAQ,+BAAgCK,GAkC7DG,OAAQ,WAERC,UAAW,uBAEXC,QAAS,WACLC,KAAKC,WAGRb,EAAMc,QAAQF,KAAKG,cAAeH,KAAKI,YAAaJ,MACpDA,KAAKK,UAAUC,aAGhBF,YAAa,SAA+BG,GAG3CP,KAAKK,UAAUC,WAEFC,EAAMC,QAElBlB,EAASmB,IAAIF,EAAMG,QAASV,KAAKF,UAAY,SAI/Ca,oBAAqB,WAKpB,IAAIC,EAAWxB,EAAMyB,IAAIb,KAAKG,cAAe,SAASI,EAAOO,GAC5D,OACCC,KAAMR,EACNS,QACiB,UAAhBT,EAAMC,OAAqBS,EAAAA,EAAW,EACtCV,EAAMW,gBACU,WAAflB,KAAKH,OAAsB,GAAK,IAAM,aAAasB,KAAKZ,EAAMC,QAAU,GAAK,GAC9EM,KAGAd,MAWH,OAVAY,EAASQ,KAAK,SAASC,EAAGC,GAEzB,IADA,IAAIC,EAAKF,EAAEL,OAAQQ,EAAKF,EAAEN,OAClBS,EAAI,EAAGA,EAAIF,EAAGG,OAAQD,IAC7B,GAAGF,EAAGE,IAAMD,EAAGC,GACd,OAAOF,EAAGE,GAAKD,EAAGC,GAGpB,OAAO,IAGDrC,EAAMyB,IAAID,EAAU,SAASe,GAAI,OAAOA,EAAEZ,QAGlDa,OAAQ,WACPjC,EAAYkC,eAAe7B,KAAKU,QAASV,KAAK8B,YAAa9B,KAAKW,wBAGjEoB,SAAU,SAA+BxB,EAAoByB,GAC5DhC,KAAKK,UAAUC,WACZN,KAAKC,UACPD,KAAK4B,UAIPK,YAAa,SAA+B1B,GAC3CP,KAAKK,UAAUC,WACZN,KAAKC,UACPD,KAAK4B,SAKNtC,EAAS4C,OAAO3B,EAAMG,QAASV,KAAKF,UAAY,QAChDP,EAAS4C,IAAI5B,EAAMG,SAClB0B,IAAK,OACLC,OAAQ,OACRC,KAAM,OACNC,MAAO,OACPC,SAAU,WAEXjD,EAAS4C,IAAI5B,EAAMG,QAAS,aAAaS,KAAKZ,EAAMC,QAAU,QAAU,SAAU,WA4BpF,OAxBAZ,EAAgB6C,uBAOfjC,OAAQ,GAIRkC,YAAa,GAKbxB,eAAgB,GAMjB1B,EAAKmD,OAAOlD,EAAmCG,EAAgB6C,uBAExD7C","file":"../../layout/LayoutContainer.js","sourcesContent":["define([\r\n\t\"dojo/_base/array\",\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom-class\",\r\n\t\"dojo/dom-style\",\r\n\t\"dojo/_base/lang\",\r\n\t\"../_WidgetBase\",\r\n\t\"./_LayoutWidget\",\r\n\t\"./utils\" // layoutUtils.layoutChildren\r\n], function(array, declare, domClass, domStyle, lang, _WidgetBase, _LayoutWidget, layoutUtils){\r\n\r\n\t// module:\r\n\t//\t\tdijit/layout/LayoutContainer\r\n\r\n\tvar LayoutContainer = declare(\"dijit.layout.LayoutContainer\", _LayoutWidget, {\r\n\t\t// summary:\r\n\t\t//\t\tA LayoutContainer is a box with a specified size, such as style=\"width: 500px; height: 500px;\",\r\n\t\t//\t\tthat contains a child widget marked region=\"center\" and optionally children widgets marked\r\n\t\t//\t\tregion equal to \"top\", \"bottom\", \"leading\", \"trailing\", \"left\" or \"right\".\r\n\t\t//\t\tChildren along the edges will be laid out according to width or height dimensions. The remaining\r\n\t\t//\t\tspace is designated for the center region.\r\n\t\t//\r\n\t\t//\t\tThe outer size must be specified on the LayoutContainer node.  Width must be specified for the sides\r\n\t\t//\t\tand height for the top and bottom, respectively.  No dimensions should be specified on the center;\r\n\t\t//\t\tit will fill the remaining space.  Regions named \"leading\" and \"trailing\" may be used just like\r\n\t\t//\t\t\"left\" and \"right\" except that they will be reversed in right-to-left environments.\r\n\t\t//\r\n\t\t//\t\tFor complex layouts, multiple children can be specified for a single region.   In this case, the\r\n\t\t//\t\tlayoutPriority flag on the children determines which child is closer to the edge (low layoutPriority)\r\n\t\t//\t\tand which child is closer to the center (high layoutPriority).   layoutPriority can also be used\r\n\t\t//\t\tinstead of the design attribute to control layout precedence of horizontal vs. vertical panes.\r\n\t\t//\r\n\t\t//\t\tSee `LayoutContainer.ChildWidgetProperties` for details on the properties that can be set on\r\n\t\t//\t\tchildren of a `LayoutContainer`.\r\n\t\t//\r\n\t\t//\t\tIf layoutPriority is not set, lays out each child in the natural order the children occur in.\r\n\t\t//\t\tBasically each child is laid out into the \"remaining space\", where \"remaining space\" is initially\r\n\t\t//\t\tthe content area of this widget, but is reduced to a smaller rectangle each time a child is added.\r\n\r\n\t\t// design: String\r\n\t\t//\t\tWhich design is used for the layout:\r\n\t\t//\r\n\t\t//\t\t- \"headline\" (default) where the top and bottom extend the full width of the container\r\n\t\t//\t\t- \"sidebar\" where the left and right sides extend from top to bottom.\r\n\t\t//\r\n\t\t//\t\tHowever, a `layoutPriority` setting on child panes overrides the `design` attribute on the parent.\r\n\t\t//\t\tIn other words, if the top and bottom sections have a lower `layoutPriority` than the left and right\r\n\t\t//\t\tpanes, the top and bottom panes will extend the entire width of the box.\r\n\t\tdesign: \"headline\",\r\n\r\n\t\tbaseClass: \"dijitLayoutContainer\",\r\n\r\n\t\tstartup: function(){\r\n\t\t\tif(this._started){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tarray.forEach(this.getChildren(), this._setupChild, this);\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\t_setupChild: function(/*dijit/_WidgetBase*/ child){\r\n\t\t\t// Override _LayoutWidget._setupChild().\r\n\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\tvar region = child.region;\r\n\t\t\tif(region){\r\n\t\t\t\tdomClass.add(child.domNode, this.baseClass + \"Pane\");\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_getOrderedChildren: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturn list of my children in the order that I want layoutChildren()\r\n\t\t\t//\t\tto process them (i.e. from the outside to the inside)\r\n\r\n\t\t\tvar wrappers = array.map(this.getChildren(), function(child, idx){\r\n\t\t\t\treturn {\r\n\t\t\t\t\tpane: child,\r\n\t\t\t\t\tweight: [\r\n\t\t\t\t\t\tchild.region == \"center\" ? Infinity : 0,\r\n\t\t\t\t\t\tchild.layoutPriority,\r\n\t\t\t\t\t\t(this.design == \"sidebar\" ? 1 : -1) * (/top|bottom/.test(child.region) ? 1 : -1),\r\n\t\t\t\t\t\tidx\r\n\t\t\t\t\t]\r\n\t\t\t\t};\r\n\t\t\t}, this);\r\n\t\t\twrappers.sort(function(a, b){\r\n\t\t\t\tvar aw = a.weight, bw = b.weight;\r\n\t\t\t\tfor(var i = 0; i < aw.length; i++){\r\n\t\t\t\t\tif(aw[i] != bw[i]){\r\n\t\t\t\t\t\treturn aw[i] - bw[i];\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn 0;\r\n\t\t\t});\r\n\r\n\t\t\treturn array.map(wrappers, function(w){ return w.pane; });\r\n\t\t},\r\n\r\n\t\tlayout: function(){\r\n\t\t\tlayoutUtils.layoutChildren(this.domNode, this._contentBox, this._getOrderedChildren());\r\n\t\t},\r\n\r\n\t\taddChild: function(/*dijit/_WidgetBase*/ child, /*Integer?*/ insertIndex){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tif(this._started){\r\n\t\t\t\tthis.layout();\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tremoveChild: function(/*dijit/_WidgetBase*/ child){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tif(this._started){\r\n\t\t\t\tthis.layout();\r\n\t\t\t}\r\n\r\n\t\t\t// Clean up whatever style changes we made to the child pane.\r\n\t\t\t// Unclear how height and width should be handled.\r\n\t\t\tdomClass.remove(child.domNode, this.baseClass + \"Pane\");\r\n\t\t\tdomStyle.set(child.domNode, {\r\n\t\t\t\ttop: \"auto\",\r\n\t\t\t\tbottom: \"auto\",\r\n\t\t\t\tleft: \"auto\",\r\n\t\t\t\tright: \"auto\",\r\n\t\t\t\tposition: \"static\"\r\n\t\t\t});\r\n\t\t\tdomStyle.set(child.domNode, /top|bottom/.test(child.region) ? \"width\" : \"height\", \"auto\");\r\n\t\t}\r\n\t});\r\n\r\n\tLayoutContainer.ChildWidgetProperties = {\r\n\t\t// summary:\r\n\t\t//\t\tThese properties can be specified for the children of a LayoutContainer.\r\n\r\n\t\t// region: [const] String\r\n\t\t//\t\tValues: \"top\", \"bottom\", \"leading\", \"trailing\", \"left\", \"right\", \"center\".\r\n\t\t//\t\tSee the `dijit/layout/LayoutContainer` description for details.\r\n\t\tregion: '',\r\n\r\n\t\t// layoutAlign: [const deprecated] String\r\n\t\t//\t\tSynonym for region, except using \"client\" instead of \"center\".  Deprecated; use region instead.\r\n\t\tlayoutAlign: '',\r\n\r\n\t\t// layoutPriority: [const] Number\r\n\t\t//\t\tChildren with a higher layoutPriority will be placed closer to the LayoutContainer center,\r\n\t\t//\t\tbetween children with a lower layoutPriority.\r\n\t\tlayoutPriority: 0\r\n\t};\r\n\r\n\t// Since any widget can be specified as a LayoutContainer child, mix it\r\n\t// into the base widget class.  (This is a hack, but it's effective.)\r\n\t// This is for the benefit of the parser.   Remove for 2.0.  Also, hide from doc viewer.\r\n\tlang.extend(_WidgetBase, /*===== {} || =====*/ LayoutContainer.ChildWidgetProperties);\r\n\r\n\treturn LayoutContainer;\r\n});\r\n"]}