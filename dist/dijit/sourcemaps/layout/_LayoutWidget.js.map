{"version":3,"sources":["layout/_LayoutWidget.js"],"names":["define","lang","_Widget","_Container","_Contained","Viewport","declare","domClass","domGeometry","domStyle","baseClass","isLayoutContainer","_setTitleAttr","buildRendering","this","inherited","arguments","add","domNode","startup","_started","parent","getParent","resize","own","on","hitch","changeSize","resultSize","node","setMarginBox","mb","mixin","getMarginBox","cs","getComputedStyle","me","getMarginExtents","be","getBorderExtents","bb","_borderBox","w","h","pe","getPadExtents","_contentBox","l","toPixelValue","paddingLeft","t","paddingTop","layout","_setupChild","child","cls","addChild","insertIndex","removeChild","remove"],"mappings":";;;;;;;AAAAA,QACC,kBACA,aACA,gBACA,gBACA,cACA,qBACA,iBACA,oBACA,kBACE,SAASC,EAAMC,EAASC,EAAYC,EAAYC,EAClDC,EAASC,EAAUC,EAAaC,GAMhC,OAAOH,EAAQ,8BAA+BJ,EAASC,EAAYC,IASlEM,UAAW,uBAKXC,mBAAmB,EAKnBC,cAAe,KAEfC,eAAgB,WACfC,KAAKC,UAAUC,WACfT,EAASU,IAAIH,KAAKI,QAAS,mBAG5BC,QAAS,WAYR,IAAGL,KAAKM,SAAR,CAIAN,KAAKC,UAAUC,WAGf,IAAIK,EAASP,KAAKQ,WAAaR,KAAKQ,YAC/BD,GAAUA,EAAOV,oBAGrBG,KAAKS,SAKLT,KAAKU,IAAInB,EAASoB,GAAG,SAAUxB,EAAKyB,MAAMZ,KAAM,eAIlDS,OAAQ,SAASI,EAAYC,GAqC5B,IAAIC,EAAOf,KAAKI,QAGbS,GACFnB,EAAYsB,aAAaD,EAAMF,GAMhC,IAAII,EAAKH,MACT3B,EAAK+B,MAAMD,EAAIJ,OACT,MAAOI,GAAS,MAAOA,IAC5BA,EAAK9B,EAAK+B,MAAMxB,EAAYyB,aAAaJ,GAAOE,IAKjD,IAAIG,EAAKzB,EAAS0B,iBAAiBN,GAC/BO,EAAK5B,EAAY6B,iBAAiBR,EAAMK,GACxCI,EAAK9B,EAAY+B,iBAAiBV,EAAMK,GACxCM,EAAM1B,KAAK2B,YACdC,EAAGX,EAAGW,GAAKN,EAAGM,EAAIJ,EAAGI,GACrBC,EAAGZ,EAAGY,GAAKP,EAAGO,EAAIL,EAAGK,IAElBC,EAAKpC,EAAYqC,cAAchB,EAAMK,GACzCpB,KAAKgC,aACJC,EAAGtC,EAASuC,aAAanB,EAAMK,EAAGe,aAClCC,EAAGzC,EAASuC,aAAanB,EAAMK,EAAGiB,YAClCT,EAAGF,EAAGE,EAAIE,EAAGF,EACbC,EAAGH,EAAGG,EAAIC,EAAGD,GAId7B,KAAKsC,UAGNA,OAAQ,aAWRC,YAAa,SAA8BC,GAM1C,IAAIC,EAAMzC,KAAKJ,UAAY,WACvB4C,EAAM5C,UAAYI,KAAKJ,UAAY,IAAM4C,EAAM5C,UAAY,IAC/DH,EAASU,IAAIqC,EAAMpC,QAASqC,IAG7BC,SAAU,SAA+BF,EAAoBG,GAE5D3C,KAAKC,UAAUC,WACZF,KAAKM,UACPN,KAAKuC,YAAYC,IAInBI,YAAa,SAA+BJ,GAE3C,IAAIC,EAAMzC,KAAKJ,UAAY,UACtB4C,EAAM5C,UACR,IAAMI,KAAKJ,UAAY,IAAM4C,EAAM5C,UAAY,IAClDH,EAASoD,OAAOL,EAAMpC,QAASqC,GAE/BzC,KAAKC,UAAUC","file":"../../layout/_LayoutWidget.js","sourcesContent":["define([\r\n\t\"dojo/_base/lang\", // lang.mixin\r\n\t\"../_Widget\",\r\n\t\"../_Container\",\r\n\t\"../_Contained\",\r\n\t\"../Viewport\",\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom-class\", // domClass.add domClass.remove\r\n\t\"dojo/dom-geometry\", // domGeometry.marginBox\r\n\t\"dojo/dom-style\" // domStyle.getComputedStyle\r\n], function(lang, _Widget, _Container, _Contained, Viewport,\r\n\tdeclare, domClass, domGeometry, domStyle){\r\n\r\n\t// module:\r\n\t//\t\tdijit/layout/_LayoutWidget\r\n\r\n\r\n\treturn declare(\"dijit.layout._LayoutWidget\", [_Widget, _Container, _Contained], {\r\n\t\t// summary:\r\n\t\t//\t\tBase class for a _Container widget which is responsible for laying out its children.\r\n\t\t//\t\tWidgets which mixin this code must define layout() to manage placement and sizing of the children.\r\n\r\n\t\t// baseClass: [protected extension] String\r\n\t\t//\t\tThis class name is applied to the widget's domNode\r\n\t\t//\t\tand also may be used to generate names for sub nodes,\r\n\t\t//\t\tfor example dijitTabContainer-content.\r\n\t\tbaseClass: \"dijitLayoutContainer\",\r\n\r\n\t\t// isLayoutContainer: [protected] Boolean\r\n\t\t//\t\tIndicates that this widget is going to call resize() on its\r\n\t\t//\t\tchildren widgets, setting their size, when they become visible.\r\n\t\tisLayoutContainer: true,\r\n\r\n\t\t// Cancel _WidgetBase's _setTitleAttr because we don't want the title property (used to specify\r\n\t\t// tab labels) to be set as an attribute on this.domNode... otherwise a tooltip shows up over the\r\n\t\t// entire widget.\r\n\t\t_setTitleAttr: null,\r\n\r\n\t\tbuildRendering: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tdomClass.add(this.domNode, \"dijitContainer\");\r\n\t\t},\r\n\r\n\t\tstartup: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled after all the widgets have been instantiated and their\r\n\t\t\t//\t\tdom nodes have been inserted somewhere under <body>.\r\n\t\t\t//\r\n\t\t\t//\t\tWidgets should override this method to do any initialization\r\n\t\t\t//\t\tdependent on other widgets existing, and then call\r\n\t\t\t//\t\tthis superclass method to finish things off.\r\n\t\t\t//\r\n\t\t\t//\t\tstartup() in subclasses shouldn't do anything\r\n\t\t\t//\t\tsize related because the size of the widget hasn't been set yet.\r\n\r\n\t\t\tif(this._started){ return; }\r\n\r\n\t\t\t// Need to call inherited first - so that child widgets get started\r\n\t\t\t// up correctly\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\t// If I am a not being controlled by a parent layout widget...\r\n\t\t\tvar parent = this.getParent && this.getParent();\r\n\t\t\tif(!(parent && parent.isLayoutContainer)){\r\n\t\t\t\t// Do recursive sizing and layout of all my descendants\r\n\t\t\t\t// (passing in no argument to resize means that it has to glean the size itself)\r\n\t\t\t\tthis.resize();\r\n\r\n\t\t\t\t// Since my parent isn't a layout container, and my style *may be* width=height=100%\r\n\t\t\t\t// or something similar (either set directly or via a CSS class),\r\n\t\t\t\t// monitor when viewport size changes so that I can re-layout.\r\n\t\t\t\tthis.own(Viewport.on(\"resize\", lang.hitch(this, \"resize\")));\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tresize: function(changeSize, resultSize){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCall this to resize a widget, or after its size has changed.\r\n\t\t\t// description:\r\n\t\t\t//\t\t####Change size mode:\r\n\t\t\t//\r\n\t\t\t//\t\tWhen changeSize is specified, changes the marginBox of this widget\r\n\t\t\t//\t\tand forces it to re-layout its contents accordingly.\r\n\t\t\t//\t\tchangeSize may specify height, width, or both.\r\n\t\t\t//\r\n\t\t\t//\t\tIf resultSize is specified it indicates the size the widget will\r\n\t\t\t//\t\tbecome after changeSize has been applied.\r\n\t\t\t//\r\n\t\t\t//\t\t####Notification mode:\r\n\t\t\t//\r\n\t\t\t//\t\tWhen changeSize is null, indicates that the caller has already changed\r\n\t\t\t//\t\tthe size of the widget, or perhaps it changed because the browser\r\n\t\t\t//\t\twindow was resized.  Tells widget to re-layout its contents accordingly.\r\n\t\t\t//\r\n\t\t\t//\t\tIf resultSize is also specified it indicates the size the widget has\r\n\t\t\t//\t\tbecome.\r\n\t\t\t//\r\n\t\t\t//\t\tIn either mode, this method also:\r\n\t\t\t//\r\n\t\t\t//\t\t1. Sets this._borderBox and this._contentBox to the new size of\r\n\t\t\t//\t\t\tthe widget.  Queries the current domNode size if necessary.\r\n\t\t\t//\t\t2. Calls layout() to resize contents (and maybe adjust child widgets).\r\n\t\t\t// changeSize: Object?\r\n\t\t\t//\t\tSets the widget to this margin-box size and position.\r\n\t\t\t//\t\tMay include any/all of the following properties:\r\n\t\t\t//\t|\t{w: int, h: int, l: int, t: int}\r\n\t\t\t// resultSize: Object?\r\n\t\t\t//\t\tThe margin-box size of this widget after applying changeSize (if\r\n\t\t\t//\t\tchangeSize is specified).  If caller knows this size and\r\n\t\t\t//\t\tpasses it in, we don't need to query the browser to get the size.\r\n\t\t\t//\t|\t{w: int, h: int}\r\n\r\n\t\t\tvar node = this.domNode;\r\n\r\n\t\t\t// set margin box size, unless it wasn't specified, in which case use current size\r\n\t\t\tif(changeSize){\r\n\t\t\t\tdomGeometry.setMarginBox(node, changeSize);\r\n\t\t\t}\r\n\r\n\t\t\t// If either height or width wasn't specified by the user, then query node for it.\r\n\t\t\t// But note that setting the margin box and then immediately querying dimensions may return\r\n\t\t\t// inaccurate results, so try not to depend on it.\r\n\t\t\tvar mb = resultSize || {};\r\n\t\t\tlang.mixin(mb, changeSize || {});\t// changeSize overrides resultSize\r\n\t\t\tif( !(\"h\" in mb) || !(\"w\" in mb) ){\r\n\t\t\t\tmb = lang.mixin(domGeometry.getMarginBox(node), mb);\t// just use domGeometry.marginBox() to fill in missing values\r\n\t\t\t}\r\n\r\n\t\t\t// Compute and save the size of my border box and content box\r\n\t\t\t// (w/out calling domGeometry.getContentBox() since that may fail if size was recently set)\r\n\t\t\tvar cs = domStyle.getComputedStyle(node);\r\n\t\t\tvar me = domGeometry.getMarginExtents(node, cs);\r\n\t\t\tvar be = domGeometry.getBorderExtents(node, cs);\r\n\t\t\tvar bb = (this._borderBox = {\r\n\t\t\t\tw: mb.w - (me.w + be.w),\r\n\t\t\t\th: mb.h - (me.h + be.h)\r\n\t\t\t});\r\n\t\t\tvar pe = domGeometry.getPadExtents(node, cs);\r\n\t\t\tthis._contentBox = {\r\n\t\t\t\tl: domStyle.toPixelValue(node, cs.paddingLeft),\r\n\t\t\t\tt: domStyle.toPixelValue(node, cs.paddingTop),\r\n\t\t\t\tw: bb.w - pe.w,\r\n\t\t\t\th: bb.h - pe.h\r\n\t\t\t};\r\n\r\n\t\t\t// Callback for widget to adjust size of its children\r\n\t\t\tthis.layout();\r\n\t\t},\r\n\r\n\t\tlayout: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tWidgets override this method to size and position their contents/children.\r\n\t\t\t//\t\tWhen this is called this._contentBox is guaranteed to be set (see resize()).\r\n\t\t\t//\r\n\t\t\t//\t\tThis is called after startup(), and also when the widget's size has been\r\n\t\t\t//\t\tchanged.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected extension\r\n\t\t},\r\n\r\n\t\t_setupChild: function(/*dijit/_WidgetBase*/child){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCommon setup for initial children and children which are added after startup\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected extension\r\n\r\n\t\t\tvar cls = this.baseClass + \"-child \"\r\n\t\t\t\t+ (child.baseClass ? this.baseClass + \"-\" + child.baseClass : \"\");\r\n\t\t\tdomClass.add(child.domNode, cls);\r\n\t\t},\r\n\r\n\t\taddChild: function(/*dijit/_WidgetBase*/ child, /*Integer?*/ insertIndex){\r\n\t\t\t// Overrides _Container.addChild() to call _setupChild()\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tif(this._started){\r\n\t\t\t\tthis._setupChild(child);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tremoveChild: function(/*dijit/_WidgetBase*/ child){\r\n\t\t\t// Overrides _Container.removeChild() to remove class added by _setupChild()\r\n\t\t\tvar cls = this.baseClass + \"-child\"\r\n\t\t\t\t\t+ (child.baseClass ?\r\n\t\t\t\t\t\t\" \" + this.baseClass + \"-\" + child.baseClass : \"\");\r\n\t\t\tdomClass.remove(child.domNode, cls);\r\n\r\n\t\t\tthis.inherited(arguments);\r\n\t\t}\r\n\t});\r\n});\r\n"]}