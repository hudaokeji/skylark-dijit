{"version":3,"sources":["InlineEditBox.js"],"names":["define","require","array","aspect","declare","domAttr","domClass","domConstruct","domStyle","i18n","kernel","keys","lang","on","has","when","a11yclick","fm","_Widget","_TemplatedMixin","_WidgetsInTemplateMixin","_Container","Button","_TextBoxMixin","TextBox","template","InlineEditor","templateString","contextRequire","postMixInProperties","this","inherited","arguments","messages","getLocalization","forEach","prop","buildRendering","Cls","editor","getObject","srcStyle","sourceStyle","editStyle","lineHeight","destStyle","getComputedStyle","domNode","textStyle","style","width","inlineEditBox","display","Number","editorParams","delegate","dir","textDir","editWidget","editorPlaceholder","autoSave","saveButton","destroy","cancelButton","buttonContainer","postCreate","ew","own","after","hitch","set","startup","_onIntermediateChange","getValue","_resetValue","enableSave","String","get","_onKeyDown","e","editing","altKey","ctrlKey","keyCode","ESCAPE","stopPropagation","preventDefault","cancel","ENTER","target","tagName","_onChange","_onBlur","save","focus","displayNode","isValid","focusNode","_onFocusNode","defer","selectInputText","InlineEditBox","buttonSave","buttonCancel","renderAsHtml","editorWrapper","disabled","onChange","onCancel","value","noValueIndicator","constructor","srcNodeRef","setAttribute","getAttribute","params","trim","innerHTML","innerText","textContent","add","setDisabled","deprecated","_setDisabledAttr","removeAttribute","toggle","_set","_onMouseOver","_onMouseOut","remove","_onClick","edit","_savedTabIndex","wrapperWidget","placeholder","create","Ewc","tabIndex","_started","ww","visibility","self","onLoadDeferred","_destroyed","_showText","setValue","val","_setValueAttr","renderVal","replace","applyTextDir","_InlineEditor"],"mappings":"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","file":"../InlineEditBox.js","sourcesContent":["define([\r\n\t\"require\",\r\n\t\"dojo/_base/array\", // array.forEach\r\n\t\"dojo/aspect\",\r\n\t\"dojo/_base/declare\", // declare\r\n\t\"dojo/dom-attr\", // domAttr.set domAttr.get\r\n\t\"dojo/dom-class\", // domClass.add domClass.remove domClass.toggle\r\n\t\"dojo/dom-construct\", // domConstruct.create domConstruct.destroy\r\n\t\"dojo/dom-style\", // domStyle.getComputedStyle domStyle.set domStyle.get\r\n\t\"dojo/i18n\", // i18n.getLocalization\r\n\t\"dojo/_base/kernel\", // kernel.deprecated\r\n\t\"dojo/keys\", // keys.ENTER keys.ESCAPE\r\n\t\"dojo/_base/lang\", // lang.getObject\r\n\t\"dojo/on\",\r\n\t\"dojo/sniff\", // has(\"ie\")\r\n\t\"dojo/when\",\r\n\t\"./a11yclick\",\r\n\t\"./focus\",\r\n\t\"./_Widget\",\r\n\t\"./_TemplatedMixin\",\r\n\t\"./_WidgetsInTemplateMixin\",\r\n\t\"./_Container\",\r\n\t\"./form/Button\",\r\n\t\"./form/_TextBoxMixin\",\r\n\t\"./form/TextBox\",\r\n\t\"dojo/text!./templates/InlineEditBox.html\",\r\n\t\"dojo/i18n!./nls/common\"\r\n], function(require, array, aspect, declare, domAttr, domClass, domConstruct, domStyle, i18n, kernel, keys, lang, on, has, when, a11yclick, fm, _Widget, _TemplatedMixin, _WidgetsInTemplateMixin, _Container, Button, _TextBoxMixin, TextBox, template){\r\n\r\n\t// module:\r\n\t//\t\tdijit/InlineEditBox\r\n\r\n\tvar InlineEditor = declare(\"dijit._InlineEditor\", [_Widget, _TemplatedMixin, _WidgetsInTemplateMixin], {\r\n\t\t// summary:\r\n\t\t//\t\tInternal widget used by InlineEditBox, displayed when in editing mode\r\n\t\t//\t\tto display the editor and maybe save/cancel buttons.  Calling code should\r\n\t\t//\t\tconnect to save/cancel methods to detect when editing is finished\r\n\t\t//\r\n\t\t//\t\tHas mainly the same parameters as InlineEditBox, plus these values:\r\n\t\t//\r\n\t\t// style: Object\r\n\t\t//\t\tSet of CSS attributes of display node, to replicate in editor\r\n\t\t//\r\n\t\t// value: String\r\n\t\t//\t\tValue as an HTML string or plain text string, depending on renderAsHTML flag\r\n\r\n\t\ttemplateString: template,\r\n\r\n\t\tcontextRequire: require,\r\n\r\n\t\tpostMixInProperties: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tthis.messages = i18n.getLocalization(\"dijit\", \"common\", this.lang);\r\n\t\t\tarray.forEach([\"buttonSave\", \"buttonCancel\"], function(prop){\r\n\t\t\t\tif(!this[prop]){\r\n\t\t\t\t\tthis[prop] = this.messages[prop];\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t},\r\n\r\n\t\tbuildRendering: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\t// Create edit widget in place in the template\r\n\t\t\t// TODO: remove getObject() for 2.0\r\n\t\t\tvar Cls = typeof this.editor == \"string\" ? (lang.getObject(this.editor) || require(this.editor)) : this.editor;\r\n\r\n\t\t\t// Copy the style from the source\r\n\t\t\t// Don't copy ALL properties though, just the necessary/applicable ones.\r\n\t\t\t// wrapperStyle/destStyle code is to workaround IE bug where getComputedStyle().fontSize\r\n\t\t\t// is a relative value like 200%, rather than an absolute value like 24px, and\r\n\t\t\t// the 200% can refer *either* to a setting on the node or it's ancestor (see #11175)\r\n\t\t\tvar srcStyle = this.sourceStyle,\r\n\t\t\t\teditStyle = \"line-height:\" + srcStyle.lineHeight + \";\",\r\n\t\t\t\tdestStyle = domStyle.getComputedStyle(this.domNode);\r\n\t\t\tarray.forEach([\"Weight\", \"Family\", \"Size\", \"Style\"], function(prop){\r\n\t\t\t\tvar textStyle = srcStyle[\"font\" + prop],\r\n\t\t\t\t\twrapperStyle = destStyle[\"font\" + prop];\r\n\t\t\t\tif(wrapperStyle != textStyle){\r\n\t\t\t\t\teditStyle += \"font-\" + prop + \":\" + srcStyle[\"font\" + prop] + \";\";\r\n\t\t\t\t}\r\n\t\t\t}, this);\r\n\t\t\tarray.forEach([\"marginTop\", \"marginBottom\", \"marginLeft\", \"marginRight\", \"position\", \"left\", \"top\", \"right\", \"bottom\", \"float\", \"clear\", \"display\"], function(prop){\r\n\t\t\t\tthis.domNode.style[prop] = srcStyle[prop];\r\n\t\t\t}, this);\r\n\t\t\tvar width = this.inlineEditBox.width;\r\n\t\t\tif(width == \"100%\"){\r\n\t\t\t\t// block mode\r\n\t\t\t\teditStyle += \"width:100%;\";\r\n\t\t\t\tthis.domNode.style.display = \"block\";\r\n\t\t\t}else{\r\n\t\t\t\t// inline-block mode\r\n\t\t\t\teditStyle += \"width:\" + (width + (Number(width) == width ? \"px\" : \"\")) + \";\";\r\n\t\t\t}\r\n\t\t\tvar editorParams = lang.delegate(this.inlineEditBox.editorParams, {\r\n\t\t\t\tstyle: editStyle,\r\n\t\t\t\tdir: this.dir,\r\n\t\t\t\tlang: this.lang,\r\n\t\t\t\ttextDir: this.textDir\r\n\t\t\t});\r\n\t\t\t// set the value in onLoadDeferred instead so the widget has time to finish initializing\r\n\t\t\t//editorParams[(\"displayedValue\" in Cls.prototype || \"_setDisplayedValueAttr\" in Cls.prototype) ? \"displayedValue\" : \"value\"] = this.value;\r\n\t\t\tthis.editWidget = new Cls(editorParams, this.editorPlaceholder);\r\n\r\n\t\t\tif(this.inlineEditBox.autoSave){\r\n\t\t\t\t// Remove the save/cancel buttons since saving is done by simply tabbing away or\r\n\t\t\t\t// selecting a value from the drop down list\r\n\t\t\t\tthis.saveButton.destroy();\r\n\t\t\t\tthis.cancelButton.destroy();\r\n\t\t\t\tthis.saveButton = this.cancelButton = null;\r\n\t\t\t\tdomConstruct.destroy(this.buttonContainer);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tpostCreate: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\tvar ew = this.editWidget;\r\n\r\n\t\t\tif(this.inlineEditBox.autoSave){\r\n\t\t\t\tthis.own(\r\n\t\t\t\t\t// Selecting a value from a drop down list causes an onChange event and then we save\r\n\t\t\t\t\taspect.after(ew, \"onChange\", lang.hitch(this, \"_onChange\"), true),\r\n\r\n\t\t\t\t\t// ESC and TAB should cancel and save.\r\n\t\t\t\t\ton(ew, \"keydown\", lang.hitch(this, \"_onKeyDown\"))\r\n\t\t\t\t);\r\n\t\t\t}else{\r\n\t\t\t\t// If possible, enable/disable save button based on whether the user has changed the value\r\n\t\t\t\tif(\"intermediateChanges\" in ew){\r\n\t\t\t\t\tew.set(\"intermediateChanges\", true);\r\n\t\t\t\t\tthis.own(aspect.after(ew, \"onChange\", lang.hitch(this, \"_onIntermediateChange\"), true));\r\n\t\t\t\t\tthis.saveButton.set(\"disabled\", true);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tstartup: function(){\r\n\t\t\tthis.editWidget.startup();\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\t_onIntermediateChange: function(/*===== val =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled for editor widgets that support the intermediateChanges=true flag as a way\r\n\t\t\t//\t\tto detect when to enable/disabled the save button\r\n\t\t\tthis.saveButton.set(\"disabled\", (this.getValue() == this._resetValue) || !this.enableSave());\r\n\t\t},\r\n\r\n\t\tdestroy: function(){\r\n\t\t\tthis.editWidget.destroy(true); // let the parent wrapper widget clean up the DOM\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\tgetValue: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tReturn the [display] value of the edit widget\r\n\t\t\tvar ew = this.editWidget;\r\n\t\t\treturn String(ew.get((\"displayedValue\" in ew || \"_getDisplayedValueAttr\" in ew) ? \"displayedValue\" : \"value\"));\r\n\t\t},\r\n\r\n\t\t_onKeyDown: function(e){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHandler for keydown in the edit box in autoSave mode.\r\n\t\t\t// description:\r\n\t\t\t//\t\tFor autoSave widgets, if Esc/Enter, call cancel/save.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\r\n\t\t\tif(this.inlineEditBox.autoSave && this.inlineEditBox.editing){\r\n\t\t\t\tif(e.altKey || e.ctrlKey){\r\n\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t\t// If Enter/Esc pressed, treat as save/cancel.\r\n\t\t\t\tif(e.keyCode == keys.ESCAPE){\r\n\t\t\t\t\te.stopPropagation();\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\tthis.cancel(true); // sets editing=false which short-circuits _onBlur processing\r\n\t\t\t\t}else if(e.keyCode == keys.ENTER && e.target.tagName == \"INPUT\"){\r\n\t\t\t\t\te.stopPropagation();\r\n\t\t\t\t\te.preventDefault();\r\n\t\t\t\t\tthis._onChange(); // fire _onBlur and then save\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// _onBlur will handle TAB automatically by allowing\r\n\t\t\t\t// the TAB to change focus before we mess with the DOM: #6227\r\n\t\t\t\t// Expounding by request:\r\n\t\t\t\t//\tThe current focus is on the edit widget input field.\r\n\t\t\t\t//\tsave() will hide and destroy this widget.\r\n\t\t\t\t//\tWe want the focus to jump from the currently hidden\r\n\t\t\t\t//\tdisplayNode, but since it's hidden, it's impossible to\r\n\t\t\t\t//\tunhide it, focus it, and then have the browser focus\r\n\t\t\t\t//\taway from it to the next focusable element since each\r\n\t\t\t\t//\tof these events is asynchronous and the focus-to-next-element\r\n\t\t\t\t//\tis already queued.\r\n\t\t\t\t//\tSo we allow the browser time to unqueue the move-focus event\r\n\t\t\t\t//\tbefore we do all the hide/show stuff.\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_onBlur: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when focus moves outside the editor\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tif(this.inlineEditBox.autoSave && this.inlineEditBox.editing){\r\n\t\t\t\tif(this.getValue() == this._resetValue){\r\n\t\t\t\t\tthis.cancel(false);\r\n\t\t\t\t}else if(this.enableSave()){\r\n\t\t\t\t\tthis.save(false);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_onChange: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when the underlying widget fires an onChange event,\r\n\t\t\t//\t\tsuch as when the user selects a value from the drop down list of a ComboBox,\r\n\t\t\t//\t\twhich means that the user has finished entering the value and we should save.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\r\n\t\t\tif(this.inlineEditBox.autoSave && this.inlineEditBox.editing && this.enableSave()){\r\n\t\t\t\tfm.focus(this.inlineEditBox.displayNode); // fires _onBlur which will save the formatted value\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tenableSave: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tUser overridable function returning a Boolean to indicate\r\n\t\t\t//\t\tif the Save button should be enabled or not - usually due to invalid conditions\r\n\t\t\t// tags:\r\n\t\t\t//\t\textension\r\n\t\t\treturn this.editWidget.isValid ? this.editWidget.isValid() : true;\r\n\t\t},\r\n\r\n\t\tfocus: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tFocus the edit widget.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprotected\r\n\r\n\t\t\tthis.editWidget.focus();\r\n\r\n\t\t\tif(this.editWidget.focusNode){\r\n\t\t\t\t// IE can take 30ms to report the focus event, but focus manager needs to know before a 0ms timeout.\r\n\t\t\t\tfm._onFocusNode(this.editWidget.focusNode);\r\n\r\n\t\t\t\tif(this.editWidget.focusNode.tagName == \"INPUT\"){\r\n\t\t\t\t\tthis.defer(function(){\r\n\t\t\t\t\t\t_TextBoxMixin.selectInputText(this.editWidget.focusNode);\r\n\t\t\t\t\t});\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n\r\n\r\n\tvar InlineEditBox = declare(\"dijit.InlineEditBox\" + (has(\"dojo-bidi\") ? \"_NoBidi\" : \"\"), _Widget, {\r\n\t\t// summary:\r\n\t\t//\t\tAn element with in-line edit capabilities\r\n\t\t//\r\n\t\t// description:\r\n\t\t//\t\tBehavior for an existing node (`<p>`, `<div>`, `<span>`, etc.) so that\r\n\t\t//\t\twhen you click it, an editor shows up in place of the original\r\n\t\t//\t\ttext.  Optionally, Save and Cancel button are displayed below the edit widget.\r\n\t\t//\t\tWhen Save is clicked, the text is pulled from the edit\r\n\t\t//\t\twidget and redisplayed and the edit widget is again hidden.\r\n\t\t//\t\tBy default a plain Textarea widget is used as the editor (or for\r\n\t\t//\t\tinline values a TextBox), but you can specify an editor such as\r\n\t\t//\t\tdijit.Editor (for editing HTML) or a Slider (for adjusting a number).\r\n\t\t//\t\tAn edit widget must support the following API to be used:\r\n\t\t//\r\n\t\t//\t\t- displayedValue or value as initialization parameter,\r\n\t\t//\t\t\tand available through set('displayedValue') / set('value')\r\n\t\t//\t\t- void focus()\r\n\t\t//\t\t- DOM-node focusNode = node containing editable text\r\n\r\n\t\t// editing: [readonly] Boolean\r\n\t\t//\t\tIs the node currently in edit mode?\r\n\t\tediting: false,\r\n\r\n\t\t// autoSave: [const] Boolean\r\n\t\t//\t\tChanging the value automatically saves it; don't have to push save button\r\n\t\t//\t\t(and save button isn't even displayed)\r\n\t\tautoSave: true,\r\n\r\n\t\t// buttonSave: String\r\n\t\t//\t\tSave button label\r\n\t\tbuttonSave: \"\",\r\n\r\n\t\t// buttonCancel: String\r\n\t\t//\t\tCancel button label\r\n\t\tbuttonCancel: \"\",\r\n\r\n\t\t// renderAsHtml: Boolean\r\n\t\t//\t\tSet this to true if the specified Editor's value should be interpreted as HTML\r\n\t\t//\t\trather than plain text (ex: `dijit.Editor`)\r\n\t\trenderAsHtml: false,\r\n\r\n\t\t// editor: String|Function\r\n\t\t//\t\tMID (ex: \"dijit/form/TextBox\") or constructor for editor widget\r\n\t\teditor: TextBox,\r\n\r\n\t\t// editorWrapper: String|Function\r\n\t\t//\t\tClass name (or reference to the Class) for widget that wraps the editor widget, displaying save/cancel\r\n\t\t//\t\tbuttons.\r\n\t\teditorWrapper: InlineEditor,\r\n\r\n\t\t// editorParams: Object\r\n\t\t//\t\tSet of parameters for editor, like {required: true}\r\n\t\teditorParams: {},\r\n\r\n\t\t// disabled: Boolean\r\n\t\t//\t\tIf true, clicking the InlineEditBox to edit it will have no effect.\r\n\t\tdisabled: false,\r\n\r\n\t\tonChange: function(/*===== value =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSet this handler to be notified of changes to value.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tcallback\r\n\t\t},\r\n\r\n\t\tonCancel: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSet this handler to be notified when editing is cancelled.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tcallback\r\n\t\t},\r\n\r\n\t\t// width: String\r\n\t\t//\t\tWidth of editor.  By default it's width=100% (ie, block mode).\r\n\t\twidth: \"100%\",\r\n\r\n\t\t// value: String\r\n\t\t//\t\tThe display value of the widget in read-only mode\r\n\t\tvalue: \"\",\r\n\r\n\t\t// noValueIndicator: [const] String\r\n\t\t//\t\tThe text that gets displayed when there is no value (so that the user has a place to click to edit)\r\n\t\tnoValueIndicator: has(\"ie\") <= 6 ? // font-family needed on IE6 but it messes up IE8\r\n\t\t\t\"<span style='font-family: wingdings; text-decoration: underline;'>&#160;&#160;&#160;&#160;&#x270d;&#160;&#160;&#160;&#160;</span>\" :\r\n\t\t\t\"<span style='text-decoration: underline;'>&#160;&#160;&#160;&#160;&#x270d;&#160;&#160;&#160;&#160;</span>\", // &#160; == &nbsp;\r\n\r\n\t\tconstructor: function(/*===== params, srcNodeRef =====*/){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCreate the widget.\r\n\t\t\t// params: Object|null\r\n\t\t\t//\t\tHash of initialization parameters for widget, including scalar values (like title, duration etc.)\r\n\t\t\t//\t\tand functions, typically callbacks like onClick.\r\n\t\t\t//\t\tThe hash can contain any of the widget's properties, excluding read-only properties.\r\n\t\t\t// srcNodeRef: DOMNode|String?\r\n\t\t\t//\t\tIf a srcNodeRef (DOM node) is specified:\r\n\t\t\t//\r\n\t\t\t//\t\t- use srcNodeRef.innerHTML as my value\r\n\t\t\t//\t\t- replace srcNodeRef with my generated DOM tree\r\n\r\n\t\t\tthis.editorParams = {};\r\n\t\t},\r\n\r\n\t\tpostMixInProperties: function(){\r\n\t\t\tthis.inherited(arguments);\r\n\r\n\t\t\t// save pointer to original source node, since Widget nulls-out srcNodeRef\r\n\t\t\tthis.displayNode = this.srcNodeRef;\r\n\r\n\t\t\t// connect handlers to the display node\r\n\t\t\tthis.own(\r\n\t\t\t\ton(this.displayNode, a11yclick, lang.hitch(this, \"_onClick\")),\r\n\t\t\t\ton(this.displayNode, \"mouseover, focus\", lang.hitch(this, \"_onMouseOver\")),\r\n\t\t\t\ton(this.displayNode, \"mouseout, blur\", lang.hitch(this, \"_onMouseOut\"))\r\n\t\t\t);\r\n\r\n\t\t\tthis.displayNode.setAttribute(\"role\", \"button\");\r\n\t\t\tif(!this.displayNode.getAttribute(\"tabIndex\")){\r\n\t\t\t\tthis.displayNode.setAttribute(\"tabIndex\", 0);\r\n\t\t\t}\r\n\r\n\t\t\tif(!this.value && !(\"value\" in this.params)){ // \"\" is a good value if specified directly so check params){\r\n\t\t\t\tthis.value = lang.trim(this.renderAsHtml ? this.displayNode.innerHTML :\r\n\t\t\t\t\t(this.displayNode.innerText || this.displayNode.textContent || \"\"));\r\n\t\t\t}\r\n\t\t\tif(!this.value){\r\n\t\t\t\tthis.displayNode.innerHTML = this.noValueIndicator;\r\n\t\t\t}\r\n\r\n\t\t\tdomClass.add(this.displayNode, 'dijitInlineEditBoxDisplayMode');\r\n\t\t},\r\n\r\n\t\tsetDisabled: function(/*Boolean*/ disabled){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDeprecated.   Use set('disabled', ...) instead.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tdeprecated\r\n\t\t\tkernel.deprecated(\"dijit.InlineEditBox.setDisabled() is deprecated.  Use set('disabled', bool) instead.\", \"\", \"2.0\");\r\n\t\t\tthis.set('disabled', disabled);\r\n\t\t},\r\n\r\n\t\t_setDisabledAttr: function(/*Boolean*/ disabled){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHook to make set(\"disabled\", ...) work.\r\n\t\t\t//\t\tSet disabled state of widget.\r\n\t\t\tthis.domNode.setAttribute(\"aria-disabled\", disabled ? \"true\" : \"false\");\r\n\t\t\tif(disabled){\r\n\t\t\t\tthis.displayNode.removeAttribute(\"tabIndex\");\r\n\t\t\t}else{\r\n\t\t\t\tthis.displayNode.setAttribute(\"tabIndex\", 0);\r\n\t\t\t}\r\n\t\t\tdomClass.toggle(this.displayNode, \"dijitInlineEditBoxDisplayModeDisabled\", disabled);\r\n\t\t\tthis._set(\"disabled\", disabled);\r\n\t\t},\r\n\r\n\t\t_onMouseOver: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHandler for onmouseover and onfocus event.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tif(!this.disabled){\r\n\t\t\t\tdomClass.add(this.displayNode, \"dijitInlineEditBoxDisplayModeHover\");\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\t_onMouseOut: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHandler for onmouseout and onblur event.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tdomClass.remove(this.displayNode, \"dijitInlineEditBoxDisplayModeHover\");\r\n\t\t},\r\n\r\n\t\t_onClick: function(/*Event*/ e){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHandler for onclick event.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\t\t\tif(this.disabled){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tif(e){\r\n\t\t\t\te.stopPropagation();\r\n\t\t\t\te.preventDefault();\r\n\t\t\t}\r\n\t\t\tthis._onMouseOut();\r\n\r\n\t\t\t// Since FF gets upset if you move a node while in an event handler for that node...\r\n\t\t\tthis.defer(\"edit\");\r\n\t\t},\r\n\r\n\t\tedit: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDisplay the editor widget in place of the original (read only) markup.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\r\n\t\t\tif(this.disabled || this.editing){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis._set('editing', true);\r\n\r\n\t\t\t// save some display node values that can be restored later\r\n\t\t\tthis._savedTabIndex = domAttr.get(this.displayNode, \"tabIndex\") || \"0\";\r\n\r\n\t\t\tif(!this.wrapperWidget){\r\n\t\t\t\t// Placeholder for edit widget\r\n\t\t\t\t// Put place holder (and eventually editWidget) before the display node so that it's positioned correctly\r\n\t\t\t\t// when Calendar dropdown appears, which happens automatically on focus.\r\n\t\t\t\tvar placeholder = domConstruct.create(\"span\", null, this.domNode, \"before\");\r\n\r\n\t\t\t\t// Create the editor wrapper (the thing that holds the editor widget and the save/cancel buttons)\r\n\t\t\t\tvar Ewc = typeof this.editorWrapper == \"string\" ? lang.getObject(this.editorWrapper) : this.editorWrapper;\r\n\t\t\t\tthis.wrapperWidget = new Ewc({\r\n\t\t\t\t\tvalue: this.value,\r\n\t\t\t\t\tbuttonSave: this.buttonSave,\r\n\t\t\t\t\tbuttonCancel: this.buttonCancel,\r\n\t\t\t\t\tdir: this.dir,\r\n\t\t\t\t\tlang: this.lang,\r\n\t\t\t\t\ttabIndex: this._savedTabIndex,\r\n\t\t\t\t\teditor: this.editor,\r\n\t\t\t\t\tinlineEditBox: this,\r\n\t\t\t\t\tsourceStyle: domStyle.getComputedStyle(this.displayNode),\r\n\t\t\t\t\tsave: lang.hitch(this, \"save\"),\r\n\t\t\t\t\tcancel: lang.hitch(this, \"cancel\"),\r\n\t\t\t\t\ttextDir: this.textDir\r\n\t\t\t\t}, placeholder);\r\n\t\t\t\tif(!this.wrapperWidget._started){\r\n\t\t\t\t\tthis.wrapperWidget.startup();\r\n\t\t\t\t}\r\n\t\t\t\tif(!this._started){\r\n\t\t\t\t\tthis.startup();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tvar ww = this.wrapperWidget;\r\n\r\n\t\t\t// to avoid screen jitter, we first create the editor with position: absolute, visibility: hidden,\r\n\t\t\t// and then when it's finished rendering, we switch from display mode to editor\r\n\t\t\t// position: absolute releases screen space allocated to the display node\r\n\t\t\t// opacity:0 is the same as visibility: hidden but is still focusable\r\n\t\t\t// visibility: hidden removes focus outline\r\n\r\n\t\t\tdomClass.add(this.displayNode, \"dijitOffScreen\");\r\n\t\t\tdomClass.remove(ww.domNode, \"dijitOffScreen\");\r\n\t\t\tdomStyle.set(ww.domNode, { visibility: \"visible\" });\r\n\t\t\tdomAttr.set(this.displayNode, \"tabIndex\", \"-1\"); // needed by WebKit for TAB from editor to skip displayNode\r\n\r\n\t\t\t// After edit widget has finished initializing (in particular need to wait for dijit.Editor),\r\n\t\t\t// or immediately if there is no onLoadDeferred Deferred,\r\n\t\t\t// replace the display widget with edit widget, leaving them both displayed for a brief time so that\r\n\t\t\t// focus can be shifted without incident.\r\n\t\t\tvar ew = ww.editWidget;\r\n\t\t\tvar self = this;\r\n\t\t\twhen(ew.onLoadDeferred, lang.hitch(ww, function(){\r\n\t\t\t\t// set value again in case the edit widget's value is just now valid\r\n\t\t\t\tew.set((\"displayedValue\" in ew || \"_setDisplayedValueAttr\" in ew) ? \"displayedValue\" : \"value\", self.value);\r\n\t\t\t\tthis.defer(function(){ // defer needed so that the change of focus doesn't happen on mousedown which also sets focus\r\n\t\t\t\t\t// the saveButton should start out disabled in most cases but the above set could have fired onChange\r\n\t\t\t\t\tif(ww.saveButton){\r\n\t\t\t\t\t\tww.saveButton.set(\"disabled\", \"intermediateChanges\" in ew);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.focus(); // both nodes are showing, so we can switch focus safely\r\n\t\t\t\t\tthis._resetValue = this.getValue();\r\n\t\t\t\t});\r\n\t\t\t}));\r\n\t\t},\r\n\r\n\t\t_onBlur: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tCalled when focus moves outside the InlineEditBox.\r\n\t\t\t//\t\tPerforms garbage collection.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\r\n\t\t\tthis.inherited(arguments);\r\n\t\t\tif(!this.editing){\r\n\t\t\t\t/* causes IE focus problems, see TooltipDialog_a11y.html...\r\n\t\t\t\t this.defer(function(){\r\n\t\t\t\t if(this.wrapperWidget){\r\n\t\t\t\t this.wrapperWidget.destroy();\r\n\t\t\t\t delete this.wrapperWidget;\r\n\t\t\t\t }\r\n\t\t\t\t });\r\n\t\t\t\t */\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tdestroy: function(){\r\n\t\t\tif(this.wrapperWidget && !this.wrapperWidget._destroyed){\r\n\t\t\t\tthis.wrapperWidget.destroy();\r\n\t\t\t\tdelete this.wrapperWidget;\r\n\t\t\t}\r\n\t\t\tthis.inherited(arguments);\r\n\t\t},\r\n\r\n\t\t_showText: function(/*Boolean*/ focus){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRevert to display mode, and optionally focus on display node\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\r\n\t\t\tvar ww = this.wrapperWidget;\r\n\t\t\tdomStyle.set(ww.domNode, { visibility: \"hidden\" }); // hide the editor from mouse/keyboard events\r\n\t\t\tdomClass.add(ww.domNode, \"dijitOffScreen\");\r\n\t\t\tdomClass.remove(this.displayNode, \"dijitOffScreen\");\r\n\t\t\tdomAttr.set(this.displayNode, \"tabIndex\", this._savedTabIndex);\r\n\t\t\tif(focus){\r\n\t\t\t\tfm.focus(this.displayNode);\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tsave: function(/*Boolean*/ focus){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tSave the contents of the editor and revert to display mode.\r\n\t\t\t// focus: Boolean\r\n\t\t\t//\t\tFocus on the display mode text\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\r\n\t\t\tif(this.disabled || !this.editing){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis._set('editing', false);\r\n\r\n\t\t\tvar ww = this.wrapperWidget;\r\n\t\t\tvar value = ww.getValue();\r\n\t\t\tthis.set('value', value); // display changed, formatted value\r\n\r\n\t\t\tthis._showText(focus); // set focus as needed\r\n\t\t},\r\n\r\n\t\tsetValue: function(/*String*/ val){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDeprecated.   Use set('value', ...) instead.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tdeprecated\r\n\t\t\tkernel.deprecated(\"dijit.InlineEditBox.setValue() is deprecated.  Use set('value', ...) instead.\", \"\", \"2.0\");\r\n\t\t\treturn this.set(\"value\", val);\r\n\t\t},\r\n\r\n\t\t_setValueAttr: function(/*String*/ val){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tHook to make set(\"value\", ...) work.\r\n\t\t\t//\t\tInserts specified HTML value into this node, or an \"input needed\" character if node is blank.\r\n\r\n\t\t\tval = lang.trim(val);\r\n\t\t\tvar renderVal = this.renderAsHtml ? val : val.replace(/&/gm, \"&amp;\").replace(/</gm, \"&lt;\").replace(/>/gm, \"&gt;\").replace(/\"/gm, \"&quot;\").replace(/\\n/g, \"<br>\");\r\n\t\t\tthis.displayNode.innerHTML = renderVal || this.noValueIndicator;\r\n\t\t\tthis._set(\"value\", val);\r\n\r\n\t\t\tif(this._started){\r\n\t\t\t\t// tell the world that we have changed\r\n\t\t\t\tthis.defer(function(){\r\n\t\t\t\t\tthis.onChange(val);\r\n\t\t\t\t}); // defer prevents browser freeze for long-running event handlers\r\n\t\t\t}\r\n\t\t},\r\n\r\n\t\tgetValue: function(){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tDeprecated.   Use get('value') instead.\r\n\t\t\t// tags:\r\n\t\t\t//\t\tdeprecated\r\n\t\t\tkernel.deprecated(\"dijit.InlineEditBox.getValue() is deprecated.  Use get('value') instead.\", \"\", \"2.0\");\r\n\t\t\treturn this.get(\"value\");\r\n\t\t},\r\n\r\n\t\tcancel: function(/*Boolean*/ focus){\r\n\t\t\t// summary:\r\n\t\t\t//\t\tRevert to display mode, discarding any changes made in the editor\r\n\t\t\t// tags:\r\n\t\t\t//\t\tprivate\r\n\r\n\t\t\tif(this.disabled || !this.editing){\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthis._set('editing', false);\r\n\r\n\t\t\t// tell the world that we have no changes\r\n\t\t\tthis.defer(\"onCancel\"); // defer prevents browser freeze for long-running event handlers\r\n\r\n\t\t\tthis._showText(focus);\r\n\t\t}\r\n\t});\r\n\r\n\tif(has(\"dojo-bidi\")){\r\n\t\tInlineEditBox = declare(\"dijit.InlineEditBox\", InlineEditBox, {\r\n\t\t\t_setValueAttr: function(){\r\n\t\t\t\tthis.inherited(arguments);\r\n\t\t\t\tthis.applyTextDir(this.displayNode);\r\n\t\t\t}\r\n\t\t});\r\n\t}\r\n\r\n\tInlineEditBox._InlineEditor = InlineEditor;\t// for monkey patching\r\n\r\n\treturn InlineEditBox;\r\n});\r\n"]}